---
swagger: "2.0"
info:
  description: "Sales API for the product domain on eBao Cloud"
  version: "0.0.6"
  title: "eBao Cloud API (Product)"
host: "ebaocloud.life"
basePath: "/v1"
schemes:
- "http"
- "https"
produces:
- "application/json"
paths:
  /insurers:
    get:
      tags:
      - "Insurer"
      summary: "Fetch a list of insurer documents"
      description: "This endpoint returns a list of insurers.There are a number of\
        \ parameters to help with filtering and sorting of the required insurer documents.\n"
      operationId: "getInsurerList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Number of records to skip in the result list"
        required: false
        type: "number"
        default: 0
        format: "integer"
      - name: "limit"
        in: "query"
        description: "Limit the number of rows to return"
        required: false
        type: "number"
        default: 100
        format: "integer"
      - name: "sort"
        in: "query"
        description: "Sorting order. Prefix with '-' for descending order"
        required: false
        type: "string"
        format: "string"
      - name: "keys"
        in: "query"
        description: "Specify multiple rows to fetch ?keys=123,456"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "filter"
        in: "query"
        description: "Filter criteria to apply to the search. The format used is filter=condition|condition.\
          \ The format of the condition is {key}\\*{operator}\\*{value) e.g. filter=name\\\
          *startsWith\\*A. The \\* is used to delimit the components of the criteria.\
          \ As an example, to find rows with name that starts with 'A', specify as\
          \ filter=name\\*startsWith\\*A .  When there are multiple criterias in the\
          \ condition, e.g. find rows where name startsWith A and age greater than\
          \ 30, specify as filter=name\\*startsWith\\*A;age\\*GT\\*30 . The ; character\
          \ is used to separate the criterias. For more complex filters, e.g. Find\
          \ rows where name starts with 'A' OR name starts with B, then it can be\
          \ specified as filter=name\\*startsWith\\*A|name\\*startsWith\\*B . Use\
          \ the | to separate OR conditions."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "pipes"
      responses:
        200:
          description: "Successful response to fetching a list of insurers"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Insurer"
  /insurers/{insurerId}:
    get:
      tags:
      - "Insurer"
      summary: "Fetch an insurer document"
      description: "This end point is used to get the insurer for the requested insurer\
        \ id."
      operationId: "getInsurer"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "insurerId"
        in: "path"
        description: "Unique id of the insurer"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response to fetching an insurer document"
          schema:
            $ref: "#/definitions/Insurer"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Insurer"
  /packages:
    get:
      tags:
      - "Package"
      summary: "Fetch a list of packages (basic information)."
      description: "This endpoint returns a list of packages with basic information\
        \ about the package. There are a number of parameters to help with filtering\
        \ and sorting of the required documents."
      operationId: "getPackageList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Number of records to skip in the result list"
        required: false
        type: "number"
        default: 0
        format: "integer"
      - name: "limit"
        in: "query"
        description: "Limit the number of rows to return"
        required: false
        type: "number"
        default: 100
        format: "integer"
      - name: "keys"
        in: "query"
        description: "Specify multiple rows to fetch ?keys=123,456"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "sort"
        in: "query"
        description: "Sorting order. Prefix with '-' for descending order"
        required: false
        type: "string"
        format: "string"
      - name: "filter"
        in: "query"
        description: "Filter criteria to apply to the search. The format used is filter=condition|condition.\
          \ The format of the condition is {key}\\*{operator}\\*{value) e.g. filter=name\\\
          *startsWith\\*A. The \\* is used to delimit the components of the criteria.\
          \ As an example, to find rows with name that starts with 'A', specify as\
          \ filter=name\\*startsWith\\*A .  When there are multiple criterias in the\
          \ condition, e.g. find rows where name startsWith A and age greater than\
          \ 30, specify as filter=name\\*startsWith\\*A;age\\*GT\\*30 . The ; character\
          \ is used to separate the criterias. For more complex filters, e.g. Find\
          \ rows where name starts with 'A' OR name starts with B, then it can be\
          \ specified as filter=name\\*startsWith\\*A|name\\*startsWith\\*B . Use\
          \ the | to separate OR conditions."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "pipes"
      - name: "favourite"
        in: "query"
        description: "Specific filter to get the favourite packages for the user"
        required: false
        type: "string"
        allowEmptyValue: true
      responses:
        200:
          description: "Successful response to fetching a list of packages."
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/detailed:
    get:
      tags:
      - "Package"
      summary: "Fetch a list of detailed packages (full information)."
      description: "This endpoint returns a list of packages with complete information\
        \ about the package. There are a number of parameters to help with filtering\
        \ and sorting of the required prospects. This endpoint differs from GET /packages\
        \ in that it returns packages with full information instead of just basic\
        \ information. A use case is when multiple packages are selected for further\
        \ processing."
      operationId: "getDetailedPackageList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Number of records to skip in the result list"
        required: false
        type: "number"
        default: 0
        format: "integer"
      - name: "limit"
        in: "query"
        description: "Limit the number of rows to return"
        required: false
        type: "number"
        default: 100
        format: "integer"
      - name: "keys"
        in: "query"
        description: "Specify multiple rows to fetch ?keys=123,456"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "sort"
        in: "query"
        description: "Sorting order. Prefix with '-' for descending order"
        required: false
        type: "string"
        format: "string"
      - name: "filter"
        in: "query"
        description: "Filter criteria to apply to the search. The format used is filter=condition|condition.\
          \ The format of the condition is {key}\\*{operator}\\*{value) e.g. filter=name\\\
          *startsWith\\*A. The \\* is used to delimit the components of the criteria.\
          \ As an example, to find rows with name that starts with 'A', specify as\
          \ filter=name\\*startsWith\\*A .  When there are multiple criterias in the\
          \ condition, e.g. find rows where name startsWith A and age greater than\
          \ 30, specify as filter=name\\*startsWith\\*A;age\\*GT\\*30 . The ; character\
          \ is used to separate the criterias. For more complex filters, e.g. Find\
          \ rows where name starts with 'A' OR name starts with B, then it can be\
          \ specified as filter=name\\*startsWith\\*A|name\\*startsWith\\*B . Use\
          \ the | to separate OR conditions."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "pipes"
      - name: "favourite"
        in: "query"
        description: "Specific filter to get the favourite packages for the user"
        required: false
        type: "string"
        allowEmptyValue: true
      responses:
        200:
          description: "Successful response to fetching a list of packages (complete\
            \ information)."
          schema:
            $ref: "#/definitions/inline_response_200_2"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/{packageId}:
    get:
      tags:
      - "Package"
      summary: "Fetch a package document document (complete information)"
      description: "Use this end point to fetch a complete package document"
      operationId: "getPackage"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "packageId"
        in: "path"
        description: "Unique id for the package"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response when fething a package."
          schema:
            $ref: "#/definitions/Package"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/{packageId}/products/{productId}:
    get:
      tags:
      - "Package"
      - "Product"
      summary: "Fetch a package product document"
      description: "Packages will contain main product and rider products. Use this\
        \ end point when the client wants to fetch additional information about a\
        \ package-product (main or rider product) document. The document contains\
        \ mainly textual information to explain the features of the package product."
      operationId: "getPackageProduct"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "packageId"
        in: "path"
        description: "Unique id for the package"
        required: true
        type: "integer"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response where the package product document is\
            \ returned."
          schema:
            $ref: "#/definitions/PackageProduct"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/filters:
    get:
      tags:
      - "Package"
      summary: "Fetch the list of pre-defined search fields and values for packages."
      description: "To support the search function on mobile environments, it is easier\
        \ to provide a list of pre-defined search values for the search fields. These\
        \ can then be selected instead of using the keyboard to enter the search value.\
        \ The predefined values are for insurers, product category, and benefit type\
        \ fields."
      operationId: "getPackageFilterList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response where the pre-defined search values are\
            \ returned."
          schema:
            $ref: "#/definitions/inline_response_200_3"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/{packageId}/favourite:
    post:
      tags:
      - "Package"
      summary: "Set a package as favourite"
      description: "This end point is used to mark a package as a favourite package.\
        \ It is linked to the currently authenticated user."
      operationId: "setPackageFavourite"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "packageId"
        in: "path"
        description: "Unique id for the package"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response when setting a favourite package"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
    delete:
      tags:
      - "Package"
      summary: "Remove a package as favourite"
      description: "This end point is used to unmark a package as a favourite package.\
        \ It is linked to the currently authenticated user."
      operationId: "removePackageFavourite"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "packageId"
        in: "path"
        description: "Unique id for the package"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response when unmarking a favourite package"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /packages/{packageId}/quote:
    get:
      tags:
      - "Package"
      summary: "Fetch the initial quote data for a given package"
      description: "After viewing the package information, the client application\
        \ proceeds with the quote based on the package. This endpoint will fetch the\
        \ initial data for a new quote based on the selected package. Based on the\
        \ package id, the package main product and riders plus additional available\
        \ riders are included in the initial data. Additionally, the product parameters\
        \ for all the products (main and riders) also be included in the initial quote\
        \ data."
      operationId: "initialQuoteData"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "packageId"
        in: "path"
        description: "Unique id for the package"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response to a request to fetch the initial data\
            \ for a new quote. The productList is a list with all the products. The\
            \ first item is always the main product."
          schema:
            $ref: "#/definitions/NewQuote"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Package"
  /products:
    get:
      tags:
      - "Product"
      summary: "Fetch a list of products"
      description: "Use this endpoint to get a list of available main products given\
        \ company id and birth date of the insured. The company id and birth date\
        \ can optionally be supplied to filter the list of available main products.\
        \ The authenticated user will be used to determine the channel that the intermediary\
        \ belongs to. The channel is then used to filter the list of available products\
        \ as well. The company id and the insured's birth date is optional as some\
        \ client applications allow the user to select the product before determining\
        \ the client."
      operationId: "getProductList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Number of records to skip in the result list"
        required: false
        type: "number"
        default: 0
        format: "integer"
      - name: "limit"
        in: "query"
        description: "Limit the number of rows to return"
        required: false
        type: "number"
        default: 100
        format: "integer"
      - name: "sort"
        in: "query"
        description: "Sorting order. Prefix with '-' for descending order"
        required: false
        type: "string"
        format: "string"
      - name: "productType"
        in: "query"
        description: "Filter products based  on the product type i.e. Main or Rider"
        required: false
        type: "string"
      - name: "insurerIds"
        in: "query"
        description: "Filter products that belong to the list of insurers e.g. insurerIds=001,002"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "birthDate"
        in: "query"
        description: "Filter products where the calculated age (using the birth date)\
          \ is within the minimum and maximum age limit."
        required: false
        type: "string"
      - name: "gender"
        in: "query"
        description: "Filter products which are targeted at specific products. Male\
          \ or Female"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response to fetch a list of products"
          schema:
            $ref: "#/definitions/inline_response_200_5"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/detailed:
    get:
      tags:
      - "Product"
      summary: "Fetch a list of product (full information)"
      description: "Use this endpoint to get a list of products with their complete\
        \ information. This end point is similar to GET /products with the exception\
        \ that the complete product information is returned."
      operationId: "getDetailedProductList"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Number of records to skip in the result list"
        required: false
        type: "number"
        default: 0
        format: "integer"
      - name: "keys"
        in: "query"
        description: "Specify multiple rows to fetch ?keys=123,456"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "limit"
        in: "query"
        description: "Limit the number of rows to return"
        required: false
        type: "number"
        default: 100
        format: "integer"
      - name: "sort"
        in: "query"
        description: "Sorting order. Prefix with '-' for descending order"
        required: false
        type: "string"
        format: "string"
      - name: "productType"
        in: "query"
        description: "Filter products based  on the product type i.e. Main or Rider"
        required: false
        type: "string"
      - name: "insurerIds"
        in: "query"
        description: "Filter products that belong to the list of insurers e.g. insurerIds=001,002"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "birthDate"
        in: "query"
        description: "Filter products where the calculated age (using the birth date)\
          \ is within the minimum and maximum age limit."
        required: false
        type: "string"
      - name: "gender"
        in: "query"
        description: "Filter products which are targeted at specific products. Male\
          \ or Female"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response to fetch a list of products with full\
            \ information"
          schema:
            $ref: "#/definitions/inline_response_200_6"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}:
    get:
      tags:
      - "Product"
      summary: "Fetch a product document."
      description: "This end point can be used to fetch the detailed product information.\
        \ It will include all the product parameters, including the limits. Additionally,\
        \ the available values for coverage terms, premium payment terms, payment\
        \ methods are also be included in the product document."
      operationId: "getProduct"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response for fetching a product (will full details)"
          schema:
            $ref: "#/definitions/Product"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/riders:
    post:
      tags:
      - "Product"
      summary: "Fetch the list of attachable riders for the given main product and\
        \ currently attached riders."
      description: "This end point is typically used to generate a list of attachable\
        \ riders that will be presented as a drop down list in the client application\
        \ UI. Apart from the main product id, the list of riders that are already\
        \ attached is also a factor in determining the remaining attachable riders.\
        \ These can be mutually exclusive riders e.g. \"Waiver Plus\" rider can no\
        \ longer be attached if the \"Waiver Premium\" rider is already attached."
      operationId: "getAttachableRiders"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "Details of the proposed insurance including the life assureds,\
          \ main product details and riders already attached"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Successful response that returns the list of riders together\
            \ with their product parameters."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/illustration:
    post:
      tags:
      - "Product"
      - "Illustration"
      summary: "Generate the illustration (plan) data."
      description: "This end point is used to generate all the data that is required\
        \ for presentation the ilustration (plan) to the customer. It differs from\
        \ /products/{productId}/calculators/illustration as it includes the static\
        \ product information (writeups) about the products in the plan."
      operationId: "generateProductIllustration"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "Details of the proposed insurance including the life assureds,\
          \ main product details and riders already attached"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Successful response that returns the proposed insurance, the\
            \ table of benefits, and static plan information about benefits, features,\
            \ and highlights of the plan."
          schema:
            $ref: "#/definitions/inline_response_200_7"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/age:
    get:
      tags:
      - "Product"
      summary: "Calculate the age given the product id and birth date"
      description: "Use this end point to calculate the age. The product id is used\
        \ to determine the age method which will affect the calculation of the age.\
        \ Pass in the birth date (YYYY-MM-DD) as a query parameter e.g. GET /products/5212/calculators/age?birthDate=1978-06-22"
      operationId: "calculateAge"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - name: "birthDate"
        in: "query"
        description: "The birth date in YYYY-MM-DD format"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response and calculated age is returned."
          schema:
            $ref: "#/definitions/inline_response_200_8"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/premium:
    post:
      tags:
      - "Product"
      summary: "Compute the results of the product premium calculator using the details\
        \ of the proposed insurance."
      description: "Use this end point to trigger the calculation of the premium for\
        \ all the products (main and riders) in the proposed insurance. The proposed\
        \ insurance details must include the proposed life assured."
      operationId: "calculateProductPremium"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "Proposed insurance details required to calculate the premium,\
          \ i.e. insureds, main product, and riders input"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Successful response that contains the request input with the\
            \ addition of the premium amount (firstYearPremium) for the main product\
            \ and riders"
          schema:
            $ref: "#/definitions/ProposedInsurance"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/costOfInsurance:
    post:
      tags:
      - "Product"
      summary: "Compute the results of the product's cost of insurance calculator\
        \ using the details of the proposed insurance."
      description: "Use this end point to trigger the calculation of the monthly cost\
        \ of insurance for all the products in the proposed insurance parameter. The\
        \ proposed insurance details must include the proposed life assured. The monthly\
        \ cost of insurance is applicable only to investment products."
      operationId: "calculateProductCostOnInsurance"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "proposedInsurance"
        description: "Proposed insurance details required to calculate the cost of\
          \ insurance, i.e. insureds, main product, and riders"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Successful response that contains the request input with the\
            \ addition of the monthly cost of insurance (monthlyCostOfInsurance) for\
            \ the main product and riders"
          schema:
            $ref: "#/definitions/ProposedInsurance"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/illustration:
    post:
      tags:
      - "Product"
      summary: "Compute the results of the product illustration calculator using the\
        \ details of the proposed insurance."
      description: "Use this end point to trigger the calculation of the fields required\
        \ for the illustration. The illustrations field are configured when setting\
        \ up the product in the eBaoTech product factory. The table of benefits is\
        \ also available in the response."
      operationId: "calculateIllustrationFields"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "Proposed insurance details required to calculate the illustration\
          \ fields, i.e. insureds, main product, and riders, topups, withdrawals,\
          \ fund allocations"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Successful response that contains the request input with the\
            \ addition of the result of the calculations (illustrationFields) for\
            \ the main product and riders. Also includes the table of benefits."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/adhoc:
    post:
      tags:
      - "Product"
      summary: "Compute the results for the requested list of illustration fields\
        \ using the product adhoc calculator and the details of the proposed insurance."
      description: "Use this end point when the client applications needs fine grain\
        \ control over which of the illustration fields to trigger the calculation\
        \ for. The requested list of illustration fields is passed in via the request\
        \ body parameter. The illustrations field are configured when setting up the\
        \ product in the eBaoTech product factory."
      operationId: "calculateAdhocFields"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The parameter that contains the list of illustration fields\
          \ and the proposed insurance details i.e. insureds, main product, and riders,\
          \ topups, withdrawals, and fund allocations"
        required: true
        schema:
          $ref: "#/definitions/bodyParam"
      responses:
        200:
          description: "Successful response that contains the request input with the\
            \ addition of the calculated values (illustrationFields) for the main\
            \ product and riders"
          schema:
            $ref: "#/definitions/ProposedInsurance"
        400:
          description: "Response to indicate that the request cannot be processed\
            \ due to a client error (submitted data has errors)."
          schema:
            $ref: "#/definitions/inline_response_400"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateInsured:
    post:
      tags:
      - "Product"
      summary: "Validate the eligibility of life assured to purchase the product."
      description: "This end point is used in certain scenarios, where the product\
        \ is selected and then followed by the selection of the life assured. Where\
        \ the life assured is selected first, the available list of products will\
        \ have been filter for their age and gender requirements. The validateInsured\
        \ validator will check that the age and gender requirements for the product\
        \ are met."
      operationId: "validateProductInsured"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "An object that holds the details of the insured person"
        required: true
        schema:
          $ref: "#/definitions/bodyParam_1"
      responses:
        200:
          description: "Response when the validation has no errors. Returns the complete\
            \ product document."
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateMain:
    post:
      tags:
      - "Product"
      summary: "Trigger the validateMain validator to check the main product in the\
        \ proposed insurance details."
      description: "Use this end point to validate the main product details. Typically\
        \ in the front end client application, the main product details are captured\
        \ in its own page (section). This end point can be called to validate the\
        \ input of the main product when the client application navigates away from\
        \ the page (section)."
      operationId: "validateMainProduct"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The proposed insurance details, minimally with the insureds\
          \ and main product input"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Response when the validation of the main product has no errors"
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateRiders:
    post:
      tags:
      - "Product"
      summary: "Trigger the validateRiders validator to check the riders input in\
        \ the proposed insurance details."
      description: "Use this end point to validate all the riders attached to the\
        \ main product for the proposed insurance details supplied in the request\
        \ body. Checks typically include the minimum and maximum coverage amounts,\
        \ the age limits of the insured, etc. Typically used when navigating away\
        \ from the page (section) which captures the riders input."
      operationId: "validateProductRiders"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The proposed insurance details, minimally with the insureds,\
          \ main product, and riders information"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Response when the validation has no errors in the riders"
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateTopups:
    post:
      tags:
      - "Product"
      summary: "Trigger the validateTopups validator to check the top-up values in\
        \ the proposed insurance details."
      description: "Use this end point to validate all the topups in the proposed\
        \ insurance details supplied in the request body. Input of topups are only\
        \ required for investment policies."
      operationId: "validateProductTopups"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The proposed insurance details, minimally with the insureds,\
          \ main product, and topups information"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Response when the validation has no errors in the top-ups."
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateWithdrawals:
    post:
      tags:
      - "Product"
      summary: "Trigger the validateWithdrawals validator to check the withdrawals\
        \ in the proposed insurance details."
      description: "Use this end point to validate all the withdrawals using the proposed\
        \ insurance details supplied in the request body. Input of withdrawals are\
        \ only required for investment policies. Validation include minimum withdrawal\
        \ amounts and whether the year of the withdrawals are allowed (e.g. withdrawals\
        \ may not be allowed in the initial 5 years)"
      operationId: "validateProductWithdrawals"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The proposed insurance details, minimally with the insureds,\
          \ main product, and withdrawals information"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Response when the validation has no errors in the withdrawals"
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/validateFunds:
    post:
      tags:
      - "Product"
      summary: "Trigger the validateFunds validator to check the fund allocations\
        \ in the proposed insurance details in the body parameter."
      description: "Use this end point to validate all the fund allocations using\
        \ the proposed insurance details supplied in the request body. Input of fund\
        \ allocations are required for investment proposals. Validation include minimum\
        \ allocation (e.g. min of 10%) and allowed quantums (e.g. allocations must\
        \ be multiples of 5%)"
      operationId: "validateProductFunds"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "The proposed insurance details, minimally with the insureds,\
          \ main product, and fund allocation information"
        required: true
        schema:
          $ref: "#/definitions/ProposedInsurance"
      responses:
        200:
          description: "Response when the validation has no errors in the fund allocations"
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators/adhoc:
    post:
      tags:
      - "Product"
      summary: "Generate the results for the requested list of validators using the\
        \ adhoc validator and the details of the proposed insurance submitted in the\
        \ body paramater."
      description: "Use this end point to trigger specific validators when the client\
        \ application requires fine grain control over the validation. The list of\
        \ validators to trigger must be in the request details as part of the body\
        \ parameter. An an example, this endpoint can be used to validate the topups\
        \ and withdrawals, which may be on the same page of the client application\
        \ e.g. validatorList= [\"validateTopups\", \"validateWithdrawals\"]"
      operationId: "validateAdhocProductValidators"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      - in: "body"
        name: "bodyParam"
        description: "An object containing the validator list and the proposed insurance\
          \ details, minimally with the insureds, and main product information"
        required: true
        schema:
          $ref: "#/definitions/bodyParam_2"
      responses:
        200:
          description: "Response when the validation has no errors for the requested\
            \ validator list"
          schema:
            $ref: "#/definitions/ValidatorSuccessResult"
        400:
          description: "Response when validation fails"
          schema:
            $ref: "#/definitions/inline_response_400_1"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/templates/illustration:
    get:
      tags:
      - "Product"
      summary: "Fetch the illustration template for the product"
      description: "This end point should be used at design time as it provides an\
        \ html template on the illustration for the given product. It typically would\
        \ contain static and dynamic elements. It is meant to provide a sample of\
        \ how the illustration output should look like and also where the dynamic\
        \ elements (fields) are on the template. The data for dynamic elements can\
        \ be fullfilled by the /products/{productId}/illustration end point. The actual\
        \ output of the illustration can be implemented in any format and it is the\
        \ decision of the front end application."
      operationId: "getProductIllustrationTemplate"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response and the template is returned"
          schema:
            $ref: "#/definitions/inline_response_200_10"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/calculators/illustration/fields:
    get:
      tags:
      - "Product"
      summary: "Fetch the list of illustration calculator fields for the product"
      description: "This end point should be used at design time to obtain a list\
        \ of the illustration fields that have been configured for the product. This\
        \ list can be useful when the client wants to have fine-grain control over\
        \ which of the illustration fields calculation should be triggered (POST /products/{productId}/calculators/adhoc)"
      operationId: "getIllustrationCalculatorFields"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response that return a list of illustration fields\
            \ (name and description)"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_11"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
  /products/{productId}/validators:
    get:
      tags:
      - "Product"
      summary: "Fetch the list of available validators for the product"
      description: "This end point is expected to be used at design time. It can be\
        \ used to get a listing of the available validators for the product. This\
        \ is useful when the client application requires fine grain control over the\
        \ triggering of the various validators. Triggering of the specific validators\
        \ can be done using the /products/{productId}/validators/adhoc end point."
      operationId: "getProductValidators"
      parameters:
      - name: "lang"
        in: "header"
        description: "Language to be used in case the response has text data (e.g.\
          \ error messages)"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Unique id for the product"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response that return a list of validators that\
            \ are available for the product"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_11"
        401:
          description: "Response when the client is not authorized for this operation."
          schema:
            $ref: "#/definitions/inline_response_401"
        404:
          description: "Response when the document is not found."
          schema:
            $ref: "#/definitions/inline_response_404"
        500:
          description: "Response when there is an unexpected server error."
          schema:
            $ref: "#/definitions/inline_response_500"
      security:
      - APISecurity: []
      x-swagger-router-controller: "Product"
securityDefinitions:
  APISecurity:
    type: "apiKey"
    name: "Token"
    in: "header"
definitions:
  Insurer:
    type: "object"
    properties:
      pk:
        type: "string"
        description: "Unique id for the insurer"
      doctype:
        type: "string"
        default: "Insurer"
      insurerName:
        type: "string"
        description: "Name of the insurer"
      shortName:
        type: "string"
        description: "Insurer short Name"
      logo:
        type: "string"
        description: "Reference to the image to use for the insurer logo (e.g. zurich.png)"
      telephone:
        type: "string"
        description: "Phone number for the insurer"
      url:
        type: "string"
        description: "Url for the insurer website"
      extensionFields:
        type: "object"
        description: "Use this object to hold the aditional fields due to local customizations"
        additionalProperties:
          type: "string"
  PackageProductSummary:
    type: "object"
    properties:
      pk:
        type: "string"
        description: "Unique id to identify the product"
      doctype:
        type: "string"
        default: "PackageProduct"
      version:
        type: "string"
      packageProductName:
        type: "string"
        description: "Name of the product"
      insType:
        type: "string"
        description: "To indicate if main or rider 1=Main, 2=Rider"
      extensionFields:
        type: "object"
        description: "Use this object to hold the aditional fields due to local customizations"
        additionalProperties:
          type: "string"
  PackageProduct:
    allOf:
    - $ref: "#/definitions/PackageProductSummary"
    - properties:
        underwritingRule:
          $ref: "#/definitions/PackageProduct_underwritingRule"
        liabilities:
          type: "array"
          items:
            $ref: "#/definitions/PackageProduct_liabilities"
        caseStudies:
          type: "array"
          items:
            $ref: "#/definitions/PackageProduct_caseStudies"
        remark:
          type: "string"
          description: "Additional remarks about this product"
        diseaseInfo:
          type: "string"
          description: "Information about diseases covered for the product"
        termAndConditions:
          type: "string"
          description: "Writeup about the detailed terms and conditions of the insurance\
            \ contract"
  PackageLiability:
    type: "object"
    properties:
      liabId:
        type: "string"
        description: "Unique id for the liability"
      liabType:
        type: "string"
        description: "Type of liability (category)"
      liabDesc:
        type: "string"
        description: "The description for the liability"
      displayOrder:
        type: "number"
        description: "Controls the ordering when displaying the liability information."
  PackageCoveragePeriod:
    type: "object"
    properties:
      coverageType:
        type: "string"
        description: "Coverage type is usually in duration (e.g. 10 years) or the\
          \ end age (e.g. until age 65)"
      coverageValue:
        type: "number"
        description: "Depending on the coverageType, the meaning of this field is\
          \ either the number of years to cover OR the coverage end age."
  PackagePremiumPaymentTerm:
    type: "object"
    properties:
      termType:
        type: "string"
        description: "Either duration or end age i.e. pay premium for 20 years (duration)\
          \ or pay premium premium until age 55 (end age)"
      termValue:
        type: "number"
        description: "Number representing the duration or end age depending on termType"
  PackageProductFeature:
    type: "object"
    properties:
      featureId:
        type: "string"
        description: "Unique id for the feature"
      featurePic:
        type: "string"
        description: "Reference to the image to highlight the feature"
      displayOrder:
        type: "number"
        description: "Ordering information when displaying the feature"
  PackageHighlight:
    type: "object"
    properties:
      highLightId:
        type: "string"
        description: "Unique id for the hightlight"
      description:
        type: "string"
        description: "Description of the package hightligh"
      displayOrder:
        type: "number"
        description: "Ordering information"
  PackageAttachableRider:
    type: "object"
    properties:
      productId:
        type: "integer"
        description: "Either the main product or a rider (in the case of dependent\
          \ riders) i.e. the primary product"
      attachId:
        type: "integer"
        description: "The attachable rider i.e. the secondary product."
      compulsory:
        type: "string"
        description: "Flag to indicate if this relationship is mandatory. Can be used\
          \ to represent mandatory riders that must be attached to the main product"
      attachedProductName:
        type: "string"
        description: "Name of the attachable rider"
  PackageSummary:
    type: "object"
    properties:
      packageId:
        type: "integer"
        description: "Unique id for the package"
      packageName:
        type: "string"
        description: "Name of the package"
      examplePremium:
        type: "number"
        description: "Typical premium"
      favourite:
        type: "boolean"
        description: "Flag to mark the package as a favourite of the user"
      isNew:
        type: "boolean"
        description: "New package or otherwise"
      productCategory:
        type: "string"
        description: "Product category e.g. Whole Life, Endowment, Health, Accident"
      ageRange:
        $ref: "#/definitions/PackageSummary_ageRange"
      visitNumber:
        type: "number"
        description: "Count of the number of times the user has viewed this package"
      tagList:
        type: "array"
        items:
          $ref: "#/definitions/PackageSummary_tagList"
      coveragePeriods:
        type: "array"
        items:
          $ref: "#/definitions/PackageCoveragePeriod"
      highlights:
        type: "array"
        items:
          $ref: "#/definitions/PackageHighlight"
      liabilities:
        type: "array"
        items:
          $ref: "#/definitions/PackageLiability"
      extensionFields:
        type: "object"
        description: "Use this object to hold the aditional fields due to local customizations"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
  Package:
    allOf:
    - $ref: "#/definitions/PackageSummary"
    - properties:
        insurer:
          $ref: "#/definitions/Insurer"
        premiumPaymentTerms:
          type: "array"
          items:
            $ref: "#/definitions/PackagePremiumPaymentTerm"
        features:
          type: "array"
          items:
            $ref: "#/definitions/PackageProductFeature"
        mainProduct:
          $ref: "#/definitions/PackageProductSummary"
        attachableRiders:
          type: "array"
          items:
            $ref: "#/definitions/PackageAttachableRider"
  NewQuote:
    type: "object"
    properties:
      packageId:
        type: "integer"
      packageName:
        type: "string"
      insurer:
        $ref: "#/definitions/Insurer"
      productList:
        type: "array"
        items:
          $ref: "#/definitions/Product"
      valueAddedList:
        type: "array"
        items:
          $ref: "#/definitions/NewQuote_valueAddedList"
      insuranceSpiritList:
        type: "array"
        items:
          $ref: "#/definitions/NewQuote_insuranceSpiritList"
      suggestedReason:
        type: "string"
      extensionFields:
        type: "object"
        description: "Use this object to hold the aditional fields due to local customizations"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
  Fund:
    type: "object"
    properties:
      fundCode:
        type: "string"
        description: "The code for the fund"
      fundName:
        type: "string"
        description: "Name of the fund for investment policies"
      targetPremiumPercent:
        type: "number"
        description: "The percentage allocation for target (basic) premium"
      adhocPercent:
        type: "number"
        description: "The percentage allocation for ad-hoc topups"
      regularTopupPercent:
        type: "number"
        format: "percentage"
        description: "The percentage allocation for regular topups"
  Topup:
    type: "object"
    properties:
      year:
        type: "number"
      amount:
        type: "number"
  Withdrawal:
    type: "object"
    properties:
      year:
        type: "number"
      amount:
        type: "number"
  ProductSummary:
    type: "object"
    properties:
      pk:
        type: "string"
        description: "Unique id for the productId"
      doctype:
        type: "string"
        default: "Product"
      productCode:
        type: "string"
        description: "Code for the product  i.e. internal_id"
      productName:
        type: "string"
      insType:
        type: "string"
        description: "Type of product 1=Main, 2=Rider"
      unitFlag:
        type: "string"
        description: "Premium formula calculation type"
      insurerId:
        type: "string"
      sumAssuredLimitList:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary_sumAssuredLimitList"
      ageLimitList:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary_ageLimitList"
      premiumLimitList:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary_premiumLimitList"
      benefitLevelList:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary_benefitLevelList"
      liabilityList:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary_liabilityList"
      ageRange:
        $ref: "#/definitions/ProductSummary_ageRange"
      pointToPh:
        type: "string"
        description: "Flag to indicate if product applies to policholder"
      pointToSecInsured:
        type: "string"
        description: "Flag to indicate if product applies to second insured"
      smokingIndi:
        type: "string"
        description: "Flag to indicate if smoking status is a risk attribute"
      jobIndi:
        type: "string"
        description: "Flag to indicate if occupation is a risk attribute"
      socialInsureIndi:
        type: "string"
      isWaiver:
        type: "string"
        description: "Flag to indicate if this is a waiver product"
      isAnnuityProduct:
        type: "string"
        description: "Flag to indicate if this is an annuity product"
      isPackageProduct:
        type: "string"
        description: "Flag to indicate if this is a package product"
      saEqual:
        type: "string"
        description: "Rider SA to be equal to main SA"
      attachCompulsory:
        type: "string"
      displayPremiumIndi:
        type: "string"
        description: "value should be \"Y\" or \"N\""
      displayMonthlyCoi:
        type: "string"
        description: "value should be \"Y\" or \"N\""
      pointToSpouse:
        type: "string"
        description: "Flag to indicate if product applies to spouse"
      inputFields:
        type: "array"
        items:
          $ref: "#/definitions/ProductInputFields"
  ProductCoveragePeriod:
    type: "object"
    properties:
      coverageType:
        type: "string"
        description: "Coverage type is usually in duration (e.g. 10 years) or the\
          \ end age (e.g. until age 65)"
      coverageValue:
        type: "number"
        description: "Depending on the coverageType, the meaning of this field is\
          \ either the number of years to cover OR the coverage end age."
  ProductPremiumPaymentPeriod:
    type: "object"
    properties:
      premiumPaymentType:
        type: "string"
        description: "Premium payment type can be duration (e.g. 10 years) or the\
          \ end age (e.g. until age 65)"
      premiumPaymentValue:
        type: "number"
        description: "Depending on the premiumPaymentType, the meaning of this field\
          \ is either the number of years to pay OR to pay premium until age."
  ProductCurrency:
    type: "object"
    properties:
      currencyId:
        type: "string"
      currencyName:
        type: "string"
  ProductFund:
    type: "object"
    properties:
      fundCode:
        type: "string"
      fundName:
        type: "string"
  ProductPaymentMode:
    type: "object"
    properties:
      paymentMode:
        type: "string"
        description: "The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly,\
          \ 4=Monthly, 5=Single"
      paymentModeDesc:
        type: "string"
  ProductPaymentMethod:
    type: "object"
    properties:
      paymentMode:
        type: "string"
      paymentMethod:
        type: "string"
      paymentMethodDesc:
        type: "string"
  ProductInputFields:
    type: "object"
    properties:
      fieldName:
        type: "string"
      dataType:
        type: "string"
        description: "The data type of the input field i.e. String, Date or Number\
          \ or Enum (for cases where the drop down list obtained from the response\
          \ from the end point /products/{productId} e.g. coveragePeriods, currency)"
  Product:
    allOf:
    - $ref: "#/definitions/ProductSummary"
    - properties:
        coveragePeriods:
          type: "array"
          items:
            $ref: "#/definitions/ProductCoveragePeriod"
        premiumPaymentPeriods:
          type: "array"
          items:
            $ref: "#/definitions/ProductPremiumPaymentPeriod"
        currencies:
          type: "array"
          items:
            $ref: "#/definitions/ProductCurrency"
        funds:
          type: "array"
          items:
            $ref: "#/definitions/ProductFund"
        paymentModes:
          type: "array"
          items:
            $ref: "#/definitions/ProductPaymentMode"
        paymentMethods:
          type: "array"
          items:
            $ref: "#/definitions/ProductPaymentMethod"
  Insured:
    type: "object"
    properties:
      insuredId:
        type: "number"
      name:
        type: "string"
        description: "Name of the insured"
      age:
        type: "number"
        description: "Age of the insured. Required if birthdate is not provided"
      birthDate:
        type: "string"
        format: "date"
        description: "Required if age is not provided"
      jobCateId:
        type: "number"
        description: "Risk class - one of the common risk attributes"
      occupation:
        type: "string"
        description: "Typically provided to determine the risk class of this person."
      socialInsuranceIndi:
        type: "string"
      gender:
        type: "string"
        description: "MALE or FEMALE"
      smoking:
        type: "string"
        description: "Generally SMOKER or NON-SMOKER and used as a factor to determine\
          \ the risk premium"
  ProductInput:
    type: "object"
    properties:
      productId:
        type: "integer"
      productCode:
        type: "string"
      productName:
        type: "string"
      lifeAssuredNumber:
        type: "integer"
        description: "index into the insured list i.e. identify person playing role\
          \ of insured for this product"
      sumAssured:
        type: "number"
      coverageTermType:
        type: "string"
        description: "Valid values 0=NA, 1=Cover Whole Life, 2=Cover for certain years,\
          \ 3=Cover up to certain age, 4=Cover for certain months"
      coverageTermValue:
        type: "number"
      premiumPaymentTermType:
        type: "string"
      premiumPaymentTermValue:
        type: "number"
      targetPremium:
        type: "number"
      regularTopup:
        type: "number"
      commencementDate:
        type: "string"
        format: "date"
      packageId:
        type: "integer"
      currency:
        type: "string"
      benefitLevel:
        type: "string"
      benefitPlan:
        type: "string"
      coverageEndAge:
        type: "number"
      premiumTermEndAge:
        type: "number"
      saUnit:
        type: "number"
      firstYearPremium:
        type: "number"
      monthlyCostOfInsurance:
        type: "number"
      premiumAmount:
        type: "number"
        description: "Premium amount taking into account the payment frequency (mode)"
      paymentMode:
        type: "string"
        description: "The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly,\
          \ 4=Monthly, 5=Single"
      illustrationFields:
        $ref: "#/definitions/IllustrationMap"
      extensionFields:
        type: "object"
        description: "extensionFields is an object to hold local customized fields"
        additionalProperties:
          type: "string"
  ProposedInsurance:
    properties:
      insuredList:
        type: "array"
        items:
          $ref: "#/definitions/Insured"
      startDate:
        type: "string"
        format: "date"
      status:
        type: "string"
        description: "valid values are \"NEW\",\"PENDING\",\"SIGNED\",\"GENERATED\"\
          ,\"COMPLETED\""
      lastModified:
        type: "string"
        format: "date"
      version:
        type: "number"
        description: "The revision number used for optimistic locking"
      userName:
        type: "string"
        description: "The user that created this quotation"
      productList:
        type: "array"
        description: "First item in the array will be the main product"
        items:
          $ref: "#/definitions/ProductInput"
      fundList:
        type: "array"
        items:
          $ref: "#/definitions/Fund"
      topupList:
        type: "array"
        items:
          $ref: "#/definitions/Topup"
      withdrawalList:
        type: "array"
        items:
          $ref: "#/definitions/Withdrawal"
  IllustrationField:
    type: "object"
    additionalProperties:
      type: "number"
  IllustrationMap:
    type: "object"
    properties:
      0:
        $ref: "#/definitions/IllustrationField"
      1:
        $ref: "#/definitions/IllustrationField"
      2:
        $ref: "#/definitions/IllustrationField"
      99:
        $ref: "#/definitions/IllustrationField"
    description: "These are a list of dynamic fields that are calculated by the product\
      \ factory. The result is a nested object. The first level keys represent the\
      \ year. Against each year is an object will all the illustrations fields and\
      \ their value e.g. { 1 : {annualPremium: 12000, ....}, 2 : {annualPremium:12000,....},\
      \ ..., 99: {} }. Year 0 means it is not a multivalued field, i.e. a single valued\
      \ field (only 1 value).\n"
  TableOfBenefits:
    type: "object"
    properties:
      columnTitles:
        type: "array"
        items:
          $ref: "#/definitions/TableOfBenefits_columnTitles"
      tableData:
        type: "array"
        items:
          $ref: "#/definitions/TableOfBenefits_tableData"
  PlanHighlight:
    allOf:
    - $ref: "#/definitions/PackageHighlight"
    - {}
  PlanFeature:
    allOf:
    - $ref: "#/definitions/PackageProductFeature"
    - {}
  PlanValueAdd:
    type: "object"
    properties:
      valueAddedId:
        type: "string"
      valueAddedName:
        type: "string"
      valueAddedDesc:
        type: "string"
      valueAddedCode:
        type: "string"
      valueAddedPic:
        type: "string"
      displayOrder:
        type: "number"
  PlanInfo:
    type: "object"
    properties:
      planLiability:
        $ref: "#/definitions/PlanInfo_planLiability"
      planHighlights:
        type: "array"
        items:
          $ref: "#/definitions/PlanHighlight"
      planFeatures:
        type: "array"
        items:
          $ref: "#/definitions/PlanFeature"
      planValueAddedList:
        type: "array"
        items:
          $ref: "#/definitions/PlanValueAdd"
  ValidatorSuccessResult:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Simple message to indicate no validation errors e.g. ok"
        default: "ok"
  inline_response_200:
    properties:
      docs:
        type: "array"
        items:
          $ref: "#/definitions/Insurer"
      totalDocs:
        type: "integer"
      offset:
        type: "integer"
  inline_response_400_errors:
    properties:
      field:
        type: "string"
      message:
        type: "string"
      code:
        type: "string"
  inline_response_400:
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_400_errors"
  inline_response_401:
    properties:
      message:
        type: "string"
        description: "Authentication credentials were missing or incorrect"
  inline_response_500:
    properties:
      message:
        type: "string"
        description: "An unexpected error has occurred. Please try again later"
  inline_response_404:
    properties:
      message:
        type: "string"
        description: "The item does not exist"
  inline_response_200_1:
    properties:
      docs:
        type: "array"
        items:
          $ref: "#/definitions/PackageSummary"
      totalDocs:
        type: "integer"
      offset:
        type: "integer"
  inline_response_200_2:
    properties:
      docs:
        type: "array"
        items:
          $ref: "#/definitions/Package"
      totalDocs:
        type: "integer"
      offset:
        type: "integer"
  inline_response_200_3_insurers:
    properties:
      insurerId:
        type: "string"
      insurerName:
        type: "string"
  inline_response_200_3_productCategories:
    properties:
      categoryId:
        type: "string"
      categoryName:
        type: "string"
      displayOrder:
        type: "number"
  inline_response_200_3_benefitTypes:
    properties:
      benefitId:
        type: "string"
      benefitName:
        type: "string"
      benefitDesc:
        type: "string"
  inline_response_200_3:
    properties:
      insurers:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_3_insurers"
      productCategories:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_3_productCategories"
      benefitTypes:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_3_benefitTypes"
  inline_response_200_4:
    properties:
      message:
        type: "string"
        description: "Simple message to indicate that the operation was successful.\
          \ e.g. OK"
  inline_response_200_5:
    properties:
      docs:
        type: "array"
        items:
          $ref: "#/definitions/ProductSummary"
      totalDocs:
        type: "integer"
      offset:
        type: "integer"
  inline_response_200_6:
    properties:
      docs:
        type: "array"
        items:
          $ref: "#/definitions/Product"
      totalDocs:
        type: "integer"
      offset:
        type: "integer"
  inline_response_200_7:
    properties:
      proposedInsurance:
        $ref: "#/definitions/ProposedInsurance"
      tableOfBenefits:
        $ref: "#/definitions/TableOfBenefits"
      planInfo:
        $ref: "#/definitions/PlanInfo"
  inline_response_200_8:
    properties:
      age:
        type: "number"
  inline_response_200_9:
    properties:
      proposedInsurance:
        $ref: "#/definitions/ProposedInsurance"
      tableOfBenefits:
        $ref: "#/definitions/TableOfBenefits"
  bodyParam:
    type: "object"
    properties:
      illustrationFields:
        type: "array"
        items:
          type: "string"
      proposedInsurance:
        $ref: "#/definitions/ProposedInsurance"
  bodyParam_1:
    type: "object"
    properties:
      name:
        type: "string"
      birthDate:
        type: "string"
        format: "date"
      gender:
        type: "string"
        description: "Male or Female"
      smoking:
        type: "string"
      occupation:
        type: "string"
        description: "The occupation is used to determine the risk class"
      riskClass:
        type: "string"
        description: "Can be provided instead of the occupation"
  inline_response_400_1_errorList:
    properties:
      validator:
        type: "string"
        description: "Name of the validators that emitted the error"
      errors:
        type: "array"
        description: "The errors emitted by the validator. Designed to allow for multiple\
          \ error messages per validator"
        items:
          type: "string"
  inline_response_400_1:
    properties:
      errorList:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_400_1_errorList"
  bodyParam_2:
    type: "object"
    properties:
      validatorList:
        type: "array"
        items:
          type: "string"
      proposedInsurance:
        $ref: "#/definitions/ProposedInsurance"
  inline_response_200_10:
    properties:
      message:
        type: "string"
        description: "HTML string containing the template"
  inline_response_200_11:
    properties:
      fieldName:
        type: "string"
      description:
        type: "string"
  PackageProduct_underwritingRule:
    properties:
      insurerRule:
        type: "string"
        description: "Description of the insurer underwriting rules"
      productRule:
        type: "string"
        description: "Description of the product unerwriting rule"
  PackageProduct_liabilities:
    properties:
      liabDesc:
        type: "string"
        description: "Description about the liability"
  PackageProduct_caseStudies:
    properties:
      caseStudyFileRef:
        type: "string"
        description: "Reference to a pdf to describe the case study"
      displayOrder:
        type: "number"
        description: "For the ordering of the case studies"
  PackageSummary_ageRange:
    properties:
      minAge:
        type: "number"
        description: "Minimum age of life assured"
      minAgeUnit:
        type: "string"
        description: "The unit for the mininum age (e.g. years, days)"
      maxAge:
        type: "number"
        description: "Max age of the life assured"
      maxAgeUnit:
        type: "string"
        description: "The unit for the maximum age"
  PackageSummary_tagList:
    properties:
      tagId:
        type: "string"
        description: "Unique id for the tag"
      tagName:
        type: "string"
        description: "Name for the tag"
      tagPic:
        type: "string"
        description: "The reference for the picture to load"
  NewQuote_valueAddedList:
    properties:
      valueAddedId:
        type: "string"
      valueAddedName:
        type: "string"
      valueAddedDesc:
        type: "string"
      valueAddedCode:
        type: "string"
      valueAddedPic:
        type: "string"
      displayOrder:
        type: "number"
  NewQuote_insuranceSpiritList:
    properties:
      spiritId:
        type: "string"
      spiritName:
        type: "string"
      defaultSpirit:
        type: "string"
  ProductSummary_sumAssuredLimitList:
    properties:
      currencyId:
        type: "string"
      minAge:
        type: "number"
      maxAge:
        type: "number"
      minAmount:
        type: "number"
      maxAmount:
        type: "number"
  ProductSummary_ageLimitList:
    properties:
      premiumTermType:
        type: "string"
      premiumTermValue:
        type: "number"
      coverageTermType:
        type: "string"
      coverageTermValue:
        type: "number"
      paymentTermType:
        type: "string"
      paymentTermValue:
        type: "number"
      gender:
        type: "string"
      benefitLevel:
        type: "string"
      minInsuredAge:
        type: "number"
      maxInsuredAge:
        type: "number"
      minPolicyholderAge:
        type: "number"
      maxPolicyHolderAge:
        type: "number"
  ProductSummary_premiumLimitList:
    properties:
      minAge:
        type: "number"
      maxAge:
        type: "number"
      premiumTermType:
        type: "string"
      premiumTermValue:
        type: "number"
      minInitialPremium:
        type: "number"
      maxInitialPremium:
        type: "number"
  ProductSummary_benefitLevelList:
    properties:
      benefitLevel:
        type: "string"
      levelDesc:
        type: "string"
  ProductSummary_liabilityList:
    properties:
      liabId:
        type: "string"
      liabType:
        type: "string"
      liabName:
        type: "string"
      liabDesc:
        type: "string"
      displayOrder:
        type: "number"
      ifDisplayInIllustration:
        type: "string"
  ProductSummary_ageRange:
    properties:
      minAge:
        type: "number"
      minAgeUnit:
        type: "string"
      maxAge:
        type: "number"
      maxAgeUnit:
        type: "string"
  TableOfBenefits_columnTitles:
    properties:
      columnNo:
        type: "integer"
      columnTitle:
        type: "string"
  TableOfBenefits_tableData:
    properties:
      columnNo:
        type: "integer"
      value:
        type: "number"
  PlanInfo_planLiability_simpleLiabList:
    properties:
      packageId:
        type: "integer"
      productid:
        type: "integer"
      liabId:
        type: "string"
      liabName:
        type: "string"
      liabDisplayName:
        type: "string"
      libDescQuote:
        type: "string"
      libCalcType:
        type: "string"
      libCalcMethod:
        type: "string"
      liabAmount:
        type: "number"
      needDiseaseIndi:
        type: "string"
      totalAmount:
        type: "number"
      libDesc:
        type: "string"
      liabList:
        type: "string"
      categoryName:
        type: "string"
  PlanInfo_planLiability_liabCategoryList:
    properties:
      categoryId:
        type: "string"
      categoryName:
        type: "string"
      simpleLiabList:
        type: "array"
        items:
          $ref: "#/definitions/PlanInfo_planLiability_simpleLiabList"
  PlanInfo_planLiability:
    properties:
      multiProduct:
        type: "boolean"
      liabCategoryList:
        type: "array"
        items:
          $ref: "#/definitions/PlanInfo_planLiability_liabCategoryList"
parameters:
  queryOffset:
    name: "offset"
    in: "query"
    description: "Number of records to skip in the result list"
    required: false
    type: "number"
    default: 0
    format: "integer"
  queryLimit:
    name: "limit"
    in: "query"
    description: "Limit the number of rows to return"
    required: false
    type: "number"
    default: 100
    format: "integer"
  querySort:
    name: "sort"
    in: "query"
    description: "Sorting order. Prefix with '-' for descending order"
    required: false
    type: "string"
    format: "string"
  queryKeys:
    name: "keys"
    in: "query"
    description: "Specify multiple rows to fetch ?keys=123,456"
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
  queryFilter:
    name: "filter"
    in: "query"
    description: "Filter criteria to apply to the search. The format used is filter=condition|condition.\
      \ The format of the condition is {key}\\*{operator}\\*{value) e.g. filter=name\\\
      *startsWith\\*A. The \\* is used to delimit the components of the criteria.\
      \ As an example, to find rows with name that starts with 'A', specify as filter=name\\\
      *startsWith\\*A .  When there are multiple criterias in the condition, e.g.\
      \ find rows where name startsWith A and age greater than 30, specify as filter=name\\\
      *startsWith\\*A;age\\*GT\\*30 . The ; character is used to separate the criterias.\
      \ For more complex filters, e.g. Find rows where name starts with 'A' OR name\
      \ starts with B, then it can be specified as filter=name\\*startsWith\\*A|name\\\
      *startsWith\\*B . Use the | to separate OR conditions."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "pipes"
  language:
    name: "lang"
    in: "header"
    description: "Language to be used in case the response has text data (e.g. error\
      \ messages)"
    required: false
    type: "string"
  productId:
    name: "productId"
    in: "path"
    description: "Unique id for the product"
    required: true
    type: "integer"
  packageId:
    name: "packageId"
    in: "path"
    description: "Unique id for the package"
    required: true
    type: "integer"
responses:
  Standard400Response:
    description: "Response to indicate that the request cannot be processed due to\
      \ a client error (submitted data has errors)."
    schema:
      $ref: "#/definitions/inline_response_400"
  Standard401Response:
    description: "Response when the client is not authorized for this operation."
    schema:
      $ref: "#/definitions/inline_response_401"
  Standard404Response:
    description: "Response when the document is not found."
    schema:
      $ref: "#/definitions/inline_response_404"
  Standard500Response:
    description: "Response when there is an unexpected server error."
    schema:
      $ref: "#/definitions/inline_response_500"
  Validator400Response:
    description: "Response when validation fails"
    schema:
      $ref: "#/definitions/inline_response_400_1"
