swagger: '2.0'
info:
  title: eBao Cloud API (Quotation)
  description: Sales API for the quotation domain on eBao Cloud
  version: "0.0.5"
# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json

# ---- Security Definitions -----------
securityDefinitions:
  APISecurity:
    type: apiKey
    in: header
    name: Token

paths:

  '/quotes':
    get:
      summary: Fetch a list of quotes (basic information)
      description: |
        This endpoint returns a list of quotes with basic information only.There are a number of parameters to help with filtering and sorting of the required documents.
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Quote
      responses:
        200:
          description: Successful response to the request to fetch a list of quotes
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/QuoteSummary'
              totalDocs:
                type: integer
              offset:
                type: integer
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

    post:
      summary: Create a new quote.
      description: This endpoint is used to create a new quote. Supply the quote details via the request body.
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - name: quote
          in: body
          description: The details for the quote to create
          schema:
            $ref : '#/definitions/Quote'
      tags:
        - Quote
      responses:
        200:
          description: Response when the quote is successfully created.
          schema:
            $ref: '#/definitions/Quote'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/detailed':
    get:
      summary: Fetch a list of detailed quotes (complete information) using the supplied parameters.
      description: |
        This endpoint returns a list of detailed quotes.There are a number of parameters to help with filtering and sorting of the required quotes. This end point is differs from the GET /quotes as returns a list of quotes with detailed information instead of summary information. A possible use cases is when multiple rows are selected, we need to get full details of the selected rows for further processing. Note that when the keys are provided, the other parameters may be in conflict e.g. keys has 10 items whereas the limit states 5 rows. In such cases, 10 items will be returned.
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Quote
      responses:
        200:
          description: Successful response to a request for fetching a list of detailed quotes.
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/Quote'
              totalDocs:
                type: integer
              offset:
                type: integer
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/{quoteId}':
    get:
      summary: Fetch a quote document.
      description: This endpoint is for fetching the detailed quote document with the quote id.  The result can be used to display, edit or for removal of the quote.
      tags:
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
      responses:
        200:
          description: Successful response to fetch a quote. The quote document is returned
          schema:
            $ref: '#/definitions/Quote'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

    put:
      summary: Save a quote document.
      description: A PUT to this end point is used to save the quote document. When it is an existing quote, the version must be included in the quote details (in the request body).  The version is used to ensure that there are no changes to the quote since it was fetched.

      tags:
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
        - $ref: '#/parameters/quoteParam'

      responses:
        200:
          description: Successful response where the new (updated) quote is returned.
          schema:
            $ref: '#/definitions/Quote'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        409:
          $ref: '#/responses/ConflictResponse'
        500:
          $ref: '#/responses/Standard500Response'

    delete:
      summary: Delete a quote
      description: This end point allows for the deletion of a quote. Deletion may be disallowed when the quote is in certain statuses (e.g. SIGNED, COMPLETED). The version number is required to ensure that the quote has not been altered since it was fetched. Example request may look like DELETE /quotes/1233?version=20
      tags:
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
        - name: version
          in: query
          required: true
          description: The version number of the quote.
          type: string
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        409:
          $ref: '#/responses/ConflictResponse'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/products':
    post:
      summary: Fetch a list of main products for the draft quote
      description: Use this endpoint to get a list of available main products given the proposed insurance details in the draft quote.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/proposedInsuranceParam'

      responses:
        200:
          description: Successful response to fetch a list of products
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/Product'
              totalDocs:
                type: integer
              offset:
                type: integer
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/products/{productId}':
    get:
      summary: Fetch a product document (full information)
      description: This endpoint is for fetching the detailed product document for one of the products in the draft quote.
      tags:
        - Quote
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response to fetch a product document
          schema:
            $ref: '#/definitions/Product'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/products/{productId}/riders':
    post:
      summary: Fetch the attachable riders for the given product and the draft quote details.
      description: The attachable riders depends on the current main product and also the riders that are already attached. Additionally, the age of the insureds will also be considered to determine if the rider is attachable. The proposed insurance details is to be included in the body of the request. The result (list of riders) is typically used to present a drop down list in the client application.
      tags:
        - Quote
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/productId'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
        200:
          description: Successful response that returns the list of riders together with their product parameters.
          schema:
            $ref: '#/definitions/ProductAttachableRidersResult'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/calculators/premium':
    post:
      summary: Generate the results of the premium calculator for the submitted draft quote.
      description: Typically, the premiums of the main product and riders needs to be displayed on the client application. Use this end point to trigger the calculation of the premium for all the products in the draft quote. The draft quote should include details about the insured list, the main product and the attached riders.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
          200:
            description: Successful response. Contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
            schema:
              $ref: '#/definitions/ProposedInsurance'
          400:
            $ref: '#/responses/Standard400Response'
          500:
            $ref: '#/responses/Standard500Response'

  '/quotes/draft/calculators/costOfInsurance':
    post:
      summary: Generate the results of the monthly cost of insurance calculator for the draft quote.
      description: Typically, the cost of insurance for the investment products (main and riders) are displayed on the client application. Use this end point to trigger the calculation of the monthly cost of insurance for all the products in the draft quote. The draft quote should include details about the insured list, the main product and the attached riders.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
          200:
            description: Successful response. Contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
            schema:
              $ref: '#/definitions/ProposedInsurance'
          400:
            $ref: '#/responses/Standard400Response'
          500:
            $ref: '#/responses/Standard500Response'


  '/quotes/draft/calculators/illustration':
    post:
      summary: Generate the results of the illustration calculator for the submitted draft quote.
      description: Triggers the illustration calculator to compute the result of all the illustration (calculation) fields for the submitted draft quote. The illustration fields are configured when setting up the product in the eBaoTech product factory.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'
      responses:
        200:
          description: Successful response where the illustration fields are calculated. The value of the illustration fields can be found in the Product object under illustrationFields. The results can be used to preview the table of benefits.
          schema:
            type: object
            properties:
              proposedInsurance:
                $ref: '#/definitions/ProposedInsurance'
              tableOfBenefits:
                $ref: '#/definitions/TableOfBenefits'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/calculators/adhoc':
    post:
      summary: Trigger the adhoc calculator for the given draft quote and the list of calculations.
      description: This end point can be used when the client application needs fine grain control over which of the illustration fields needs to be calculated (instead of all the illustration fields). For example, on a particular client application page, it may want to calculate the cost of insurance, once the user leaves the sum assured field.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - name: bodyParam
          in: body
          required: true
          description: The quote details, i.e. insureds, main, riders, funds, topups and withdrawals. The adhoc calculation fields that require computation are in calculatorFields.
          schema:
            $ref : '#/definitions/CalculatorParameter'
      responses:
        200:
          description: Successful response where the illustration fields are calculated
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/validateMain':
    post:
      summary: Generate the results of the validate-main validator for the draft quote.
      description: Use this end point to validate the main product for the quote details supplied in the request body. Typically, the client application will capture the main product details in its own page (section). This end point can be called to validate the input of the main product when the client application navigates away from the page (section).
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/validateRiders':
    post:
      summary: Generate the results of the validate-riders validator for the supplied draft quote.
      description: Use this end point to validate all the riders details. The validator will include checks on the minimum and maximum coverage amounts, the age limits of the insured, etc. Typically used when navigating away from the page (section) which captures the riders data.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/validateTopups':
    post:
      summary: Generate the results of the validate-topups validator for the supplied draft quote.
      description: Validate all the topups for the draft quote. Details of the draft quote are submitted via the request body. Input of topups data are only required in the case of investment type policies.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'
      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/validateWithdrawals':
    post:
      summary: Generate the results of the validate-withdrawals validator for the supplied draft quote.
      description: Validate all the withdrawals for the draft quote. Details of the draft quote are submitted via the request body. Input of withdrawals details are only required for investment type policies.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/validateFunds':
    post:
      summary: Generate the results of the validate-funds validator for the supplied draft quote.
      description: Validate all the fund allocations for the draft quote. Details of the draft quote are submitted via the request body. Fund allocations are only required for investment policies. The sum of all of the fund allocation percentages must add up to 100%.
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/proposedInsuranceParam'

      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/validators/adhoc':
    post:
      summary: Generate the results for the adhoc validator for the given draft quote and validator list (included in the request).
      description:  This end point allows for the triggering of specific validators for fine grained control over what needs to be validated. The list of validators will be in the request details in the request body. An an example, this endpoint can be used to validate the entire quote when validatorList = [validateMain, validateRiders, validateTopups, validateWithdrawals, validateFunds]
      tags:
        - Product
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - name: bodyParam
          in: body
          required: true
          description: Parameters for the validation. It consists of the quote and the list of validators. Minimially the quote details needs to  include the insureds and the main product (used for validating the main product). The amount of quote data to be supplied depends of the validators to trigger. For example, if the validateFunds validator is to be triggered, the the fund allocation data must be included in the draft quote.
          schema:
            $ref: '#/definitions/ValidatorParameter'
      responses:
        200:
          $ref: '#/responses/Validator200Response'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/draft/illustration':
    post:
      summary: Generate the illustration for the draft quote.
      description: Use this end point to generate the illustration based on the quote details provided in the request body. By including the draft quote in the request body (instead of just providing the quote id), this end point allows for use cases where the quote has not been persisted. The illustration contains data for the presentation to the end user (via a screen, html page or pdf).
      tags:
        - Illustration
        - Quote
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteParam'
      responses:
        200:
          description: Successful response where the new quote and illustration data is returned
          schema:
            $ref: '#/definitions/QuoteIllustration'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/{quoteId}/illustration':
    get:
      summary: Fetch the quote and illustration for the specified quote id
      description: |
        This endpoint is used to fetch the illustration data that will be used to present the illustration. Note that the required key is the quoteId. In our model the quote includes the illustration object. This endpoint differs from the /quote/{quoteId} end point in that the illustration information is fetched in addition to the quote details.
      tags:
        - Quote
        - Illustration
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
      responses:
        200:
          description: Successful response where the illustration details are returned.
          schema:
            $ref: '#/definitions/QuoteIllustration'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/{quoteId}/illustration/shares':
    get:
      summary: Fetch all the shares for the illustration belong the the quote
      description: |
        This endpoint fetch the shares for the illustration. The shares contain information about which channel the illustration was shared (e.g. WeChat) and the time of the share.
      tags:
        - Quote
        - Illustration
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
      responses:
        200:
          description: Successful response where the list of shares is returned
          schema:
            type: array
            items:
              $ref: '#/definitions/Share'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'
    post:
      summary: Create a new share document for this illustration
      description: Use this end point to create a new share document which will serve as a record of the user sharing the illustration with the customer.
      tags:
        - Quote
        - Illustration
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
        - name: bodyParam
          in: body
          required: true
          description: Share details
          schema:
            $ref: '#/definitions/Share'

      responses:
        200:
          description: Successful response the share record is saved
          schema:
            $ref: '#/definitions/Share'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/{quoteId}/illustration/shares/{shareId}':
    delete:
      summary: Delete a share record
      description: This end point is used to delete the share. The version of the quote is required to ensure there are no changes since the quote document was fetched. e.g. DELETE /quotes/1234/illustration/shares/1?version=12
      tags:
        - Quote
        - Illustration

      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/quoteId'
        - name: shareId
          in: path
          required: true
          type: string
          description: Unique id for the share within the quote
        - name: version
          in: query
          required: true
          description: The version of the record
          type: number
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        409:
          $ref: '#/responses/ConflictResponse'
        500:
          $ref: '#/responses/Standard500Response'

  '/quotes/templates':
    get:
      summary: Fetch the illustration template for a product
      description: |
        This end point should be used at design time to provide a sample of how the illustration plan should look like.
      tags:
        - Quote
        - Illustration
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - name: productId
          in: query
          required: true
          type: string
          description: Unique id of product
      responses:
        200:
          description: Successful response where the payload is a html string containing the template for the illustration.
          schema:
            type: object
            properties:
              version:
                type: string
              startDate:
                type: string
                format: date
              endDate:
                type: string
                format: date
              template:
                type: string
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'
# ******************************  definitions  ***************************
definitions:

  ProductSummary:
    type: object
    properties:
      pk:
        type: string
        description: Unique id for the productId
      doctype:
        type: string
        default: "Product"
      productCode:
        type: string
        description: Code for the product  i.e. internal_id
      productName:
        type: string
      insType:
        type: string
        description: Type of product 1=Main, 2=Rider
      unitFlag:
        type: string
        description: Premium formula calculation type
      sumAssuredLimitList:
        type: array
        items:
          type: object
          properties:
            currencyId:
              type: string
            minAge:
              type: number
            maxAge:
              type: number
            minAmount:
              type: number
            maxAmount:
              type: number
      ageLimitList:
        type: array
        items:
          type: object
          properties:
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            coverageTermType:
              type: string
            coverageTermValue:
              type: number
            paymentTermType:
              type: string
            paymentTermValue:
              type: number
            gender:
              type: string
            benefitLevel:
              type: string
            minInsuredAge:
              type: number
            maxInsuredAge:
              type: number
            minPolicyholderAge:
              type: number
            maxPolicyHolderAge:
              type: number
      premiumLimitList:
        type: array
        items:
          type: object
          properties:
            minAge:
              type: number
            maxAge:
              type: number
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            minInitialPremium:
              type: number
            maxInitialPremium:
              type: number
      benefitLevelList:
        type: array
        items:
          type: object
          properties:
            benefitLevel:
              type: string
            levelDesc:
              type: string
      liabilityList:
        type: array
        items:
          type: object
          properties:
            liabId:
              type: string
            liabType:
              type: string
            liabName:
              type: string
            liabDesc:
              type: string
            displayOrder:
              type: number
            ifDisplayInIllustration:
              type: string
      ageRange:
        type: object
        properties:
          minAge:
            type: number
          minAgeUnit:
            type: string
          maxAge:
            type: number
          maxAgeUnit:
            type: string
      pointToPh:
        type: string
        description: Flag to indicate if product applies to policholder
      pointToSecInsured:
        type: string
        description: Flag to indicate if product applies to second insured
      smokingIndi:
        type: string
        description: Flag to indicate if smoking status is a risk attribute
      jobIndi:
        type: string
        description: Flag to indicate if occupation is a risk attribute
      socialInsureIndi:
        type: string
      isWaiver:
        type: string
        description: Flag to indicate if this is a waiver product
      isAnnuityProduct:
        type: string
        description: Flag to indicate if this is an annuity product
      isPackageProduct:
        type: string
        description: Flag to indicate if this is a package product
      saEqual:
        type: string
        description: Rider SA to be equal to main SA
      attachCompulsory:
        type: string
      displayPremiumIndi:
        type: string
        description: value should be "Y" or "N"
      displayMonthlyCoi:
        type: string
        description: value should be "Y" or "N"
      pointToSpouse:
        type: string
        description: Flag to indicate if product applies to spouse
      inputFields:
        type: array
        items:
          $ref: '#/definitions/ProductInputFields'


  ProductCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  ProductPremiumPaymentPeriod:
    type: object
    properties:
      premiumPaymentType:
        type: string
        description: Premium payment type can be duration (e.g. 10 years) or the end age (e.g. until age 65)
      premiumPaymentValue:
        type: number
        description: Depending on the premiumPaymentType, the meaning of this field is either the number of years to pay OR to pay premium until age.

  ProductCurrency:
    type: object
    properties:
      currencyId:
        type: string
      currencyName:
        type: string

  ProductFund:
    type: object
    properties:
      fundCode:
        type: string
      fundName:
        type: string

  ProductPaymentMode:
    type: object
    properties:
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      paymentModeDesc:
        type: string

  ProductPaymentMethod:
    type: object
    properties:
      paymentMode:
        type: string
      paymentMethod:
        type: string
      paymentMethodDesc:
        type: string

  ProductInputFields:
    type: object
    properties:
      fieldName:
        type: string
      dataType:
        type: string
        description: The data type of the input field i.e. String, Date or Number or Enum (for cases where the drop down list obtained from the response from the end point /products/{productId} e.g. coveragePeriods, currency)

  Product:
    allOf:
      - $ref: '#/definitions/ProductSummary'
      - properties:
          coveragePeriods:
            type: array
            items:
              $ref: '#/definitions/ProductCoveragePeriod'
          premiumPaymentPeriods:
            type: array
            items:
              $ref: '#/definitions/ProductPremiumPaymentPeriod'
          currencies:
            type: array
            items:
              $ref: '#/definitions/ProductCurrency'
          funds:
            type: array
            items:
              $ref: '#/definitions/ProductFund'
          paymentModes:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMode'
          paymentMethods:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMethod'

  # define objects for use in ProductInput object

  Insured:
    type: object
    properties:
      insuredId:
        type: number
      name:
        type: string
        description: Name of the insured
      age:
        type: number
        description: Age of the insured. Required if birthdate is not provided
      birthDate:
        type: string
        format: date
        description: Required if age is not provided
      jobCateId:
        type: number
        description: Risk class - one of the common risk attributes
      occupation:
        type: string
        description: Typically provided to determine the risk class of this person.
      socialInsuranceIndi:
        type: string
      smoking:
        type: string
        description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

  Fund:
    type: object
    properties:
      fundCode:
        type: string
        description: The code for the fund
      fundName:
        type: string
        description: Name of the fund for investment policies
      targetPremiumPercent:
        type: number
        description: The percentage allocation for target (basic) premium
      adhocPercent:
        type: number
        description: The percentage allocation for ad-hoc topups
      regularTopupPercent:
        type: number
        format: percentage
        description: The percentage allocation for regular topups

  Topup:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  Withdrawal:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  # Values for the product risk attributes that are required
  ProductInput:
    type: object
    properties:
      productId:
        type: string
      productCode:
        type: string
      productName:
        type: string
      lifeAssuredNumber:
        type: integer
        description: index into the insured list i.e. identify person playing role of insured for this product
      sumAssured:
        type: number
      coverageTermType:
        type: string
      coverageTermValue:
        type: number
      premiumPaymentTermType:
        type: string
      premiumPaymentTermValue:
        type: number
      targetPremium:
        type: number
      regularTopup:
        type: number
      commencementDate:
        type: string
        format: date
      packageId:
        type: string
      currency:
        type: string
      benefitLevel:
        type: string
      benefitPlan:
        type: string
      coverageEndAge:
        type: number
      premiumTermEndAge:
        type: number
      saUnit:
        type: number
      firstYearPremium:
        type: number
        description: Annual premium for first year
      monthlyCostOfInsurance:
        type: number
      premiumAmount:
        type: number
        description: Premium amount taking into account the payment frequency (mode)
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      illustrationFields:
        $ref: '#/definitions/IllustrationMap'
      extensionFields:
        type: object
        description: extensionFields is an object to hold local customized fields
        additionalProperties:
          type: string

  ProposedInsurance:
    properties:
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      startDate:
        type: string
        format: date
      status:
        type: string
        description: valid values are "NEW","PENDING","SIGNED","GENERATED","COMPLETED"
      lastModified:
        type: string
        format: date
      version:
        type: number
        description: The revision number used for optimistic locking
      userName:
        type: string
        description: The user that created this quotation
      mainProduct:
        $ref: '#/definitions/ProductInput'
      riderList:
        type: array
        items:
          $ref: '#/definitions/ProductInput'
      fundList:
        type: array
        items:
          $ref: '#/definitions/Fund'
      topupList:
        type: array
        items:
          $ref: '#/definitions/Topup'
      withdrawalList:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'

  IllustrationField:
    additionalProperties:
      type: number

  IllustrationMap:
    type: object
    readOnly: true
    description: |
      These are a list of dynamic fields that are calculated by the product factory. The result is a nested object. The first level keys represent the year. Against each year is an object will all the illustrations fields and their value e.g. { 1 : {annualPremium: 12000, ....}, 2 : {annualPremium:12000,....}, ..., 99: {} }. Year 0 means it is not a multivalued field, i.e. a single valued field (only 1 value).
    properties:
      0:
        $ref : '#/definitions/IllustrationField'
      1:
        $ref : '#/definitions/IllustrationField'
      2:
        $ref : '#/definitions/IllustrationField'
      99:
        $ref : '#/definitions/IllustrationField'

  TableOfBenefits:
    type: object
    properties:
      columnTitles:
        type: array
        items:
          type: object
          properties:
            columnNo:
              type: integer
            columnTitle:
              type: string
      tableData:
        type: array
        items:
          type: object
          properties:
            columnNo:
              type: integer
            value:
              type: number

  PlanHighlight:
    type: object
    properties:
      highLightId:
        type: string
        description: Unique id for the hightlight
      description:
        type: string
        description: Description of the package hightligh
      displayOrder:
        type: number
        description: Ordering information

  PlanFeature:
    type: object
    properties:
      featureId:
        type: string
        description: Unique id for the feature
      featurePic:
        type: string
        description: Reference to the image to highlight the feature
      displayOrder:
        type: number
        description: Ordering information when displaying the feature

  PlanValueAdd:
    type: object
    properties:
      valueAddedId:
        type: string
      valueAddedName:
        type: string
      valueAddedDesc:
        type: string
      valueAddedCode:
        type: string
      valueAddedPic:
        type: string
      displayOrder:
        type: number

  PlanInfo:
    type: object
    properties:
      planLiability:
        type: object
        properties:
          multiProduct:
            type: boolean
          liabCategoryList:
            type: array
            items:
              type: object
              properties:
                categoryId:
                  type: string
                categoryName:
                  type: string
                simpleLiabList:
                  type: array
                  items:
                    type: object
                    properties:
                      packageId:
                        type: string
                      productid:
                        type: string
                      liabId:
                        type: string
                      liabName:
                        type: string
                      liabDisplayName:
                        type: string
                      libDescQuote:
                        type: string
                      libCalcType:
                        type: string
                      libCalcMethod:
                        type: string
                      liabAmount:
                        type: number
                      needDiseaseIndi:
                        type: string
                      totalAmount:
                        type: number
                      libDesc:
                        type: string
                      liabList:
                        type: string
                      categoryName:
                        type: string
      planHighlights:
        type: array
        items:
          $ref: '#/definitions/PlanHighlight'
      planFeatures:
        type: array
        items:
          $ref: '#/definitions/PlanFeature'
      planValueAddedList:
        type: array
        items:
          $ref: '#/definitions/PlanValueAdd'

  QuoteSummary:
    type: object
    properties:
      pk:
        type: string
        readOnly: true
      doctype:
        type: string
        default: "Quote"
        readOnly: true
      status:
        type: string
      lastModified:
        type: string
        format: date
        readOnly: true
      version:
        type: number
        description: The revision number used for optimistic locking
        readOnly: true
      userName:
        type: string
        description: The user that created this quotation
      planName:
        type: string
        description: Usually similar to the product name
      prospectId:
        type: string
        description: Unique id of the prospect
      proposerName:
        type: string
      proposerBirthDate:
        type: string
        format: date
      proposerGender:
        type: string
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: object
          additionalProperties:
            type: string

  Quote:
    allOf:
      - $ref: '#/definitions/QuoteSummary'
      - $ref: '#/definitions/ProposedInsurance'

  QuoteIllustration:
    allOf:
      - $ref: '#/definitions/QuoteSummary'
      - $ref: '#/definitions/ProposedInsurance'
      - properties:
          tableOfBenefits:
            $ref: '#/definitions/TableOfBenefits'
          planInfo:
            $ref: '#/definitions/PlanInfo'

  Share:
    type: object
    properties:
      shareId:
        type: string
      shareType:
        type: string
        description: Channel that illustration was shared e.g WeChat WhatsApp
      timeStamp:
        type: string
        format: datetime

  # structure used in parameters

  ValidatorParameter:
    allOf:
      - $ref: '#/definitions/ProposedInsurance'
      - properties:
          valdatorList:
            type: array
            description: List of names of validators i.e. ["validateMain", "validateRiders",....]
            items:
              type: string

  CalculatorParameter:
    allOf:
      - $ref: '#/definitions/ProposedInsurance'
      - properties:
          showValueAdded:
            type: string
          valueAddedList:
            type: array
            items:
              type: string
          insuranceSpirit:
            type: number
          showAdvice:
            type: string
          advice:
            type: string
          calculatorFields:
            description: A list of illustration field names that needs to be calculated
            type: array
            items:
              type: string

  ProductAttachableRidersResult:
    type: object
    properties:
      riderList:
        type: array
        items:
          $ref: '#/definitions/ProductSummary'

  ValidatorSuccessResult:
    type: object
    properties:
      message:
        description: Simple message to indicate no validation errors e.g. ok
        type: string
        default: "ok"

  ValidatorErrorResult:
    type: object
    properties:
      errorList:
        type: array
        items:
          type: object
          properties:
            validator:
              description: Name of the validators that emitted the error
              type: string
            errors:
              description: The errors emitted by the validator. Designed to allow for multiple error messages per validator
              type: array
              items:
                type: string


# ********************* parameters *************************
parameters:

  queryOffset:
    name: offset
    in: query
    description: Number of records to skip in the result list
    required: false
    type: number
    format: integer
    default: 0

  queryLimit:
    name: limit
    in: query
    description: Limit the number of rows to return
    required: false
    type: number
    format: integer
    default: 100

  querySort:
    name: sort
    in: query
    description: Sorting order. Prefix with '-' for descending order
    required: false
    type: string
    format: string

  queryKeys:
    name: keys
    in: query
    description: Specify multiple rows to fetch ?keys=123,456
    required: false
    type: array
    collectionFormat: csv
    items:
      type: string

  queryFilter:
    name: filter
    in: query
    description: Filter criteria to apply to the search. The format used is filter=condition|condition. The format of the condition is {key}\*{operator}\*{value) e.g. filter=name\*startsWith\*A. The \* is used to delimit the components of the criteria. As an example, to find rows with name that starts with 'A', specify as filter=name\*startsWith\*A .  When there are multiple criterias in the condition, e.g. find rows where name startsWith A and age greater than 30, specify as filter=name\*startsWith\*A;age\*GT\*30 . The ; character is used to separate the criterias. For more complex filters, e.g. Find rows where name starts with 'A' OR name starts with B, then it can be specified as filter=name\*startsWith\*A|name\*startsWith\*B . Use the | to separate OR conditions.

    required: false
    type: array
    collectionFormat: pipes
    items:
      type: string


  language:
    name: lang
    in: header
    description: Language to be used in case the response has text data (e.g. error messages)
    type: string
    required: false

  productId:
    name: productId
    in: path
    type: string
    required: true
    description: Unique id for the product

  quoteId:
    name: quoteId
    in: path
    required: true
    description: Unique id for the quote
    type: string

  quoteParam:
    name: bodyParam
    in: body
    required: true
    description: Quote object
    schema:
      $ref: '#/definitions/Quote'

  proposedInsuranceParam:
    name: bodyParam
    in: body
    required: true
    description: Proposed Insurance Details
    schema:
      $ref: '#/definitions/ProposedInsurance'

# ************************ responses ****************************

responses:

  Standard400Response:
    description: Response to indicate that the request cannot be processed due to a client error (submitted data has errors).
    schema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

  Standard401Response:
    description: Response when the client is not authorized for this operation.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "Authentication credentials were missing or incorrect"

  Standard404Response:
    description: Response when the document is not found.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "The item does not exist"

  Standard500Response:
    description: Response when there is an unexpected server error.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "An unexpected error has occurred. Please try again later"

  SuccessResponse:
    description: Response for request successfully processed
    schema:
      type: object
      properties:
        message:
          type: string
          description: "The request was successfully processed"

  ConflictResponse:
    description: Response when there is a conflict, i.e. the document has been changed since it was last fetched. The current document version does not match the version supplied.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "The document has changed since it was last fetched. Please fetch the document again to get the latest version of the document"


  Validator200Response:
    description: Response when the validation has no errors
    schema:
      $ref: '#/definitions/ValidatorSuccessResult'

  Validator400Response:
    description: The response when there are validation errors. errorList will hold a list of the errors.
    schema:
      $ref: '#/definitions/ValidatorErrorResult'
