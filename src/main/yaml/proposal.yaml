---
swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################
info:
  title: eBao Cloud API (Product, Prospect, Quote, Proposal)
  description: |
      The eBao LI Sales and Product Engine API is designed to allow third party
      user / application access one of the most important funtion of eBaoCLoud.
      The APIs provide product access, calculation and validation features and
      sales / new business origination.

  version: 0.0.3

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: localhost:8080
schemes:
  - https
  - http
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                  Tags                                        #
################################################################################



################################################################################
#                                  Security                                    #
################################################################################


################################################################################
#                                  Parameters                                  #
################################################################################


################################################################################
#                                  Paths                                       #
################################################################################
paths:

################################################################################
#                             Paths-proposal                                   #
################################################################################

  '/prospects':
    get:
      summary: Fetch a list of prospects records (basic information)
      description: |
        The prospects endpoint returns a list of prospects (with basic information) for the current user based on the session. There are a number of parameters to help with filtering and sorting of the required prospects.
      parameters:
        - $ref: '#/parameters/queryOffset'
        - $ref: '#/parameters/queryLimit'
        - $ref: '#/parameters/queryKeys'
        - $ref: '#/parameters/querySort'
        - $ref: '#/parameters/queryFilter'
      tags:
        - Prospect
      responses:
        200:
          description: Returns a list of summary prospect records
          schema:
            type: array
            items:
              $ref: '#/definitions/ProspectBasic'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Create a new prospect record
      description: |
        A POST request to this end point is used to create a new prospect record. The details of the prospect is submitted in the request body.
      tags:
        - Prospect
      responses:
        200:
          description: The prospect is successfully created. Returns the newly created prospect record (value = Prospect)
          schema:
            $ref: '#/definitions/ProspectResponse'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/prospects/detailed':
    post:
      summary: Fetch a list of detailed prospects records (complete information)
      description: |
        The prospects endpoint returns a list of prospects (with complete information) for the current user based on the session. There are a number of parameters to help with filtering and sorting of the required prospects. Compared to the GET /prospects this allows for fetching a list of prospects based on a list of keys that will be provided in the request body. When the list of keys is provided in the request, the other parameters may no longer apply (if there is a conflict in the request e.g. limit is set to 5 , but list of PK has 10 items)
      parameters:
        - $ref: '#/parameters/queryOffset'
        - $ref: '#/parameters/queryLimit'
        - $ref: '#/parameters/querySort'
        - $ref: '#/parameters/queryPk'
        - $ref: '#/parameters/queryFilter'
      tags:
        - Prospect
      responses:
        200:
          description: Returns a list of detailed prospect records
          schema:
            type: array
            items:
              $ref: '#/definitions/Prospect'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/prospects/{prospectId}':
    get:
      summary: Fetch a prospect record
      description: Fetch the prospect record for the given prospect id
      tags:
        - Prospect
      parameters:
        - name: prospectId
          in: path
          required: true
          description: The id of the prospect to fetch
          type: string
      responses:
        200:
          description: Request is succesfully processed. ok will be true and value is a Prospect record
          schema:
            $ref: "#/definitions/ProspectResponse"
        404:
          description: Response for where the prospect is not found, ok will be false and error object is returned with message of Prospect Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    delete:
      summary: Delete a prospect record
      description: Delete the prospect with the given prospect id. The version id of the prospect record is required to ensure there are no changes since the prospect record was fetched.
      tags:
        - Prospect
      parameters:
        - name: prospectId
          in: path
          required: true
          description: the id of the prospect to fetch
          type: string
        - name: version
          in: query
          required: true
          description: the version id of the record
          type: number
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        404:
          description: Response for where the prospect is not found, ok will be false and error object is returned with message of Prospect Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    put:
      summary: Save a prospect record
      description: When updating an existing prospect record, the version attributes must be part of the Prospect record in the request body. This is to ensure that there were no changes to the Prospect record since it was fetched.
      tags:
        - Prospect
      parameters:
        - name: prospectId
          in: path
          required: true
          description: The id of the prospect to fetch.
          type: string
        - name: prospect
          in: body
          description: Representing the prospect record to save
          schema:
            $ref: '#/definitions/Prospect'

      responses:
        200:
          description: Request is succesfully processed. ok will be true and value is a Prospect record
          schema:
            $ref: "#/definitions/ProspectResponse"
        404:
          description: Response for where the prospect is not found, ok will be false and error object is returned with message of Prospect Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/prospects/_bulk':
    post:
      summary: Bulk creation of prospects
      description: Allow for creation of multiple prospect records in one request
      tags:
        - Prospect

      parameters:
        - name: prospects
          in: body
          description: Representing the prospect record to save
          schema:
            type: array
            items:
              $ref: '#/definitions/Bulk'

      responses:
        200:
          description: Request is successfully processed. ok will be true, value will be a list containing the updated Prospect records. All response records will have the prospectId set if the creation was successful.
          schema:
            $ref: "#/definitions/ProspectsResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/prospects/age':
    get:
      summary: Calculate the age given the age method and birth date
      description: Calculate the age given the age method & birth date. Valid values for the age method are ANB = Age Next Birthday, ALB = Age Last Birthday, ANRB = Age Nearest Birthday
      tags:
        - Prospect

      parameters:
        - name: ageMethod
          in: query
          required: true
          type: string
          enum: ["ANB","ALB","ANRB"]
        - name: birthDate
          in: query
          type: string
          format: date
          description: Date format should be YYYY-MM-DD
          required: true

      responses:
        200:
          description: Successful response where the age is returned
          schema:
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: number
        400:
          $ref : '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/companies':
    get:
      summary: Fetch a list of companies
      description: |
        This endpoint returns a list of companies.There are a number of parameters to help with filtering and sorting of the required companies.
      parameters:
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Company
      responses:
        200:
          description: Response.ok should be true and value will be a list companies
          schema:
            $ref: "#/definitions/CompaniesResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/companies/{companyId}':
    get:
      summary: Fetch a company document
      description: This end point is used to get the company with the requested companyId
      parameters:
        - name: companyId
          in: path
          required: true
          description: Unique id of the company
          type: string
      tags:
        - Company
      responses:
        200:
          description: result.ok should be true and value should be an object or list depending on the request
          schema:
            $ref: "#/definitions/CompanyResponse"
        404:
          description: Response for where the company is not found, response.ok will be false and error object will have the error details
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

################################################################################
#                             Paths-product                                    #
################################################################################
  '/packages':
    get:
      summary: Fetch a list of packages (basic information).
      description: This endpoint returns a list of packages with basic information about the package. There are a number of parameters to help with filtering and sorting of the required documents.
      parameters:
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Package
      responses:
        200:
          description: Successful response to fetching a list of packages. ok will be true and value will hold the result i.e. a list of packages based on the filter and sort criteria (if any).
          schema:
            $ref: '#/definitions/PackageSummaryListResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/packages/detailed':
      post:
        summary: Fetch a list of detailed packages (full information).
        description: This endpoint returns a list of packages with complete information about the package. There are a number of parameters to help with filtering and sorting of the required prospects. A list of primary keys (pkList) can also be provided to fetch a specific list of packages. If the list of primary keys causes a conflict with the other parameters, it will prevail, e.g. list of primary keys has 10 items, but the limit is set as 5, then 10 packages will be returned. This endpoint differs from GET /packages in that it returns packages with full information instead of just basic information. A use case is when multiple packages are selected for further processing.
        parameters:
          - $ref : '#/parameters/queryOffset'
          - $ref : '#/parameters/queryLimit'
          - $ref : '#/parameters/queryPk'
          - $ref : '#/parameters/querySort'
          - $ref : '#/parameters/queryFilter'
        tags:
          - Package
        responses:
          200:
            description: Successful response to fetching a list of packages (complete information). ok will be true and value will hold the result i.e. a list of packages.
            schema:
              $ref: '#/definitions/PackageListResponse'
          500:
            $ref: '#/responses/Standard500ErrorResponse'

  '/packages/{packageId}':
    get:
      summary: Fetch a package document (complete information)
      description: Use this end point to fetch a package document for the given package id
      tags:
        - Package
      parameters:
        - name: packageId
          in: path
          required: true
          description: Unique id for the package
          type: string
      responses:
        200:
          description: Successful response to fetch a package.
          schema:
            $ref: '#/definitions/PackageResponse'
        404:
          description: response to a request to fetch a package but the package cannot be located (i.e. package is not found)
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/packages/{packageId}/products/{productId}':
    get:
      summary: Fetch a package product document
      description: Fetch a product document for the given package and product id.
      tags:
        - Package
        - Product
      parameters:
        - name: packageId
          in: path
          required: true
          description: The id of the package
          type: string
        - name: productId
          in: path
          required: true
          description: The id of the package to fetch
          type: string

      responses:
        200:
          description: Successful response where the package product document is returned.
          schema:
            $ref: '#/definitions/PackageProductResponse'
        404:
          description: Document not found response
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/packages/filters':
    get:
      summary: Predefined search fields and values for packages
      description: To support the search function on mobile environments, it is easier to provide a list of pre-defined search values for the search fields. These can then be selected instead of using the keyboard to enter the search value. The predefined values are for companies, product category, and benefit type fields.
      tags:
        - Package
      responses:
        200:
          description: Successful response where the predefined search values are returned for each search field.
          schema:
            $ref: '#/definitions/SearchFilterResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/packages/{packageId}/quote':
    get:
      summary: Fetch the initial quote data for a given package
      description: After viewing the package information, the user may require a quote based on the package. This endpoint will fetch the initial data for a new quote based on the selected package. Based on the package id, the main product and riders (both packaged) and additional available riders are included in the initial data. Additionally, the product parameters for all the products (main and riders) also be included in the initial data.
      tags:
        - Package
        - Quote
      parameters:
        - name: packageId
          in: path
          required: true
          description: the id of the package
          type: string
      responses:
        200:
          description: Successful response to a request to fetch the initial data for a new quote. The productList is a list with all the products. The first item is always the main product. The product field isPackageProduct can be used to determine whether it is a package product or otherwise.
          schema:
            $ref: '#/definitions/NewQuoteResponse'
        404:
          description: Unsuccessful response, when the package for packageId cannot be found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes':
    get:
      summary: Fetch a list of quotes (basic information)
      description: |
        This endpoint returns a list of quotes with basic information only.There are a number of parameters to help with filtering and sorting of the required prospects.
      parameters:
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Quote

      responses:
        200:
          description: Successful response to a request to fetch a list of quotes
          schema:
            $ref: '#/definitions/QuoteSummaryListResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    post:
      summary: Create a new quote
      description: This endpoint is used to create a new quote. The quote details is to be supplied via the request body
      parameters:
        - name: quote
          in: body
          description: The quote details for the quote to create
          schema:
            $ref : '#/definitions/Quote'
      tags:
        - Quote
      responses:
        200:
          description: Successful creation of a new quote (resource)
          schema:
            $ref: '#/definitions/QuoteDetailedResponse'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/detailed':
    post:
      summary: Fetch a list of detailed quotes (complete information) using the supplied parameters
      description: |
        This endpoint returns a list of detailed quotes.There are a number of parameters to help with filtering and sorting of the required prospects. This end point is slightly different from the GET /quotes as it allows the client to specify a number of keys (pkList) in the body of the request. The main reason for using this endpoint is to get a list of quotes with complete information. A possible use cases is when multiple rows are selected, we need to get full details of the selected rows for further processing. Note that when the pkList is provided, the other parameters may be in conflict e.g. pkList has 10 items whereas the limit states 5 rows. In such cases, 10 items will be returned.
      parameters:
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryPk'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Quote
      responses:
        200:
          description: Successful response to a request to fetch a quote
          schema:
            $ref: '#/definitions/QuoteDetailedListResponse'
        default:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/{quoteId}':
    get:
      summary: Fetch the quote with then given quote id
      description: This endpoint is for fetching a detailed quote document. The result can be used to display, edit or removal of the quote.
      tags:
        - Quote
      parameters:
        - name: quoteId
          in: path
          required: true
          description: The id of the quote to fetch
          type: string
      responses:
        200:
          description: Successful response to a request to fetch a quote
          schema:
            $ref: '#/definitions/QuoteDetailedResponse'
        404:
          description: Response for when the quote is not found
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Save a quote document.
      description: A PUT to this end point is used to save the quote documennt. When it is an existing quote, the version must be included in the quote details (in the request body).  The version is used to ensure that there have not been changes to the quote since it was fetched.
      tags:
        - Quote
      parameters:
        - name: quoteId
          in: path
          required: true
          description: Unique id of the quote
          type: string
        - name: quote
          in: body
          required: true
          description: The quote details
          schema:
            $ref : '#/definitions/Quote'

      responses:
        200:
          description: Successful response where the new (updated) quote is returned.
          schema:
            $ref : '#/definitions/QuoteDetailedResponse'
        404:
          description: Response where the requested quote is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    delete:
      summary: Delete a quote
      description: Allows for the deletion of a quote. Deletion may be disallowed when it is certain statuses (e.g. SIGNED, COMPLETED). The version number of required to ensure that the quote has not been altered since it was fetched. /quotes/1233?version=202
      tags:
        - Quote
      parameters:
        - name: quoteId
          in: path
          required: true
          description: The id of the quote to delete
          type: string
        - name: version
          in: query
          required: true
          description: The version number of the quote
          type: string
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        404:
          description: Quote for the given id is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/products/{productId}/riders':
    post:
      summary: Fetch the attachable riders for the given product and quote details
      description: The attachable riders depends on current main product and also riders that are already attached. Additionally, it can consider the age of the insureds. The quote details are submitted in the body of the request. The result is typically used to present a drop down list of the attachable riders in the client application.
      tags:
        - Package
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: the id of the main product
          type: string
        - name: quote
          in: body
          required: true
          description: Draft quote details, which should include the insureds, main product and selected riders
          schema:
            $ref : '#/definitions/Quote'

      responses:
        200:
          description: Successful response which include the main product and riders together with their respective product parameters.
          schema:
            $ref: '#/definitions/ProductRidersResponse'
        404:
          description: Response for scenario where the productId is not valid, i.e. main product is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/calculators/premium/results':
    post:
      summary: Generate the results of the premium calculator for the submitted draft quote.
      description: Call the product calculator to calculate the premium for all the products in the quote. This endpoint is used as part of the quote process when information about the insureds, main product, and riders have been captured in the client application.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: Quote information required to calculate the premium, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/QuoteParameter'
      responses:
          200:
            description: Successful response. Contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
            schema:
              $ref: '#/definitions/CalculatePremiumResponse'
          400:
            $ref: '#/responses/Standard400Response'
          404:
            description: Response when the product id is incorrect
            schema:
              $ref: '#/definitions/ErrorResponse'
          500:
            $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/calculators/illustration/results':
    post:
      summary: Generate the results of the illustration calculator for the submitted draft quote
      description: Triggers the illustration calculator to compute the result of all the illustrations (derived) fields for the draft quote. The illustrations field are configured when setting up the product in the product factory.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, i.e. insureds, main, riders, funds, topups and withdrawals
          schema:
            $ref : '#/definitions/QuoteParameter'
      responses:
        200:
          description: Successful response where the illustration fields are calculated. The value of the illustration fields can be found in the Product object under illustrationFields
          schema:
            $ref: '#/definitions/CalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response for scenario where the productId is not valid, i.e. main product calculator is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/calculators/adhoc/results':
    post:
      summary: Generate the results by using the custom calculator for the given list of submitted calculations and draft quote.
      description: This end point can be used when the client app needs to trigger the calculation of specific illustration fields (e.g. the Cost of insurance and total investment value) for the submitted draft quote.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, i.e. insureds, main, riders, funds, topups and withdrawals. The adhoc calculation fields that require calculation are in calculatorFields.
          schema:
            $ref : '#/definitions/QuoteCalculateParameter'
      responses:
        200:
          description: Successful response where the illustration fields are calculated
          schema:
            $ref: '#/definitions/CalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response for scenario where the productId is not valid, i.e. main product calculator is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/validateMain/results':
    post:
      summary: Generate the results of the validate-main validator for the draft quote in the request.
      description: Use this end point to validate the main product for the quotation details supplied in the request body. Typically in the client application, the main product details are captured in its own page (section). This end point can be called to validate the input of the main product when the client application navigates away from the page (section).
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, minimally with the insureds and main product details
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList should hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/validateRiders/results':
    post:
      summary: Generate the results of the validate-riders validator for the supplied draft quote in the request body.
      description: Use this end point to validate all the riders details. Checks typically include the minimum and maximum coverage amounts, the age limits of the insured, etc. Typically used when navigating away from the page (section) which captures the rider data.
      tags:
        - Product
        - Quote

      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, minimally with the insureds, main product and riders required for the validation
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList will have a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/validateTopups/results':
    post:
      summary: Generate the results of the validate-topups validator for the supplied draft quote.
      description: Validate all the topups for the draft quote. Details of the draft quote are submitted via the request body. Input of topups are only required in the case of ILP policies.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, minimally with the insureds, main product and topup details.
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList will have the list of errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/validateWithdrawals/results':
    post:
      summary: Generate results of the validate-withdrawals validator for the supplied draft quote.
      description: Validate all the withdrawals for the draft quote. Details of the draft quote are submitted via the request body. Input of withdrawals are only required for investment type policies.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, minimally with the insureds, main product and withdrawal details.
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList will hold the list of errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/validateFunds/results':
    post:
      summary: Generate the results of the validate-funds validator for the supplied draft quote.
      description: Validate all the fund allocations for the draft quote. Details of the draft quote are submitted via the request body. Fund allocations are only required for investment policies.
      tags:
        - Product
        - Quote
      parameters:
        - name: quote
          in: body
          required: true
          description: The quote details, minimally includes the insureds, main product and fund(s) details.
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList will hold the list of errors.

          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/validators/adhoc/results':
    post:
      summary: Generate the results for the adhoc validator for the given draft quote and validator list (included in the request).
      description:  This end point allows for the triggering of specific validators for fine grained control over what needs to be validated. The list of validators will be in the request details as part of the request body. An an example, this endpoint can be used to validate the entire quote when validatorList = [validateMain, validateRiders, validateTopups, validateWithdrawals, validateFunds]
      tags:
        - Product
        - Quote
      parameters:
        - name: param
          in: body
          required: true
          description: Parameters for the validation, consists of the quote and the list of validators. Minimially the quote details needs to  include the insureds and the main product (used for validating the main product). The other quote data depends of the validators to trigger.
          schema:
            $ref: '#/definitions/ValidateParameter'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          description: The response when there are errors from the validation. errorList will hold the list of errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/draft/illustration':
    post:
      summary: Generate the illustration for the draft quote.
      description: Use this end point to generate the illustration based on the quote details provided in the request body. Including the draft quote in the request body (instead of just providing the quote id) is to allow for use cases where the quote has not been persisted.
      tags:
        - Illustration
        - Quote
      parameters:
        - name: quote
          in: body
          description: Quote details used to generate the illustration.
          required: true
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          description: Successful response where all the illustration data is returned.
          schema:
            $ref: '#/definitions/QuoteIllustrationResponse'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/quotes/{quoteId}/illustration':
    get:
      summary: Fetch the illustration (together with quote details) for the specified quote id
      description: |
        This endpoint is used to fetch the illustration data that will be used to present the illustration. Note that the required key is the quoteId. In this terminology the quote includes the illustration object. This endpoint differs from the /quote/{quoteId} endpoint in that the illustration information is provided in addition to the quote details.
      tags:
        - Quote
        - Illustration
      parameters:
        - name: quoteId
          in: path
          required: true
          type: string
          description: The quote id is used to retrieve the quote that contains the illustration information
      responses:
        200:
          description: Successful response will retrieve the detailed inforation needed to present the illustration (pdf or web page)
          schema:
            $ref: '#/definitions/QuoteIllustrationResponse'
        404:
          description: Quote for the given id is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals':
    get:
      summary: Fetch a list of proposal documents (basic information)
      description: |
        This endpoint returns a list of proposals (with basic information) for the current user (based on authenticated user). There are a number of parameters to help with filtering and sorting of the required proposals.
      parameters:
        - $ref: '#/parameters/queryOffset'
        - $ref: '#/parameters/queryLimit'
        - $ref: '#/parameters/queryKeys'
        - $ref: '#/parameters/querySort'
        - $ref: '#/parameters/queryFilter'
      tags:
        - Proposal
      responses:
        200:
          description: Returns a list of proposal documents with basic information
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: array
                items:
                  $ref: '#/definitions/ProposalSummary'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Create a new proposal document
      description: |
        A POST request to this end point is used to create a new proposal document. The details of the proposal is submitted in the request body.
      tags:
        - Proposal
      parameters:
        - name: proposal
          in: body
          required: true
          description: Contains the proposal document to be created
          schema:
            $ref: '#/definitions/Proposal'
      responses:
        200:
          description: The proposal is successfully created. Returns the newly created proposal document (value = new proposal)
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Proposal'
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/detailed':
    post:
      summary: Fetch a list of detailed proposal documents (complete information)
      description: |
        This endpoint returns a list of proposal documents (with complete information) for the current user (based on authenticated user). There are a number of parameters to help with filtering and sorting of the required proposals. Compared to the GET /proposals this allows for fetching a list of proposals based on a list of keys that will be provided in the request body. When the list of keys is provided in the request, the other parameters may no longer apply (if there is a conflict in the request e.g. limit is set to 5 , but pkList has 10 items)
      parameters:
        - $ref: '#/parameters/queryOffset'
        - $ref: '#/parameters/queryLimit'
        - $ref: '#/parameters/querySort'
        - $ref: '#/parameters/queryPk'
        - $ref: '#/parameters/queryFilter'
      tags:
        - Proposal
      responses:
        200:
          description: Returns a list of detailed proposal documents
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: array
                items:
                  $ref: '#/definitions/Proposal'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/{proposalId}':
    get:
      summary: Fetch one proposal document
      description: Fetch the proposal document for the given proposal id (full information)
      tags:
        - Proposal
      parameters:
        - name: proposalId
          in: path
          required: true
          description: Unique id for the proposal
          type: string
      responses:
        200:
          description: Request is succesfully processed. ok will be true and value is a proposal document (full information)
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Proposal'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response for where the proposal is not found, ok will be false and error object contains the error message
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    delete:
      summary: Delete a proposal document
      description: Delete a proposal for the given proposal id. The version id of the proposal record is required to ensure there are no changes since the proposal document was fetched.
      tags:
        - Proposal
      parameters:
        - name: proposalId
          in: path
          required: true
          description: Unique id for the proposal
          type: string
        - name: version
          in: query
          required: true
          description: the version id of the proposal document
          type: number
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        400:
          $ref: '#/responses/Standard400Response'

        404:
          description: Response when the proposal document is not found; ok will be false and error object contains the error information.
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    put:
      summary: Save a proposal record
      description: Save a proposal record. When updating an existing proposal document, the version attributes must be provided as part of the proposal document submitted. This is to ensure that there were no changes to the proposal document since it was fetched. This end point can also be used to create a new proposal when the proposalId is known (i.e. controlled by the client).
      tags:
        - Proposal
      parameters:
        - name: proposalId
          in: path
          required: true
          description: Unique id for the proposal
          type: string
        - name: proposal
          in: body
          description: Submitted details for the proposal document
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Proposal'

      responses:
        200:
          description: Request is succesfully processed. ok will be true and value is the new / updated proposal document
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Proposal'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response where the proposal document is not found for the given proposalId; ok will be false and error object contains the error information
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/template/codes/{codeType}':
    get:
      summary: Fetch a list of proposal code values for a given code type.
      description: This end-point should be used at design time, to get the valid codes that are used in the select (list) controls. For example, to get the list of nationalties use /proposals/template/codes/nationality
      tags:
        - Proposal
        - Design-time
      parameters:
        - name: codeType
          in: path
          required: true
          description: The type of code required
          type: string
      responses:
        200:
          description: Successful response is to provide a list of code and values
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: object
                properties:
                  code:
                    type: string
                  textValue:
                    type: string
                  numberValue:
                    type: number
                  dateValue:
                    type: string
                    format: date
        404:
          description: Response where the code type is not found. ok will be false and error object contains the error information
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/template/sections':
    get:
      summary: Fetch all the possible sections (with its questions) from the template proposal
      description: This end-point is to be used at design time. It provides all the possible sections and questions for a given company and language setting. The intent is to use all the valid sections and question to build the input UI for the client application.
      tags:
        - Proposal
        - Design-time
      parameters:
        - name: companyId
          in: query
          required: true
          type: string
          description: The unique id for the company. To get the list of companies, the the /companies end-point.
        - name: language
          in: query
          required: false
          type: string
          description: The language for questions titles and labels. If not specified, the the default language = en
      responses:
        200:
          description: Successful response, i.e. the all the possible sections and possible questions will be returned. In a sense, this is like the question bank for the specified company's proposal form.
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/ProposalTemplate'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/draft/sections':
    post:
      summary: Generate the applicable sections (and applicable questions) of the draft proposal for the quote parameter.
      description: This end point has a subtle difference compared to the /proposals/template/sections end-point. This end point is to be used at run-time to get the list of applicable sections and questions instead of all the possible sections and questions. The applicable sections and questions should be a subset of the template proposal. The applicable sections depends on factors like company, product, first party (vs third party), gender, age of the insured, etc, all of which are available in the quote object.
      tags:
        - Proposal
      parameters:
        - name: parameter
          in: body
          required: true
          description: Parameter to determine the applicable sections and questions.
          schema:
            $ref: '#/definitions/Quote'
      responses:
        200:
          description: Successful response where value holds the list of applicable sections and applicable questions.
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/ApplicableProposalSections'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/draft/sections/{sectionName}/status':
    post:
      summary: Generate the status of the section based on the submitted draft proposal data
      description: Use this end-point to check if all the captured data for the section is complete. In this client app, this is visually a check against the section(page) to indicate if all the information is complete.
      tags:
        - Proposal
      parameters:
        - name: sectionName
          in: path
          required: true
          type: string
          description: The name of the section to be checked
        - name: parameter
          in: body
          required: true
          description: The draft proposal with the section for checking. It is best to include all the sections with data to cater for cases where the completeness of the section data is dependent on the other sections.
          schema:
            $ref: '#/definitions/Proposal'

      responses:
        200:
          description: Successful response where ok is true or false. In the case where ok=false (i.e. incomplete, questionList holds the list of qid that is still required)
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              questionList:
                type: array
                items:
                  type: number
        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/draft/status':
    post:
      summary: Generate the status of the draft proposal (submitted)
      description: Use this end-point to check on the status of proposal based on all the submitted data. The possible statuses are PENDING, PENDING-SIGNATURE, PENDING-AGENT-DECLARATION, PENDING-SUBMISSION,SUBMITTED, COMPLETED. If the status returned is PENDING, it means that one of more sections has incomplete data. When all the sections are complete, then the draft proposal is PENDING-SIGNATURE from the customer. The next status is PENDING-AGENT-DECLARATION, then PENDING-SUBMISSION, then SUBMITTED and finally COMPLETED.
      tags:
        - Proposal
      parameters:
        - name: parameter
          in: body
          required: true
          description: The draft proposal for checking. It should include all the applicable sections with answers for the applicable questions.
          schema:
            $ref: '#/definitions/Proposal'
      responses:
        200:
          description: Successful response. Response.ok should be true, and response.value.status is the status of the proposal based on the submitted data. If the status = PENDING, then pendingSections will be a list of the sections which are incomplete.

          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: object
                properties:
                  status:
                    type: string
                  pendingSections:
                    type: array
                    items:
                      type: string

        400:
          $ref: '#/responses/Standard400Response'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/{proposalId}/submissions':
    get:
      summary: Fetch all the submissions for the requested proposal
      description: Use this end-point to fetch all the submissions belonging to the proposal. At the moment, there is only one submission allowed per proposal.
      parameters:
        - name: proposalId
          in: path
          required: true
          type: string
      tags:
        - Proposal
        - Submission

      responses:
        200:
          description: Returns a list of proposal submissions.
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: array
                items:
                  $ref: '#/definitions/Submission'
        404:
          description: The requested document is not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    post:
      summary: Create a new submission document for the given proposal
      description: This end point is used to submit a proposal. The proposal must be in the PENDING-SUBMISSION status.
      tags:
        - Proposal
        - Submission
      parameters:
        - name: proposalId
          in: path
          required: true
          type: string

      responses:
        200:
          description: Response for a successful submission. Returns the submission document
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Submission'

        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/{proposalId}/submissions/{submissionId}/addendums':
    get:
      summary: Fetch all the addendums for the given submission belonging to requested proposalId
      description: Addendums are additional information to the submission. These may be requested if there are additional details required to process the submission. E.g. addedums can be additional information about certain illness, doctor reports etc
      tags:
        - Proposal
        - Submission
      parameters:
        - name: proposalId
          in: path
          required: true
          type: string
        - name: submissionId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Returns a list of proposal addendum documents
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: array
                items:
                  $ref: '#/definitions/Addendum'
        404:
          description: The requested document is not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Submit a new addendum for the given proposal submission.
      description: This end point is used to submit a new addendum for the submitted proposal. The addendum is used to augment information already submitted to assist in the processing of the submission.
      tags:
        - Proposal
        - Submission
      parameters:
        - name: proposalId
          in: path
          required: true
          type: string
        - name: submissionId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Returns the newly created addendum
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Addendum'
        404:
          description: The requested document is not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/proposals/{proposalId}/submissions/{submissionId}/addendums/{addendumId}':
    get:
      summary: Fetch the addendum for the specified proposal submission.
      description: The end-point is used to retrieve the details of an addendum belonging to the given proposal submission.
      tags:
        - Proposal
        - Submission
      parameters:
        - name: proposalId
          in: path
          required: true
          type: string
        - name: submissionId
          in: path
          required: true
          type: string
        - name: addendumId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Returns the requested addendum
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Addendum'
        404:
          description: The requested document is not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          $ref: '#/responses/Standard500ErrorResponse'


################################################################################
#                                Definition                                    #
################################################################################
definitions:

#########################  Definition-Prospect  ################################
  Bulk:
    type: object
    properties:
      op:
        type: string
      data:
        $ref: '#/definitions/Prospect'

  Prospects:
    type: array
    items:
      $ref: '#/definitions/Prospect'

  ProspectResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Prospect'

  ProspectsResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Prospects'

  Prospect:
    allOf:
      - $ref: '#/definitions/ProspectBasic'
      - $ref: '#/definitions/ProspectAdditional'

  ProspectBasic:
    type: object
    properties:
      prospectId:
        type: string
        description: Unique id for the prospect
      prospectName:
        type: string
        description: Name of the prospect
      prospectTitle:
        type: string
        description: Title given to the person
      mobileNumber:
        type: string
        description: Mobile number of the prospect
      email:
        type: string
        description: Email address for the prospect
      birthDate:
        type: string
        format: date
        description: Date of birth for this prospect
      occupation:
        type: string
        description: The occupation code for the prospect. Used to determine the risk class.
      smoker:
        type: string
        description: SMOKER to indicate smoker and NON-SMOKER otherwise
      status:
        type: string
        description: Status of the prospect.
      userName:
        type: string
        description: The user that created this prospect record
      lastModified:
        type: string
        format: date
        description: The last time this prospect record has been modified
      version:
        type: number
        description: The revision number used for optimistic locking

  ProspectAdditional:
    allOf:
    - $ref: '#/definitions/ProspectPersonalData'
    - properties:
        addresses:
          type: array
          items:
            $ref: '#/definitions/ProspectAddress'
        family:
          type: array
          items:
            $ref: '#/definitions/ProspectRelation'

  ProspectPersonalData:
    type: object
    properties:
      maritalStatus:
        type: string
        description: Based on code table for marital status
      nationality:
        type: string
        description: Based on code table for nationalities
      idType:
        type: string
        description: Based on code table for list of valid identification types
      idNumber:
        type: string
        description: Identification reference number
      birthCountry:
        type: string
        description: Based on code table for countries
      residenceCountry:
        type: string
        description: Based on code table for countries
      height:
        type: integer
        description: Height in cms
      weight:
        type: integer
        description: Weight in kgs
      employmentStatus:
        type: string
        description: Based on code table for employment statuses
      employmentStatusOthers:
        type: string
        description: Description of employment status if not in dropdown list
      companyName:
        type: string
        description: Company that the prospect works in
      officeNumber:
        type: string
        description: Phone number at office
      homePhoneNumber:
        type: string
        description: The house phone number
      mainIncome:
        type: number
        format: currency
        description: The amount of the primary income source
      bonusIncome:
        type: number
        format: currency
      otherIncome:
        type: number
        format: currency
        description: Other sources of income, e.g. investments

  ProspectAddress:
    type: object
    properties:
      addressType:
        type: string
        enum: ["HOME","WORK","CORRESPONDENCE"]
        description: Type of address, usually WORK or HOME
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      country:
        type: string
      postcode:
        type: string

  ProspectRelation:
    type: object
    properties:
      relationship:
        type: string
        enum: ["SPOUSE","BROTHER","SISTER","FATHER","MOTHER","SON","DAUGHTER"]
        description: Person related to the prospect
      relationName:
        type: string
      relationTitle:
        type: string
        description: Based on code table for title list
      relationGender:
        type: string
        enum: ["MALE","FEMALE"]
        description: Based on code table for gender
      relationBirthDate:
        type: string
        format: date
      smoker:
        type: string
        enum: ["SMOKER","NON-SMOKER"]
        description: Based on code table for smoker options
      occupation:
        type: string
        description: Based on the occupation code table


#########################  Definition-Company   ################################

  Company:
    type: object
    properties:
      companyId:
        type: string
        description: Unique id for the company
      companyName:
        type: string
        description: Name of the company
      shortName:
        type: string
        description: Company short Name
      companyLogo:
        type: string
        description: Reference to the image to use for the company logo (e.g. zurich.png)
      telephone:
        type: string
        description: Phone number for the company
      url:
        type: string
        description: Url for the company website

  Companies:
    type: array
    items:
      $ref: '#/definitions/Company'


#########################  Definition-Package   ################################
# summary information about a package product

  PackageProductSummary:
    type: object
    properties:
      productId:
        type: string
        description: Unique id to identify the product
      productName:
        type: string
        description: Name of the product
      insType:
        type: string
        description: To indicate if main or rider 1=Main, 2=Rider

  PackageProduct:
    allOf:
      - $ref: '#/definitions/PackageProductSummary'
      - properties:
          underwritingRule:
            type: object
            properties:
              companyRule:
                type: string
                description: Description of the company underwriting rules
              productRule:
                type: string
                description: Description of the product unerwriting rule
          liabilities:
            type: array
            items:
              type: object
              properties:
                liabDesc:
                  type: string
                  description: Description about the liability
          caseStudies:
            type: array
            items:
              type: object
              properties:
                caseStudyFileRef:
                  type: string
                  description: Reference to a pdf to describe the case study
                displayOrder:
                  type: number
                  description: For the ordering of the case studies

          remark:
            type: string
            description: Additional remarks about this product

          diseaseInfo:
            type: string
            description: Information about diseases covered for the product

          termAndConditions:
            type: string
            description: Writeup about the detailed terms and conditions of the insurance contract

  PackageLiability:
    type: object
    properties:
      liabId:
        type: string
        description: Unique id for the liability
      liabType:
        type: string
        description: Type of liability (category)
      liabDesc:
        type: string
        description: The description for the liability
      displayOrder:
        type: number
        description: Controls the ordering for displaying the liability

  PackageBenefit:
    type: object
    properties:
      benefitId:
        type: string
        description: Unique id to identify the benefit
      benefitName:
        type: string
        description: Name of the benefit
      benefitDesc:
        type: string
        description: Description about the benefit
      displayOrder:
        type: number
        description: Controls the ordering when displaying the benefit

  PackageCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  PackageProductFeature:
    type: object
    properties:
      featureId:
        type: string
        description: Unique id for the feature
      featurePic:
        type: string
        description: Reference to the image to highlight the feature
      displayOrder:
        type: number
        description: Ordering information when displaying the feature

  PackageAttachableRider:
    type: object
    properties:
      productId:
        type: string
        description: Either the main product or a rider (in the case of dependent riders) i.e. the primary product
      attachId:
        type: string
        description: The attachable rider i.e. the secondary product.
      compulsory:
        type: string
        description: Flag to indicate if this relationship is mandatory. Can be used to represent mandatory riders that must be attached to the main product
      attachedProductName:
        type: string
        description: Name of the attachable rider

  PackageSummary:
    type: object
    properties:
      packageId:
        type: string
        description: Unique id for the package
      packageName:
        type: string
        description: Name of the package
      examplePremium:
        type: number
        format: currency
        description: Typical premium
      favourite:
        type: boolean
        description: Flag to mark the package as a favourite of the user
      isNew:
        type: boolean
        description: New package or otherwise
      productCategory:
        type: string
        description: Product category e.g. Whole Life, Endowment, Health, Accident
      minAge:
        type: number
        description: Minimum age of life assured
      minAgeUnit:
        type: string
        description: The unit for the mininum age (e.g. years, days)
      maxAge:
        type: number
        description: Max age of the life assured
      maxAgeUnit:
        type: string
        description: The unit for the maximum age
      visitNumber:
        type: number
        description: Count of the number of times the user has viewed this package

      tagList:
        type: array
        items:
          type: object
          properties:
            tagId:
              type: string
              description: Unique id for the tag
            tagName:
              type: string
              description: Name for the tag
            tagPic:
              type: string
              description: The reference for the picture to load
      coveragePeriods:
        type: array
        items:
          $ref: "#/definitions/PackageCoveragePeriod"
      benefits:
        type: array
        items:
          $ref: "#/definitions/PackageBenefit"
      liabilities:
        type: array
        items:
          $ref: "#/definitions/PackageLiability"

  PackageMoreDetails:
    type: object
    properties:
      company:
        $ref: '#/definitions/Company'
      premiumTerms:
        type: array
        items:
          type: object
          properties:
            termType:
              type: string
              description: Either duration or end age i.e. pay premium for 20 years (duration) or pay premium premium until age 55 (end age)
            termValue:
              type: number
              description: Number representing the duration or end age depending on termType
      features:
        type: array
        items:
          $ref: '#/definitions/PackageProductFeature'

      mainProduct:
        $ref: "#/definitions/PackageProductSummary"

      attachableRiders:
        type: array
        items:
          $ref: '#/definitions/PackageAttachableRider'

      ageLimit:
        type: object
        properties:
          minAge:
            type: number
            description: Minimum age of life assured
          minAgeUnit:
            type: string
            description: The unit for the mininum age (e.g. years, months)
          maxAge:
            type: number
            description: Max age of the life assured
          maxAgeUnit:
            type: string
            description: The unit for the maximum age
      premiumLimit:
        type: object
        properties:
          minAmount:
            type: number
            description: Mininum premium amount
          maxAmount:
            type: number
            description: Maximum premium amount
          currency:
            type: string
            description: Currency of the limit

  Package:
    allOf:
      - $ref: '#/definitions/PackageSummary'
      - $ref: '#/definitions/PackageMoreDetails'

#########################  Definition-Product  ################################
  # **** The following definitions will be used for the quote object
  Product:
    type: object
    properties:
      productId:
        type: string
        description: Unique id for the productId
      productName:
        type: string
      insType:
        type: string
        description: Type of product 1=Main, 2=Rider
      unitFlag:
        type: string
        description: Premium formula calculation type
      sumAssuredLimitList:
        type: array
        items:
          type: object
          properties:
            currencyId:
              type: string
            minAge:
              type: number
            maxAge:
              type: number
            minAmount:
              type: number
            maxAmount:
              type: number
      ageLimitList:
        type: array
        items:
          type: object
          properties:
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            coverageTermType:
              type: string
            coverageTermValue:
              type: number
            paymentTermType:
              type: string
            paymentTermValue:
              type: number
            gender:
              type: string
            benefitLevel:
              type: string
            minInsuredAge:
              type: number
            maxInsuredAge:
              type: number
            minPolicyholderAge:
              type: number
            maxPolicyHolderAge:
              type: number
      premiumLimitList:
        type: array
        items:
          type: object
          properties:
            minAge:
              type: number
            maxAge:
              type: number
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            minInitialPremium:
              type: number
            maxInitialPremium:
              type: number
      benefitLevelList:
        type: array
        items:
          type: object
          properties:
            benefitLevel:
              type: string
            levelDesc:
              type: string
      liabilityList:
        type: array
        items:
          type: object
          properties:
            liabId:
              type: string
            liabType:
              type: string
            liabName:
              type: string
            liabDesc:
              type: string
            displayOrder:
              type: number
            ifDisplayInQuoteIllus:
              type: string
      ageRange:
        type: object
        properties:
          minAge:
            type: number
          minAgeUnit:
            type: string
          maxAge:
            type: number
          maxAgeUnit:
            type: string
      pointToPh:
        type: string
      pointToSecInsured:
        type: string
      smokingIndi:
        type: string
      jobIndi:
        type: string
      socialInsureIndi:
        type: string
      isWaiver:
        type: string
      isAnnuityProduct:
        type: string
      isPackageProduct:
        type: string
      saEqual:
        type: string
        description: Rider SA to be equal to main SA
      attachCompulsory:
        type: string
      insuredNumber:
        type: number
        description: Used to identified the insured in the insured list
      firstYearPremium:
        type: number
        description: This should normally be a calculated field from the backend
      displayPremiumIndi:
        type: string
        description: value should be "Y" or "N"
      monthlyCoi:
        type: number
        description: the monthly cost of insurance for ILP products - calculated by the back end
      displayMonthlyCoi:
        type: string
        description: value should be "Y" or "N"
      illustrationFields:
        type: object
        readOnly: true
        description: This should a bunch of fields that is dynamically calculated from the backend and used by the front end to show the illustration. Since it is dynamic and dependent on the product, it is not enumerated here.

  Insured:
    type: object
    properties:
      insuredId:
        type: number
      name:
        type: string
        description: Name of the insured
      age:
        type: number
        description: Age of the insured. Required if birthdate is not provided
      birthDate:
        type: string
        format: date
        description: Required if age is not provided
      jobCateId:
        type: number
        description: Risk class - one of the common risk attributes
      occupation:
        type: string
        description: Typically provided to determine the risk class of this person.
      socialInsuranceIndi:
        type: string
      smoking:
        type: string
        description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

  Fund:
    type: object
    properties:
      fundCode:
        type: string
        description: The code for the fund
      fundName:
        type: string
        description: Name of the fund for investment policies
      targetPremiumPercent:
        type: number
        description: The percentage allocation for target (basic) premium
      adhocPercent:
        type: number
        description: The percentage allocation for ad-hoc topups
      regularTopupPercent:
        type: number
        format: percentage
        description: The percentage allocation for regular topups

  Topup:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  Withdrawal:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  QuoteSummary:
    type: object
    properties:
      packageId:
        type: string
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      startDate:
        type: string
        format: date
      status:
        type: string
        enum: ["NEW","PENDING","SIGNED","GENERATED","COMPLETED"]
      lastModified:
        type: string
        format: date
      version:
        type: number
        description: The revision number used for optimistic locking
      userName:
        type: string
        description: The user that created this quotation
      mainProduct:
        $ref: '#/definitions/Product'

  QuoteMoreDetails:
    type: object
    properties:
      riderList:
        type: array
        items:
          $ref: '#/definitions/Product'
      fundList:
        type: array
        items:
          $ref: '#/definitions/Fund'
      topupList:
        type: array
        items:
          $ref: '#/definitions/Topup'
      withdrawalList:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'
      valueAddedList:
        type: array
        items:
          type: object
          properties:
            valueAddedId:
              type: string
            valueAddedName:
              type: string
            valueAddedDesc:
              type: string
            valueAddedCode:
              type: string
            valueAddedPic:
              type: string
            displayOrder:
              type: number

  Quote:
    allOf:
      - $ref: '#/definitions/QuoteSummary'
      - $ref: '#/definitions/QuoteMoreDetails'

  # Definition of the model for a new quote for a given package

  NewQuote:
    type: object
    properties:
      packageId:
        type: string
      packageName:
        type: string
      company:
        $ref: '#/definitions/Company'
      productList:
        type: array
        items:
          $ref: '#/definitions/Product'
      valueAddedList:
        type: array
        items:
          type: object
          properties:
            valueAddedId:
              type: string
            valueAddedName:
              type: string
            valueAddedDesc:
              type: string
            valueAddedCode:
              type: string
            valueAddedPic:
              type: string
            displayOrder:
              type: number
      insuranceSpiritList:
        type: array
        items:
          type: object
          properties:
            spiritId:
              type: string
            spiritName:
              type: string
            defaultSpirit:
              type: string
      suggestedReason:
        type: string

  #  *** The following are a number of body parameters

  ValidateParameter:
    allOf:
      - $ref: '#/definitions/Quote'
      - properties:
          valdatorList:
            type: array
            items:
              type: string

  QuoteParameter:
    allOf:
      - $ref: '#/definitions/Quote'
      - properties:
          showValueAdded:
            type: string
          valueAddedList:
            type: array
            items:
              type: string
          insuranceSpirit:
            type: number
          showAdvice:
            type: string
          advice:
            type: string

  QuoteCalculateParameter:
    allOf:
      - $ref: '#/definitions/Quote'
      - properties:
          showValueAdded:
            type: string
          valueAddedList:
            type: array
            items:
              type: string
          insuranceSpirit:
            type: number
          showAdvice:
            type: string
          advice:
            type: string
          calculatorFields:
            type: array
            items:
              type: string


  #  The following are definitions used for responses

  CompanyResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Company'

  CompaniesResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
          $ref: '#/definitions/Companies'

  PackageResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Package'

  PackageListResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: array
        items:
          $ref: '#/definitions/Package'

  PackageSummaryListResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: array
        items:
          $ref: '#/definitions/PackageSummary'

  PackageProductResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/PackageProduct'

  SearchFilterResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: object
        properties:
          companies:
            type: array
            items:
              type: object
              properties:
                  companyName:
                    type: string
                  companyId:
                    type: string
          productCategories:
            type: array
            items:
              type: object
              properties:
                categoryId:
                  type: string
                categoryName:
                  type: string
                displayOrder:
                  type: number
          benefitTypes:
            type: array
            items:
              type: object
              properties:
                benefitId:
                  type: string
                benefitName:
                  type: string
                benefitDesc:
                  type: string

  NewQuoteResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/NewQuote'

  QuoteSummaryListResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: array
        items:
          $ref: '#/definitions/QuoteSummary'

  QuoteDetailedListResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: array
        items:
          $ref: '#/definitions/Quote'

  QuoteDetailedResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Quote'

  QuoteIllustration:
    type: object
    properties:
      illusMap:
        description: The first level key represents the performance level i.e. 1=low, 2=mid, 3=high and the 2nd level key represents the year. The result is an array which holds the name of the calculated field and its value
        type: object
        properties:
          2:
            type: object
            properties:
              1:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: number
              2:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: number

  QuoteDetailedIllustration:
    allOf:
      - $ref: '#/definitions/Quote'
      - $ref: '#/definitions/Package'
      - $ref: '#/definitions/QuoteIllustration'
      - properties:
          planLiabilityList:
            type: object
            properties:
              multiProduct:
                type: boolean
              liabCategoryList:
                type: array
                items:
                  type: object
                  properties:
                    categoryId:
                      type: string
                    categoryName:
                      type: string
                    simpleLiabList:
                      type: array
                      items:
                        type: object
                        properties:
                          packageId:
                            type: string
                          productid:
                            type: string
                          liabId:
                            type: string
                          liabName:
                            type: string
                          liabDisplayName:
                            type: string
                          libDescQuote:
                            type: string
                          libCalcType:
                            type: string
                          libCalcMethod:
                            type: string
                          liabAmount:
                            type: number
                          needDiseaseIndi:
                            type: string
                          totalAmount:
                            type: number
                          libDesc:
                            type: string
                          liabList:
                            type: string
                          categoryName:
                            type: string

  QuoteIllustrationResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/QuoteDetailedIllustration'

  ProductRidersResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: object
        properties:
          riderList:
            type: array
            items:
              $ref: '#/definitions/Product'

  CalculatePremiumResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Quote'

  CalculatorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/Quote'

  ValidatorErrorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      errorList:
        type: array
        items:
          type: object
          properties:
            validator:
              description: Name of the validators that emitted the error
              type: string
            errors:
              description: The errors emitted by the validator. Designed to allow for multiple error messages per validator
              type: array
              items:
                type: string

  ProposalSummary:
    allOf:
      - $ref: '#/definitions/PolicyholderSection'
      - $ref: '#/definitions/ProposedInsuranceSection'
      - $ref: '#/definitions/PremiumPaymentSection'
      - properties:
          proposalId:
            type: string
            description: Unique id for the proposal
          status:
            type: string
            description: Status of the proposal
          userName:
            type: string
            description: The user that created this proposal
          lastModified:
            type: string
            format: date
            description: The last time this proposal document has been modified
          version:
            type: number
            description: The revision number used for optimistic locking


  Proposal:
    allOf:
      - $ref: '#/definitions/ProposedInsuranceSection'
      - $ref: '#/definitions/PolicyholderSection'
      - $ref: '#/definitions/PolicyholderDisclosureSection'
      - $ref: '#/definitions/LifeAssuredSection'
      - $ref: '#/definitions/LifeAssuredDisclosureSection'
      - $ref: '#/definitions/FamilyHistorySection'
      - $ref: '#/definitions/PremiumPaymentSection'
      - $ref: '#/definitions/BeneficialOwnerSection'
      - $ref: '#/definitions/BeneficiarySection'
      - $ref: '#/definitions/DocumentAttachmentSection'
      - $ref: '#/definitions/SpecialRequestSection'
      - $ref: '#/definitions/InformationAuthorisationSection'
      - $ref: '#/definitions/DeclarationAndAuthoritySection'
      - $ref: '#/definitions/AgentReportSection'
      - $ref: '#/definitions/AgentDeclarationSection'


  # ------ Definitions to support the proposal template -----------
  BasicQuestion:
    type: object
    properties:
      qid:
        type: number
        description: Question Id (qid) to identify the question
      qtype:
        type: string
        description: type of question, valid values are attr, object, list
      attrName:
        type: string
        description: This is the attribute name
      attrType:
        type: string
        description: The data type. Valid values are text, number, date, enum, yesno
      required:
        type: boolean
        description: whether the attribute is mandatory or optional
      title:
        type: string
        description: Some questions have just a statement like a title. Can be set to null
      label:
        type: string
        description: Label to be used for the attribute

  # work around as specs does not seem to support recursive definitions

  ProposalTemplate:
    type: array
    items:
      type: object
      properties:
        sectionName:
          type: string
          description: Name of the section e.g. policyholderSection
        questionList:
          type: array
          items:
            type: object
            properties:
              qid:
                type: number
                description: Question Id (qid) to identify the question
              qtype:
                type: string
                description: type of question, valid values are attr, object, list
              attrName:
                type: string
                description: This is the attribute name
              attrType:
                type: string
                description: The data type. Valid values are text, number, date, enum, yesno
              required:
                type: boolean
                description: whether the attribute is mandatory or optional
              title:
                type: string
                description: Some questions have just a statement like a title. Can be set to null
              label:
                type: string
                description: Label to be used for the attribute

              objectFields:
                description: This fields is required when qtype=object
                type: array
                items:
                  $ref: '#/definitions/BasicQuestion'
              listFields:
                description: This fields is required when qtype=list
                type: array
                items:
                  $ref: '#/definitions/BasicQuestion'

  ApplicableProposalSections:
    type: array
    items:
      properties:
        sectionName:
          type: string
        questionList:
          type: array
          items:
            type: number
            # type: object
            # properties:
            #   qid:
            #     type: number


  # ------ Definitions for the submissions -----------------------

  Submission:
    type: object
    properties:
      submissionId:
        type: string
        description: Unique id for the submission
      submissionDate:
        type: string
        format: date
      submissionType:
        type: string
        description: submission type e.g. proposal
      submissionReference:
        type: string
        description: Unique id identifying the submission type e.g. the proposalId
      status:
        type: string
        description: Status of the submission
      messages:
        type: array
        description: messages can be used to provide more information on the status of the submission
        items:
          type: object
          properties:
            messageDate:
              type: string
            message:
              type: string
            status:
              type: string
      userName:
        type: string
        description: The user that created this submission
      lastModified:
        type: string
        format: date
        description: The last time this submission document has been modified
      version:
        type: number
        description: The revision number used for optimistic locking

      addendums:
        type: array
        description: Holds a list of id of related addendums
        items:
          type: string

  Addendum:
    type: object
    properties:
      userName:
        type: string
        description: The user that created this submission
      lastModified:
        type: string
        format: date
        description: The last time this submission document has been modified
      version:
        type: number
        description: The revision number used for optimistic locking
      addendumId:
        type: string
        description: Unique id for the addendum
      submissionId:
        type: string
        description: Reference to the submission
      submissionType:
        type: string
        description: Type of submission e.g. proposal
      submissionReference:
        type: string
        description: E.g. the proposal id
      submittedDate:
        type: string
      addendumType:
        type: string
      addendum:
        type: string
        description: Base64 to hold the uploaded document
      remarks:
        type: string
        description: Some notes to go with the addendum.
      status:
        type: string
        description: the addendum status


  # ------ Definitions for the various sections of a proposal ----

  PolicyholderSection:
    type: object
    properties:
      fullName:
        type: string
      birthPlace:
        type: string
      birthDate:
        type: string
        format: date
      age:
        type: number
      idType:
        type: string
        description: The identification type; a enumerated list based on a code table e.g. "NRIC", "PASSPORT". "KTP", "BIRTHCERT" etc
      idTypeOther:
        type: string
        description: Useful only in circumstances where the enumerated list does not contain the required identification type
      idNumber:
        type: string
        description: The identification number
      idExpiryDate:
        type: string
        format: date
        description: Some forms of identification may have an expiry date, e.g. passports have expiry dates.
      nationality:
        type: string
        description: Nationality of the policyholder. Should be selected from an enumerated list of nationalities.
      religion:
        type: string
        description: The religion should be an enumerated list
      maritalStatus:
        type: string
        description: Whether the policyholder is married, single, widowed etc. Select from an code list.
      gender:
        type: string
        description: Gender of the policyholder. Male or Female.
      taxIdNo:
        type: string
      taxFileNo:
        type: string
      homeAddress:
        type: string
      homeAddress2:
        type: string
      homeCity:
        type: string
      homePostcode:
        type: string
      homeCountry:
        type: string
        description: Should be from a coded list of countries
      homeTelNo:
        type: string
        description: Home telephone number
      mobileNo:
        type: string
      mobileNo2:
        type: string
      email:
        type: string
      pdpaConsent:
        type: boolean
        description: Usually a checkbox to get consent to contact the policyholder for servicing and marketing purposes.
      jobCategory:
        type: string
      jobDurationYears:
        type: number
        description: How long policyholder has worked in his/her current job
      jobDurationMonths:
        type: number
      sector:
        type: string
        description: Normally select from a coded list
      occupation:
        type: string
        description: Select from a coded list
      companyName:
        type: string
        description: Company name of employer
      jobClass:
        type: string
        description: Risk class given the occupation
      jobDescription:
        type: string
        description: Description of the job
      department:
        type: string
      rank:
        type: string
      industry:
        type: string
      officeAddress:
        type: string
      officeAddress2:
        type: string
      officeCity:
        type: string
      officePostcode:
        type: string
      officeCountry:
        type: string
        description: Should be from a coded list of countries
      officeTelNo:
        type: string
        description: Office telephone number
      officeEmail:
        type: string
      incomeSources:
        type: array
        items:
          type: object
          properties:
            incomeType:
              type: string
            incomeAmount:
              type: number
              format: currency
      premiumSourceOfFunds:
        type: number
        description: Source of funds to pay for premium
      insuranceObjective:
        type: string
        description: a code list of objectives e.g. protection, education,etc.
      mailingAddressType:
        type: string
        description: Expected values are HOME, OFFICE, and OTHERS
      otherMailingAddress:
        type: string
      otherMailingAddress2:
        type: string
      otherMailingCity:
        type: string
      otherMailingCountry:
        type: string
      otherMailingPostcode:
        type: string
      relationshipWithInsured:
        type: string
        description: A coded list of relationships, e.g. spouse, son, daugther etc
      relationshipWithInsuredOthers:
        type: string
        description: Relationship is other than available in drop down list

  LifeAssuredSection:
    type: object
    properties:
      fullName:
        type: string
      birthPlace:
        type: string
      birthDate:
        type: string
        format: date
      age:
        type: number
      idType:
        type: string
        description: The identification type; a enumerated list based on a code table e.g. "NRIC", "PASSPORT". "KTP", "BIRTHCERT" etc
      idTypeOther:
        type: string
        description: Useful only in circumstances where the enumerated list does not contain the required identification type
      idNumber:
        type: string
        description: The identification number
      idExpiryDate:
        type: string
        format: date
        description: Some forms of identification may have an expiry date, e.g. passports have expiry dates.
      nationality:
        type: string
        description: Nationality of the policyholder. Should be selected from an enumerated list of nationalities.
      religion:
        type: string
        description: The religion should be an enumerated list
      maritalStatus:
        type: string
        description: Whether the policyholder is married, single, widowed etc. Select from an code list.
      gender:
        type: string
        description: Gender of the policyholder. Male or Female.
      taxIdNo:
        type: string
      taxFileNo:
        type: string
      homeAddress:
        type: string
      homeAddress2:
        type: string
      homeCity:
        type: string
      homePostcode:
        type: string
      homeCountry:
        type: string
        description: Should be from a coded list of countries
      homeTelNo:
        type: string
        description: Home telephone number
      mobileNo:
        type: string
      mobileNo2:
        type: string
      email:
        type: string

      jobCategory:
        type: string
      jobDurationYears:
        type: number
        description: How long policyholder has worked in his/her current job
      jobDurationMonths:
        type: number
      sector:
        type: string
        description: Normally select from a coded list
      occupation:
        type: string
        description: Select from a coded list
      companyName:
        type: string
        description: Company name of employer
      jobClass:
        type: string
        description: Risk class given the occupation
      jobDescription:
        type: string
        description: Description of the job
      department:
        type: string
      rank:
        type: string
      industry:
        type: string
      officeAddress:
        type: string
      officeAddress2:
        type: string
      officeCity:
        type: string
      officePostcode:
        type: string
      officeCountry:
        type: string
        description: Should be from a coded list of countries
      officeTelNo:
        type: string
        description: Office telephone number
      officeEmail:
        type: string
      incomeSources:
        type: array
        items:
          type: object
          properties:
            incomeType:
              type: string
            incomeAmount:
              type: number
              format: currency

      relationshipWithPolicyholder:
        type: string
        description: A coded list of relationships, e.g. spouse, son, daugther etc
      relationshipWithPolicyholderOthers:
        type: string
        description: Relationship is other than available in drop down list

  BeneficialOwnerSection:
    allOf:
      - $ref: '#/definitions/BeneficialOwner'

  BeneficiarySection:
    type: array
    items:
      $ref: '#/definitions/Beneficiary'

  PremiumPaymentSection:
    allOf:
      - $ref: '#/definitions/PremiumPayment'

  ProposedInsuranceSection:
    allOf:
      - $ref: '#/definitions/ProposedInsurance'

  DocumentAttachmentSection:
    type: array
    items:
      $ref: '#/definitions/DocumentAttachment'

  DeclarationAndAuthoritySection:
    type: object
    properties:
      policyholderSignature:
        $ref: '#/definitions/Signature'
      lifeAssuredSignature:
        $ref: '#/definitions/Signature'
      guardianSignature:
        $ref: '#/definitions/Signature'
      agentSignature:
        $ref: '#/definitions/Signature'

  AgentReportSection:
    type: object
    properties:
      policyholderReport:
        $ref: '#/definitions/AgentReportData'
      lifeAssuredReport:
        $ref: '#/definitions/AgentReportData'

  AgentDeclarationSection:
    type: object
    properties:
      agentSignature:
        $ref: '#/definitions/Signature'

  SpecialRequestSection:
    type: object
    properties:
      backDate:
        type: string
        format: date
      otherSpecialRequest:
        type: string

  InformationAuthorisationSection:
    type: object
    properties:
      pdpaConsent:
        type: boolean
        description: Consent to contact policyholder for servicing and marketing purposes.

  FamilyHistorySection:
    type: object
    properties:
      policyholderFamilyHasGeneticDisease:
        type: boolean
      policyholderFamilyDetails:
        type: array
        items:
          $ref: '#/definitions/FamilyHistoryData'

      lifeAssuredFamilyHasGeneticDisease:
        type: boolean
      lifeAssuredFamilyDetails:
        type: array
        items:
          $ref: '#/definitions/FamilyHistoryData'

  PolicyholderDisclosureSection:
    allOf:
      - $ref: '#/definitions/DisclosureData'

  LifeAssuredDisclosureSection:
    allOf:
      - $ref: '#/definitions/DisclosureData'

  # ------ End of proposal sections definitions -------------

  BeneficialOwner:
    type: object
    properties:
      hasBeneficialOwner:
        type: boolean
      beneOwnerName:
        type: string
      beneOwnerRelationshipPh:
        type: string
        description: Relationship to policyholder. Coded list
      beneOwnerContactNumber:
        type: string
      beneOwnerIdType:
        type: string
      beneOwnerIdNumber:
        type: string

  Beneficiary:
    type: object
    properties:
      itemNo:
        type: number
      beneficiaryName:
        type: string
      birthDate:
        type: string
        format: date
      gender:
        type: string
        description: Male or Female
      relationshipWithInsured:
        type: string
        description: Coded list of relationships
      percentage:
        type: number
        format: percentage

  PremiumPayment:
    type: object
    properties:
      billingAccountNo:
        type: string
      billingAccountOwner:
        type: string
      billingBank:
        type: string
      billingBranch:
        type: string
      refundAccountNo:
        type: string
      refundAccountOwner:
        type: string
      refundBank:
        type: string
      refundBranch:
        type: string
      premiumPaymentFreq:
        type: string
        description: Coded list MONTHLY, QUARTERLY, HALF-YEARLY, YEARLY
      renewalPaymentMethod:
        type: string
        description: How renewal premiums will be paid, Credit Card, Direct Debit
      renewalPayee:
        type: string
        description: Default should be policyholder, other options could be life assured
      renewalSourceOfFunds:
        type: string
        description: Source of funds for the renewal premiums
      billingCurrency:
        type: string
        description: Coded list of applicable currencies e.g. "4" for USD

  # Quote:
  #   allOf:
  #     - $ref: 'specs/quotation.yaml#/definitions/Quote'

  ProposedInsurance:
    allOf:
      - $ref: '#/definitions/Quote'

  DocumentAttachment:
    type: object
    properties:
      documentType:
        type: string
        description: Type of document, coded list of document types eg. NRIC, Passport, Credit Card etc
      remarks:
        type: string
      documentRef:
        type: string
        description: a data url with the photo or image (usually base64)

  Signature:
    type: object
    properties:
      signatureDate:
        type: string
        format: date
      signatureLocation:
        type: string
      signatoryName:
        type: string
        description: Name of person who signed
      signature:
        type: string
        description: base64 of signature image
      signatoryRole:
        type: string

  AgentReportData:
    type: object
    properties:
      knownDurationYears:
        type: number
      knownDurationMonths:
        type: number
      relationship:
        type: string
        description: relation between agent and policyholder / life assured
      income:
        type: number
      incomeSource:
        type: string
      jobDescription:
        type: string
      physicalAssessment:
        type: string
      knowledgeOfSickness:
        type: string
      existingMedicalPolicies:
        type: string
      sponsor:
        type: string
      sponsorInsuranceInfo:
        type: string
      criminalRecord:
        type: boolean
      goodFinancialSituation:
        type: boolean
      suitableProposal:
        type: boolean
      proposalExplained:
        type: boolean
      falsehoodConsequencesUnderstoold:
        type: boolean
      agentHelpInFillingForm:
        type: boolean
      agentHelpReviewDone:
        type: boolean
      goodAgentAssessment:
        type: boolean
      hasNonApparentFactors:
        type: boolean
      hasNonApparentFactorsDesc:
        type: string
      isReplacementOfPolicy:
        type: boolean
      replacementOfPolicyReason:
        type: string

  CurrentPolicyInfo:
    type: object
    properties:
      company:
        type: string
      policyNumber:
        type: string
      policyDate:
        type: string
        format: date
      sumAssured:
        type: number
      accidentSumAssured:
        type: number
      currency:
        type: string
        description: Coded list of currency codes

  SubStandardPolicyInfo:
    type: object
    properties:
      insuranceType:
        type: string
      insurer:
        type: string
        description: Name of insurance company
      policyNumber:
        type: string
      policyDate:
        type: string
        format: date
      sumAssured:
        type: number
      reason:
        type: string

  PendingPolicyInfo:
    type: object
    properties:
      insuranceType:
        type: string
      insurer:
        type: string
        description: Name of insurance company
      policyNumber:
        type: string
      policyDate:
        type: string
        format: date
      sumAssured:
        type: number
      reason:
        type: string

  FamilyHistoryData:
    type: object
    properties:
      relationship:
        type: string
      isAlive:
        type: boolean
        description: Whether relation is still alive or deceased
      currentAge:
        type: number
        description: Current age
      currentHealthCondition:
        type: string
      deceaseAge:
        type: number
        description: Age when relation was deceased
      causeOfDeath:
        type: string

  BasicPersonalData:
    type: object
    properties:
      height:
        type: number
      weight:
        type: number
      isHealthy:
        type: string
        description: YES or NO
      ifUnhealthDescription:
        type: string
      underDoctorCare:
        type: string
        description: YES or NO

  HealthData:
    type: object
    properties:
      healthMentalPhysicalDisorder:
        type: string
        description: YES or NO
      healthEpilepsy:
        type: string
        description: YES or NO
      healthDiabetes:
        type: string
        description: YES or NO
      healthEyes:
        type: string
        description: YES or NO
      healthENT:
        type: string
        description: YES or NO
      healthLungs:
        type: string
        description: YES or NO
      healthHeart:
        type: string
        description: YES or NO
      healthHeartNoise:
        type: string
        description: YES or NO
      healthHeartIrregularBeat:
        type: string
        description: YES or NO
      healthHeartBloodPressure:
        type: string
        description: YES or NO
      healthLiver:
        type: string
        description: YES or NO
      healthStomach:
        type: string
        description: YES or NO
      healthPancreas:
        type: string
        description: YES or NO
      healthGenitals:
        type: string
        description: YES or NO
      healthWeightChange:
        type: string
        description: YES or NO
      healthWeightChangeKgs:
        type: number
      healthWeightChangeGainLoss:
        type: string
        description: GAIN or LOSS
      healthWeightChangeReason:
        type: string
      healthUrinary:
        type: string
        description: YES or NO
      healthMuscle:
        type: string
        description: YES or NO
      healthCancer:
        type: string
        description: YES or NO
      healthNerve:
        type: string
        description: YES or NO
      healthBoneSkull:
        type: string
        description: YES or NO
      healthGlandBlood:
        type: string
        description: YES or NO
      healthImmuneInfection:
        type: string
        description: YES or NO
      healthCellGrowth:
        type: string
        description: YES or NO
      healthHiv:
        type: string
        description: YES or NO
      hivTest:
        type: string
        description: YES or NO
      hivTestDate:
        type: string
        format: date
      hivTestReason:
        type: string
      hivTestResult:
        type: string
      hivSymptoms:
        type: string
        description: YES or NO
      hivSymptomDate:
        type: string
        format: date
      hivSymptomsReason:
        type: string
      hivSymptomsCurrentCondition:
        type: string
      hasScans:
        type: string
        description: YES or NO
      scanList:
        type: array
        items:
          type: object
          properties:
            scanType:
              type: string
            scanDate:
              type: string
              format: date
            scanClinic:
              type: string
            scanReason:
              type: string
            scanResult:
              type: string

      hasDiagnosticTest:
        type: string
        description: YES or NO
      diagnosticTestName:
        type: string
      diagnosticTestDate:
        type: string
        format: date
      diagnosticTestMedicationDurationYears:
        type: number
      diagnosticTestMedicationDurationMonths:
        type: number

      hasTreatments:
        type: string
        description: YES or NO
      treatmentList:
        type: array
        items:
          type: object
          properties:
            treatmentCondition:
              type: string
            treatmentDate:
              type: string
              format: date
            treatmentClinic:
              type: string
            treatmentType:
              type: string
            treatmentResult:
              type: string
      familyHasGeneticDisease:
        type: string
        description: YES or NO
      familyGeneticDiseaseList:
        type: array
        items:
          type: object
          properties:
            familyRelationship:
              type: string
            familyOnsetAge:
              type: number
            familyCurrentAge:
              type: number
            familyIllness:
              type: string
            familyAgeDeceased:
              type: number
      healthOtherConditions:
        type: string

  LifeStyleData:
    type: object
    properties:
        consumeAlcohol:
          type: string
          description: YES or NO
        consumeAlcoholConsumption:
          type: number
        consumeAlcoholType:
          type: string
        consumeAlcoholDuration:
          type: number
        alcoholTreatment:
          type: string
          description: YES or NO
        consumeDrugs:
          type: string
          description: YES or NO
        consumeDrugName:
          type: string
        consumeDrugDuration:
          type: number
        smoking:
          type: string
          description: SMOKER or NON-SMOKER
        smokingSticksPerDay:
          type: number
        smokingDuration:
          type: number
        useTobacco:
          type: string
          description: YES or NO
        useTobaccoType:
          type: string
        useTobaccoDailyAmount:
          type: number
        useTobaccoDurationYears:
          type: number
        useTobaccoDateCeased:
          type: string
          format: date
        useTobaccoCeaseReason:
          type: string
        unscheduledFlights:
          type: string
          description: YES or NO
        militaryForce:
          type: string
          description: YES or NO
        dangerousSports:
          type: string
          description: YES or NO
        dangerousSportsDetails:
          type: string
        liveOverseas:
          type: string
          description: YES or NO
        liveOverseaseCountry:
          type: string
        liveOverseasDurationMonths:
          type: number
        liveOverseasReason:
          type: string

  DoctorData:
    type: object
    properties:
      doctorName:
        type: string
      doctorAddress:
        type: string
      doctorAddress2:
        type: string
      doctorAddressCity:
        type: string
      doctorAddressPostcode:
        type: string
      doctorAddressCountry:
        type: string
      doctorLastVisitDate:
        type: string
        format: date
      doctorLastVisitReason:
        type: string
      doctorLastVisitResult:
        type: string

  FemaleHealthData:
    type: object
    properties:
      isPregnant:
        type: string
        description: YES or NO
      pregnantMonths:
        type: number
      pregnantWeeks:
        type: number
      pregnantLastMenstruationDate:
        type: string
        format: date
      pregnancyComplicationsHistory:
        type: string
        description: YES or NO
      hasAbnormalities:
        type: string
        description: YES or NO. Abnornalities of the reproductive system
      hasIrregularityScreening:
        type: string
        description: YES or NO. E.g. of screenings are papsmear, mammography, biopsy etc
      hasBreastLumps:
        type: string
        description: YES or NO
      hasBreastCancer:
        type: string
        description: YES or NO
      hasIrregularMenstruation:
        type: string
        description: YES or NO

  JuvenileData:
    type: object
    properties:
      birthType:
        type: string
        description: list of values e.g. normal, caesar
      assistedByVacuum:
        type: string
        description: YES or NO
      assistedByForceps:
        type: string
        description: YES or NO
      assistedByOthers:
        type: string
        description: Description of assistance other than vacuum or forceps
      reasonForAssistedBirth:
        type: string
      doctorName:
        type: string
      hospital:
        type: string
      pregnancyDurationMonths:
        type: number
      pregnancyDurationWeeks:
        type: number
      birthWeightInKgs:
        type: number
      birthHeightInCms:
        type: number

  DisclosureData:
    allOf:
    - $ref : '#/definitions/BasicPersonalData'
    - $ref : '#/definitions/HealthData'
    - $ref : '#/definitions/FemaleHealthData'
    - $ref : '#/definitions/JuvenileData'
    - $ref : '#/definitions/LifeStyleData'
    - $ref : '#/definitions/DoctorData'
    - $ref : '#/definitions/FamilyHistoryData'
    - properties:
        isReplacementOfPolicy:
          type: string
          description: YES or NO
        hasExistingPolicies:
          type: string
          description: YES or NO
        existingPolicies:
          type: array
          items:
            $ref: '#/definitions/CurrentPolicyInfo'
        hasSubStandardPolicies:
          type: string
          description: YES or NO
        subStandardPolicies:
          type: array
          items:
            $ref: '#/definitions/SubStandardPolicyInfo'
        hasPendingPolicies:
          type: string
          description: YES or NO
        pendingPolicies:
          type: array
          items:
            $ref: '#/definitions/PendingPolicyInfo'
        additionalClarifications:
          type: string
          description: Place for additional clarifications to any of the questions


  # *** Definitions used for some common responses

  SuccessResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: string

  ErrorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      error:
        $ref: '#/definitions/Error'

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string


# ********************* parameters *************************
parameters:
# **************** list query parameters *******************
  queryOffset:
    name: offset
    in: query
    description: Number of records to skip in the result list
    required: false
    type: number
    format: integer
    default: 0

  queryLimit:
    name: limit
    in: query
    description: Limit the number of rows to return
    required: false
    type: number
    format: integer
    default: 100

  querySort:
    name: sort
    in: query
    description: Sorting order. Prefix with '-' for descending order
    required: false
    type: string
    format: string

  queryKeys:
    name: keys
    in: query
    description: Specify multiple rows to fetch ?keys=123,456
    required: false
    type: array
    collectionFormat: csv
    items:
      type: string

  queryPk:
    name: pkList
    in: body
    description: Specify multiple rows to fetch {pkList:[12,13,1555]}
    required: false
    schema:
      type: object
      properties:
        pkList:
          type: array
          items:
            type: number

  queryFilter:
    name: filter
    in: query
    description: Filter criteria to apply to the search. E.g. to specify the search use [ [['name','startsWith','A']] ] to mean look for row where name startsWith Joe, [ [['name','startsWith','Joe'],['age','gt', 30]] ] means name startsWith Joe AND age gt 30. Alternatively, [ [['name','startsWith','A']] , [['name', 'startsWith', 'B']] ], means name startsWith Joe OR name startsWith Mary.
    required: false
    type: array
    items:
      type: array
      items:
        type: array
        minItems: 3
        maxItems: 3
        items:
          type: string

# ************************ responses ****************************

responses:

  Standard400Response:
    description: The request cannot be process due to a client error (submitted data has errors)
    schema:
      $ref: "#/definitions/Error"

  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: "#/definitions/Error"

  SuccessResponse:
    description: Request was successfully processed
    schema:
      $ref: "#/definitions/SuccessResponse"
