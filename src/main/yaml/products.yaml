swagger: '2.0'
info:
  title: eBao Cloud API (Product)
  description: Sales API for the product domain on eBao Cloud
  version: "0.0.4"
# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json

# ---- Security Definitions -----------
securityDefinitions:
  APISecurity:
    type: apiKey
    in: header
    name: Token

paths:

  '/products':
    get:
      summary: Fetch a list of products
      description: Use this endpoint to get a list of available main products given company id and birth date of the insured. The company id and birth date can optionally be supplied to filter the list of available main products. The authenticated user will be used to determine the channel that the intermediary belongs to. The channel is then used to filter the list of available products as well. The company id and the insured's birth date is optional as some client applications allow the user to select the product before determining the client.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - name: productType
          in: query
          required: false
          type: string
          description: Filter products based  on the product type i.e. Main or Rider
        - name: insurerIds
          in: query
          required: false
          description: Filter products that belong to the list of insurers e.g. insurerIds=001,002
          type: array
          items:
            type: string
        - name: birthDate
          in: query
          required: false
          type: string
          description: Filter products where the calculated age (using the birth date) is within the minimum and maximum age limit.
        - name: gender
          in: query
          required: false
          type: string
          description: Filter products which are targeted at specific products. Male or Female

      responses:
        200:
          description: Successful response to fetch a list of products
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductSummary'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}':
    get:
      summary: Fetch a product document.
      description: This end point can be used to fetch the detailed product information. It will include all the product parameters, including the limits. Additionally, the available values for coverage terms, premium payment terms, payment methods are also be included in the product document.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref: '#/parameters/language'
        - $ref: '#/parameters/productId'
      responses:
        200:
          description: Successful response for fetching a product (will full details)
          schema:
            $ref: '#/definitions/Product'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/riders':
    post:
      summary: Fetch the list of attachable riders for the given main product and currently attached riders.
      description: This end point is typically used to generate a list of attachable riders that will be presented as a drop down list in the client application UI. Apart from the main product id, the list of riders that are already attached is also a factor in determining the remaining attachable riders. These can be mutually exclusive riders e.g. "Waiver Plus" rider can no longer be attached if the "Waiver Premium" rider is already attached.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Details of the proposed insurance including the life assureds, main product details and riders already attached
          schema:
            $ref : '#/definitions/ProposedInsurance'

      responses:
        200:
          description: Successful response that returns the list of riders together with their product parameters.
          schema:
            type: array
            items:
              $ref : '#/definitions/Product'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/age':
    get:
      summary: Calculate the age given the product id and birth date
      description: Use this end point to calculate the age. The product id is used to determine the age method which will affect the calculation of the age. Pass in the birth date (YYYY-MM-DD) as a query parameter e.g. GET /products/5212/calculators/age?birthDate=1978-06-22
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: birthDate
          in: query
          required: true
          type: string
          description: The birth date in YYYY-MM-DD format
      responses:
        200:
          description: Successful response and calculated age is returned.
          schema:
            type: object
            properties:
              age:
                type: number
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/premium':
    post:
      summary: Compute the results of the product premium calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the premium for all the products (main and riders) in the proposed insurance. The proposed insurance details must include the proposed life assured.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Proposed insurance details required to calculate the premium, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/costOfInsurance':
    post:
      summary: Compute the results of the product's cost of insurance calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the monthly cost of insurance for all the products in the proposed insurance parameter. The proposed insurance details must include the proposed life assured. The monthly cost of insurance is applicable only to investment products.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: proposedInsurance
          in: body
          required: true
          description: Proposed insurance details required to calculate the cost of insurance, i.e. insureds, main product, and riders
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the monthly cost of insurance (monthlyCostOfInsurance) for the main product and riders
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/illustration':
    post:
      summary: Compute the results of the product illustration calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the fields required for the illustration. The illustrations field are configured when setting up the product in the eBaoTech product factory.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Proposed insurance details required to calculate the illustration fields, i.e. insureds, main product, and riders, topups, withdrawals, fund allocations
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the result of the calculations (illustrationFields) for the main product and riders
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/products/{productId}/calculators/adhoc':
    post:
      summary: Compute the results for the requested list of illustration fields using the product adhoc calculator and the details of the proposed insurance.
      description: Use this end point when the client applications needs fine grain control over which of the illustration fields to trigger the calculation for. The requested list of illustration fields is passed in via the request body parameter. The illustrations field are configured when setting up the product in the eBaoTech product factory.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The parameter that contains the list of illustration fields and the proposed insurance details i.e. insureds, main product, and riders, topups, withdrawals, and fund allocations
          schema:
            type: object
            properties:
              illustrationFields:
                type: array
                items:
                  type: string
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the calculated values (illustrationFields) for the main product and riders
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateInsured':
    post:
      summary: Validate the eligibility of life assured to purchase the product.
      description: This end point is used in certain scenarios, where the product is selected and then followed by the selection of the life assured. Where the life assured is selected first, the available list of products will have been filter for their age and gender requirements. The validateInsured validator will check that the age and gender requirements for the product are met.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: An object that holds the details of the insured person
          schema:
            type: object
            properties:
              name:
                type: string
              birthDate:
                type: string
                format: date
              gender:
                type: string
                description: Male or Female
              smoking:
                type: string
              occupation:
                type: string
                description: The occupation is used to determine the risk class
              riskClass:
                type: string
                description: Can be provided instead of the occupation
      responses:
        200:
          description: Response when the validation has no errors. Returns the complete product document.
          schema:
            $ref: '#/definitions/Product'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateMain':
    post:
      summary: Trigger the validateMain validator to check the main product in the proposed insurance details.
      description: Use this end point to validate the main product details. Typically in the front end client application, the main product details are captured in its own page (section). This end point can be called to validate the input of the main product when the client application navigates away from the page (section).
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds and main product input
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation of the main product has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateRiders':
    post:
      summary: Trigger the validateRiders validator to check the riders input in the proposed insurance details.
      description: Use this end point to validate all the riders attached to the main product for the proposed insurance details supplied in the request body. Checks typically include the minimum and maximum coverage amounts, the age limits of the insured, etc. Typically used when navigating away from the page (section) which captures the riders input.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and riders information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the riders
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateTopups':
    post:
      summary: Trigger the validateTopups validator to check the top-up values in the proposed insurance details.
      description: Use this end point to validate all the topups in the proposed insurance details supplied in the request body. Input of topups are only required for investment policies.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and topups information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the top-ups.
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateWithdrawals':
    post:
      summary: Trigger the validateWithdrawals validator to check the withdrawals in the proposed insurance details.
      description: Use this end point to validate all the withdrawals using the proposed insurance details supplied in the request body. Input of withdrawals are only required for investment policies. Validation include minimum withdrawal amounts and whether the year of the withdrawals are allowed (e.g. withdrawals may not be allowed in the initial 5 years)
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and withdrawals information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the withdrawals
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateFunds':
    post:
      summary: Trigger the validateFunds validator to check the fund allocations in the proposed insurance details in the body parameter.
      description: Use this end point to validate all the fund allocations using the proposed insurance details supplied in the request body. Input of fund allocations are required for investment proposals. Validation include minimum allocation (e.g. min of 10%) and allowed quantums (e.g. allocations must be multiples of 5%)
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and fund allocation information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the fund allocations
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
            $ref: '#/responses/Standard400Response'
        401:
            $ref: '#/responses/Standard401Response'
        404:
            $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/adhoc':
    post:
      summary: Generate the results for the requested list of validators using the adhoc validator and the details of the proposed insurance submitted in the body paramater.
      description: Use this end point to trigger specific validators when the client application requires fine grain control over the validation. The list of validators to trigger must be in the request details as part of the body parameter. An an example, this endpoint can be used to validate the topups and withdrawals, which may be on the same page of the client application e.g. validatorList= ["validateTopups", "validateWithdrawals"]
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: An object containing the validator list and the proposed insurance details, minimally with the insureds, and main product information
          schema:
            type: object
            properties:
              validatorList:
                type: array
                items:
                  type: string
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors for the requested validator list
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
            $ref: '#/responses/Standard400Response'
        401:
            $ref: '#/responses/Standard401Response'
        404:
            $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/templates/illustration':
    get:
      summary: Fetch the illustration template for the product
      description: This end point should be used at design time as it provides an html template on the illustration for the given product. It typically would contain static and dynamic elements. It is meant to provide a sample of how the illustration output should look like and also where the dynamic elements (fields) are on the template. The data for dynamic elements can be fullfilled by the /products/{productId}/illustration end point. The actual output of the illustration can be implemented in any format and it is the decision of the front end application.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response and the template is returned
          schema:
            type: object
            properties:
              message:
                type: string
                description: HTML string containing the template
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/illustration/fields':
    get:
      summary: Fetch the list of illustration calculator fields for the product
      description: This end point should be used at design time to obtain a list of the illustration fields that have been configured for the product. This list can be useful when the client wants to have fine-grain control over which of the illustration fields calculation should be triggered (POST /products/{productId}/calculators/adhoc)
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response that return a list of illustration fields (name and description)
          schema:
            type: array
            items:
              type: object
              properties:
                fieldName:
                  type: string
                description:
                  type: string
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators':
    get:
      summary: Fetch the list of available validators for the product
      description: This end point is expected to be used at design time. It can be used to get a listing of the available validators for the product. This is useful when the client application requires fine grain control over the triggering of the various validators. Triggering of the specific validators can be done using the /products/{productId}/validators/adhoc end point.
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response that return a list of validators that are available for the product
          schema:
            type: array
            items:
              type: object
              properties:
                fieldName:
                  type: string
                description:
                  type: string
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

# ******************************  definitions  ***************************
definitions:


  Fund:
    type: object
    properties:
      fundCode:
        type: string
        description: The code for the fund
      fundName:
        type: string
        description: Name of the fund for investment policies
      targetPremiumPercent:
        type: number
        description: The percentage allocation for target (basic) premium
      adhocPercent:
        type: number
        description: The percentage allocation for ad-hoc topups
      regularTopupPercent:
        type: number
        format: percentage
        description: The percentage allocation for regular topups

  Topup:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  Withdrawal:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  ProductSummary:
    type: object
    properties:
      pk:
        type: string
        description: Unique id for the productId
      doctype:
        type: string
        default: "Product"
      productCode:
        type: string
        description: Code for the product  i.e. internal_id
      productName:
        type: string
      insType:
        type: string
        description: Type of product 1=Main, 2=Rider
      unitFlag:
        type: string
        description: Premium formula calculation type
      sumAssuredLimitList:
        type: array
        items:
          type: object
          properties:
            currencyId:
              type: string
            minAge:
              type: number
            maxAge:
              type: number
            minAmount:
              type: number
            maxAmount:
              type: number
      ageLimitList:
        type: array
        items:
          type: object
          properties:
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            coverageTermType:
              type: string
            coverageTermValue:
              type: number
            paymentTermType:
              type: string
            paymentTermValue:
              type: number
            gender:
              type: string
            benefitLevel:
              type: string
            minInsuredAge:
              type: number
            maxInsuredAge:
              type: number
            minPolicyholderAge:
              type: number
            maxPolicyHolderAge:
              type: number
      premiumLimitList:
        type: array
        items:
          type: object
          properties:
            minAge:
              type: number
            maxAge:
              type: number
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            minInitialPremium:
              type: number
            maxInitialPremium:
              type: number
      benefitLevelList:
        type: array
        items:
          type: object
          properties:
            benefitLevel:
              type: string
            levelDesc:
              type: string
      liabilityList:
        type: array
        items:
          type: object
          properties:
            liabId:
              type: string
            liabType:
              type: string
            liabName:
              type: string
            liabDesc:
              type: string
            displayOrder:
              type: number
            ifDisplayInIllustration:
              type: string
      ageRange:
        type: object
        properties:
          minAge:
            type: number
          minAgeUnit:
            type: string
          maxAge:
            type: number
          maxAgeUnit:
            type: string
      pointToPh:
        type: string
      pointToSecInsured:
        type: string
      smokingIndi:
        type: string
      jobIndi:
        type: string
      socialInsureIndi:
        type: string
      isWaiver:
        type: string
      isAnnuityProduct:
        type: string
      isPackageProduct:
        type: string
      saEqual:
        type: string
        description: Rider SA to be equal to main SA
      attachCompulsory:
        type: string
      insuredNumber:
        type: number
        description: Used to identified the insured in the insured list
      displayPremiumIndi:
        type: string
        description: value should be "Y" or "N"
      displayMonthlyCoi:
        type: string
        description: value should be "Y" or "N"

  ProductCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  ProductPremiumPaymentPeriod:
    type: object
    properties:
      premiumPaymentType:
        type: string
        description: Premium payment type can be duration (e.g. 10 years) or the end age (e.g. until age 65)
      premiumPaymentValue:
        type: number
        description: Depending on the premiumPaymentType, the meaning of this field is either the number of years to pay OR to pay premium until age.

  ProductCurrency:
    type: object
    properties:
      currencyId:
        type: string
      currencyName:
        type: string

  ProductFund:
    type: object
    properties:
      fundCode:
        type: string
      fundName:
        type: string

  ProductPaymentMode:
    type: object
    properties:
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      paymentModeDesc:
        type: string

  ProductPaymentMethod:
    type: object
    properties:
      paymentMode:
        type: string
      paymentMethod:
        type: string
      paymentMethodDesc:
        type: string

  ProductInputFields:
    type: object
    properties:
      fieldName:
        type: string
      dataType:
        type: string
        description: The data type of the input field i.e. String, Date or Number or Enum (for cases where the drop down list obtained from the response from the end point /products/{productId} e.g. coveragePeriods, currency)

  Product:
    allOf:
      - $ref: '#/definitions/ProductSummary'
      - properties:
          coveragePeriods:
            type: array
            items:
              $ref: '#/definitions/ProductCoveragePeriod'
          premiumPaymentPeriods:
            type: array
            items:
              $ref: '#/definitions/ProductPremiumPaymentPeriod'
          currencies:
            type: array
            items:
              $ref: '#/definitions/ProductCurrency'
          funds:
            type: array
            items:
              $ref: '#/definitions/ProductFund'
          paymentModes:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMode'
          paymentMethods:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMethod'
          inputFields:
            type: array
            items:
              $ref: '#/definitions/ProductInputFields'

  Insured:
    type: object
    properties:
      insuredId:
        type: number
      name:
        type: string
        description: Name of the insured
      age:
        type: number
        description: Age of the insured. Required if birthdate is not provided
      birthDate:
        type: string
        format: date
        description: Required if age is not provided
      jobCateId:
        type: number
        description: Risk class - one of the common risk attributes
      occupation:
        type: string
        description: Typically provided to determine the risk class of this person.
      socialInsuranceIndi:
        type: string
      smoking:
        type: string
        description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

  # Products fields that are expected from the clients when they submit their requests
  ProductInput:
    type: object
    properties:
      productId:
        type: string
      productCode:
        type: string
      productName:
        type: string
      lifeAssuredNumber:
        type: integer
        description: index into the insured list i.e. identify person playing role of insured for this product
      sumAssured:
        type: number
      coverageTermType:
        type: string
      coverageTermValue:
        type: number
      premiumPaymentTermType:
        type: string
      premiumPaymentTermValue:
        type: number
      targetPremium:
        type: number
      regularTopup:
        type: number
      commencementDate:
        type: string
        format: date
      packageId:
        type: string
      currency:
        type: string
      benefitLevel:
        type: string
      benefitPlan:
        type: string
      coverageEndAge:
        type: number
      premiumTermEndAge:
        type: number
      saUnit:
        type: number
      extensionFields:
        type: object
        description: extensionFields is an object to hold local customized fields
        additionalProperties:
          type: string
      firstYearPremium:
        type: number
      monthlyCostOfInsurance:
        type: number
      illustrationFields:
        $ref: '#/definitions/IllustrationMap'

  ProposedInsurance:
    properties:
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      startDate:
        type: string
        format: date
      status:
        type: string
        description: valid values are "NEW","PENDING","SIGNED","GENERATED","COMPLETED"
      lastModified:
        type: string
        format: date
      version:
        type: number
        description: The revision number used for optimistic locking
      userName:
        type: string
        description: The user that created this quotation
      mainProduct:
        $ref: '#/definitions/ProductInput'
      riderList:
        type: array
        items:
          $ref: '#/definitions/ProductInput'
      fundList:
        type: array
        items:
          $ref: '#/definitions/Fund'
      topupList:
        type: array
        items:
          $ref: '#/definitions/Topup'
      withdrawalList:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'

  IllustrationField:
    additionalProperties:
      type: number

  IllustrationMap:
    type: object
    readOnly: true
    description: |
      These are a list of dynamic fields that are calculated by the product factory. The result is a nested object. The first level keys represent the year. Against each year is an object will all the illustrations fields and their value e.g. { 1 : {annualPremium: 12000, ....}, 2 : {annualPremium:12000,....}, ..., 99: {} }. Year 0 means it is not a multivalued field, i.e. a single valued field (only 1 value).
    properties:
      0:
        $ref : '#/definitions/IllustrationField'
      1:
        $ref : '#/definitions/IllustrationField'
      2:
        $ref : '#/definitions/IllustrationField'
      99:
        $ref : '#/definitions/IllustrationField'

      # type: object
      # additionalProperties:
      #   type: number


  ValidatorSuccessResult:
    type: object
    properties:
      message:
        description: Simple message to indicate no validation errors e.g. ok
        type: string
        default: "ok"


  # Error:
  #   type: object
  #   properties:
  #     code:
  #       type: integer
  #       format: int32
  #     message:
  #       type: string
  #     fields:
  #       type: string


# ********************* parameters *************************
parameters:

  queryOffset:
    name: offset
    in: query
    description: Number of records to skip in the result list
    required: false
    type: number
    format: integer
    default: 0

  queryLimit:
    name: limit
    in: query
    description: Limit the number of rows to return
    required: false
    type: number
    format: integer
    default: 100

  querySort:
    name: sort
    in: query
    description: Sorting order. Prefix with '-' for descending order
    required: false
    type: string
    format: string

  language:
    name: lang
    in: header
    description: Language to be used in case the response has text data (e.g. error messages)
    type: string
    required: false

  productId:
    name: productId
    in: path
    type: string
    required: true
    description: Unique id for the product


# ************************ responses ****************************

responses:

  Standard400Response:
    description: Response to indicate that the request cannot be processed due to a client error (submitted data has errors).
    schema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

  Standard401Response:
    description: Response when the client is not authorized for this operation.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "Authentication credentials were missing or incorrect"

  Standard404Response:
    description: Response when the document is not found.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "The item does not exist"

  Standard500Response:
    description: Response when there is an unexpected server error.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "An unexpected error has occurred. Please try again later"
