swagger: '2.0'
info:
  title: eBao Cloud API (Product)
  description: Sales API for the product domain on eBao Cloud
  version: "0.0.1"
# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json

paths:

  '/products':
    get:
      summary: Fetch a list of products
      description: Use this endpoint to get a list of available main products given company id and birth date of the insured. The company id and birth date can optionally be supplied to filter the list of available main products. The authenticated user will be used to determine the channel that the intermediary belongs to. The channel is then used to filter the list of available products as well. The company id and the insured's birth date is optional as some client applications allow the user to select the product before determining the client.
      tags:
        - Product
      parameters:
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - name: companyId
          in: query
          required: false
          description: The company id is used to filter the products belonging to the specified list of companies e.g. companyId=001,002
          type: array
          items:
            type: string
        - name: birthDate
          in: query
          required: false
          type: string
          description: The birth date of the insured. This will be used to calculate the age of the insured which is in turn used to filter the available products.

      responses:
        200:
          description: Successful response to fetch a list of main products
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductSummary'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}':
    get:
      summary: Fetch the product document for the given product id.
      description: This end point can be used to fetch the detailed product information. It will include all the product parameters, including the limits. The available values for coverage terms, premium payment terms, payment methods will also be included.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: the id of the main product
          type: string
      responses:
        200:
          description: Successful response to fetch a product (will full details)
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                $ref: '#/definitions/Product'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/riders':
    get:
      summary: Fetch the list of attachable riders for the given main product and already attached riders.
      description: This end point is typically used to generate a list of attachable riders that will be presented as a drop down list in the client application UI. Apart from the main product id, the list of riders that are already attached also determine the remaining attachable riders. These can be mutually exclusive riders e.g. "Waiver Plus" can no longer be attached if "Waiver Premium" is already attached.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          type: string
          required: true
          description: Unique id of the main product
        - name: insuranceDetails
          in: body
          required: true
          description: Details of the insurance including the life assureds, main product details and riders already attached
          schema:
            $ref : '#/definitions/ProposedInsurance'

      responses:
        200:
          description: Successful response that returns the list of riders together with their product parameters.
          schema:
            $ref: '#/definitions/ProductAttachableRidersResponse'
        400:
          description: Response when there are errors in the client input.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/calculators/age':
    get:
      summary: Calculate the age given the product id and birthdate
      description: Use this end point to calculate the age. The product id is used to determine the age method which will affect the calculation of the age. Pass the birth date (YYYY-MM-DD) in as a query parameter.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: the id of the main product
          type: string
        - name: birthDate
          in: query
          required: true
          type: string
          description: the birth date in YYYY-MM-DD format
      responses:
        200:
          description: Successful response calculate the age. Response.value will hold the calculated age
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
              value:
                type: number
        400:
          description: Response when there are errors in the input, e.g. date is not in the required format
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/calculators/premium':
    post:
      summary: Generate the results of the premium calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the premium for all the products in the proposed insurance. The proposed insurance details must include the proposed life assured.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id of the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: Proposed insurance details required to calculate the premium, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response. Contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
          schema:
            $ref: '#/definitions/ProductCalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/calculators/costOfInsurance':
    post:
      summary: Generate the results of the cost of insurance calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the cost of insurance for all the products in the proposed insurance. The proposed insurance details must include the proposed life assured. The cost of insurance is applicable only to investment products.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id of the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: Proposed insurance details required to calculate the cost of insurance, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response. Contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
          schema:
            $ref: '#/definitions/ProductCalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/calculators/illustration':
    post:
      summary: Generate the results of the illustration calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the fields required for the illustration. The illustrations field are configured when setting up the product in the product factory.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id of the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: Proposed insurance details required to calculate the illustration fields, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response. Contains the request input with the addition of the result of the calculations (illustrationFields) for the main product and riders
          schema:
            $ref: '#/definitions/ProductCalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/calculators/adhoc':
    post:
      summary: Generate the results of the adhoc calculator using the details of the proposed insurance and a list of illustration fields to calculate.
      description: Use this end point when the client applications needs fine grain control over which of the illustration fields to calculate for. The list of required illustration fields is passed in via the request body parameter. The illustrations field are configured when setting up the product in the product factory.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id of the main product
          type: string
        - name: params
          in: body
          required: true
          description: The list of illustration fields and the proposed insurance details required to calculate the illustration fields, i.e. insureds, main product, and riders input
          schema:
            type: object
            properties:
              illustrationFields:
                type: array
                items:
                  type: string
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response. Contains the request input with the addition of the calculated values (illustrationFields) for the main product and riders
          schema:
            $ref: '#/definitions/ProductCalculatorResponse'
        400:
          $ref: '#/responses/Standard400Response'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateInsured':
    post:
      summary: Validate the life assured for the given product id
      description: This end point is used in certain scenarios, where the product is selected first and the the life insured is selected. The validate-insured validator will check the age and gender requirements for the product are met.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: insured
          in: body
          required: true
          description: An object that holds the details of the insured person
          schema:
            type: object
            properties:
              name:
                type: string
              birthDate:
                type: string
                format: date
              gender:
                type: string
                description: MALE or FEMALE
              smoking:
                type: string
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateMain':
    post:
      summary: Generate the results of the validate-main validator using the proposed insurance details.
      description: Use this end point to validate the main product for the proposed insurance details supplied in the request body. Typically in the client application, the main product details are captured in its own page (section). This end point can be called to validate the input of the main product when the client application navigates away from the page (section).
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds and main product information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation of the main product has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateRiders':
    post:
      summary: Generate the results of the validate-riders validator using the proposed insurance details.
      description: Use this end point to validate all the riders attached to the main product using the proposed insurance details supplied in the request body. Checks typically include the minimum and maximum coverage amounts, the age limits of the insured, etc. Typically used when navigating away from the page (section) which captures the riders.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and riders information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateTopups':
    post:
      summary: Generate the results of the validate-topups validator using the proposed insurance details.
      description: Use this end point to validate all the topups using the proposed insurance details supplied in the request body. Input of topups are only required in the case of investment policies. Validation include minimum topup amounts.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and topups information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateWithdrawals':
    post:
      summary: Generate the results of the validate-withdrawals validator using the proposed insurance details.
      description: Use this end point to validate all the withdrawals using the proposed insurance details supplied in the request body. Input of withdrawals are only required in the case of investment policies. Validation include minimum withdrawal amounts and whether withdrawals are allowed (e.g. withdrawals may not be allowed in the initial 5 years)
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and withdrawals information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/validateFunds':
    post:
      summary: Generate the results of the validate-funds validator using the proposed insurance details.
      description: Use this end point to validate all the fund allocations using the proposed insurance details supplied in the request body. Input of fund allocations are required for investment proposals. Validation include minimum allocation (e.g. min of 10%) and fixed quantums (e.g. allocations must be multiples of 5%)
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and fund allocation information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  '/products/{productId}/validators/adhoc':
    post:
      summary: Generate the results of the adhoc validator using the proposed insurance details and a list of validators to trigger.
      description: Use this end point to validate when the client application requires fine grain control over which validators need to be run. The list of validators to trigger must be in the request details as part of the request body. An an example, this endpoint can be used to validate the topups and withdrawals, which may be on the same page of the client application e.g. validatorList= [validateTopups, validateWithdrawals]
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique id for the main product
          type: string
        - name: proposedInsurance
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, and main product information
          schema:
            allOf:
              - $ref: '#/definitions/ProposedInsurance'
              - properties:
                  valdatorList:
                    type: array
                    items:
                      type: string
      responses:
        200:
          description: Response when the validation has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResponse'
        400:
          description: The response when there are errors from the validation. Response.errorList will hold a list of the errors.
          schema:
            $ref: '#/definitions/ValidatorErrorResponse'
        404:
          description: Response when the product document is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'


# ******************************  definitions  ***************************
definitions:


  Fund:
    type: object
    properties:
      fundCode:
        type: string
        description: The code for the fund
      fundName:
        type: string
        description: Name of the fund for investment policies
      targetPremiumPercent:
        type: number
        description: The percentage allocation for target (basic) premium
      adhocPercent:
        type: number
        description: The percentage allocation for ad-hoc topups
      regularTopupPercent:
        type: number
        format: percentage
        description: The percentage allocation for regular topups

  Topup:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  Withdrawal:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  ProductSummary:
    type: object
    properties:
      productId:
        type: string
        description: Unique id for the productId
      productName:
        type: string
      insType:
        type: string
        description: Type of product 1=Main, 2=Rider
      unitFlag:
        type: string
        description: Premium formula calculation type
      sumAssuredLimitList:
        type: array
        items:
          type: object
          properties:
            currencyId:
              type: string
            minAge:
              type: number
            maxAge:
              type: number
            minAmount:
              type: number
            maxAmount:
              type: number
      ageLimitList:
        type: array
        items:
          type: object
          properties:
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            coverageTermType:
              type: string
            coverageTermValue:
              type: number
            paymentTermType:
              type: string
            paymentTermValue:
              type: number
            gender:
              type: string
            benefitLevel:
              type: string
            minInsuredAge:
              type: number
            maxInsuredAge:
              type: number
            minPolicyholderAge:
              type: number
            maxPolicyHolderAge:
              type: number
      premiumLimitList:
        type: array
        items:
          type: object
          properties:
            minAge:
              type: number
            maxAge:
              type: number
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            minInitialPremium:
              type: number
            maxInitialPremium:
              type: number
      benefitLevelList:
        type: array
        items:
          type: object
          properties:
            benefitLevel:
              type: string
            levelDesc:
              type: string
      liabilityList:
        type: array
        items:
          type: object
          properties:
            liabId:
              type: string
            liabType:
              type: string
            liabName:
              type: string
            liabDesc:
              type: string
            displayOrder:
              type: number
            ifDisplayInIllustration:
              type: string
      ageRange:
        type: object
        properties:
          minAge:
            type: number
          minAgeUnit:
            type: string
          maxAge:
            type: number
          maxAgeUnit:
            type: string
      pointToPh:
        type: string
      pointToSecInsured:
        type: string
      smokingIndi:
        type: string
      jobIndi:
        type: string
      socialInsureIndi:
        type: string
      isWaiver:
        type: string
      isAnnuityProduct:
        type: string
      isPackageProduct:
        type: string
      saEqual:
        type: string
        description: Rider SA to be equal to main SA
      attachCompulsory:
        type: string
      insuredNumber:
        type: number
        description: Used to identified the insured in the insured list
      firstYearPremium:
        type: number
        description: This should normally be a calculated field from the backend
      displayPremiumIndi:
        type: string
        description: value should be "Y" or "N"
      monthlyCoi:
        type: number
        description: the monthly cost of insurance for ILP products - calculated by the back end
      displayMonthlyCoi:
        type: string
        description: value should be "Y" or "N"
      illustrationFields:
        $ref: '#/definitions/IllustrationMap'

  ProductCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  ProductPremiumPaymentPeriod:
    type: object
    properties:
      premiumPaymentType:
        type: string
        description: Premium payment type can be duration (e.g. 10 years) or the end age (e.g. until age 65)
      premiumPaymentValue:
        type: number
        description: Depending on the premiumPaymentType, the meaning of this field is either the number of years to pay OR to pay premium until age.

  ProductCurrency:
    type: object
    properties:
      currencyId:
        type: string
      currencyName:
        type: string

  ProductFund:
    type: object
    properties:
      fundCode:
        type: string
      fundName:
        type: string

  ProductPaymentMode:
    type: object
    properties:
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      paymentModeDesc:
        type: string

  ProductPaymentMethod:
    type: object
    properties:
      paymentMode:
        type: string
      paymentMethod:
        type: string
      paymentMethodDesc:
        type: string

  ProductInputFields:
    type: object
    properties:
      fieldName:
        type: string
      dataType:
        type: string
        description: The data type of the input field i.e. String, Date or Number or Enum (for cases where the drop down list obtained from the response from the end point /products/{productId} e.g. coveragePeriods, currency)


  Product:
    allOf:
      - $ref: '#/definitions/ProductSummary'
      - properties:
          coveragePeriods:
            type: array
            items:
              $ref: '#/definitions/ProductCoveragePeriod'
          premiumPaymentPeriods:
            type: array
            items:
              $ref: '#/definitions/ProductPremiumPaymentPeriod'
          currencies:
            type: array
            items:
              $ref: '#/definitions/ProductCurrency'
          funds:
            type: array
            items:
              $ref: '#/definitions/ProductFund'
          paymentModes:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMode'
          paymentMethods:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMethod'
          inputFields:
            type: array
            items:
              $ref: '#/definitions/ProductInputFields'

  Insured:
    type: object
    properties:
      insuredId:
        type: number
      name:
        type: string
        description: Name of the insured
      age:
        type: number
        description: Age of the insured. Required if birthdate is not provided
      birthDate:
        type: string
        format: date
        description: Required if age is not provided
      jobCateId:
        type: number
        description: Risk class - one of the common risk attributes
      occupation:
        type: string
        description: Typically provided to determine the risk class of this person.
      socialInsuranceIndi:
        type: string
      smoking:
        type: string
        description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

  ProposedInsurance:
    properties:
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      startDate:
        type: string
        format: date
      status:
        type: string
        description: valid values are "NEW","PENDING","SIGNED","GENERATED","COMPLETED"
      lastModified:
        type: string
        format: date
      version:
        type: number
        description: The revision number used for optimistic locking
      userName:
        type: string
        description: The user that created this quotation
      mainProduct:
        $ref: '#/definitions/ProductSummary'
      riderList:
        type: array
        items:
          $ref: '#/definitions/ProductSummary'
      fundList:
        type: array
        items:
          $ref: '#/definitions/Fund'
      topupList:
        type: array
        items:
          $ref: '#/definitions/Topup'
      withdrawalList:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'

  IllustrationField:
    additionalProperties:
      type: number

  IllustrationMap:
    type: object
    readOnly: true
    description: |
      These are a list of dynamic fields that are calculated by the product factory. The result is a nested object. The first level keys represent the year. Against each year is an object will all the illustrations fields and their value e.g. { 1 : {annualPremium: 12000, ....}, 2 : {annualPremium:12000,....}, ..., 99: {} }. Year 0 means it is not a multivalued field, i.e. a single valued field (only 1 value).
    properties:
      0:
        $ref : '#/definitions/IllustrationField'
      1:
        $ref : '#/definitions/IllustrationField'
      2:
        $ref : '#/definitions/IllustrationField'
      99:
        $ref : '#/definitions/IllustrationField'

      # type: object
      # additionalProperties:
      #   type: number


  ProductAttachableRidersResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: object
        properties:
          riderList:
            type: array
            items:
              $ref: '#/definitions/ProductSummary'

  ProductCalculatorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        $ref: '#/definitions/ProposedInsurance'

  ValidatorSuccessResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      value:
        type: string
        description: Simple message do advise that there are no validation errors

  ValidatorErrorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      errorList:
        type: array
        items:
          type: object
          properties:
            validator:
              description: Name of the validators that emitted the error
              type: string
            errors:
              description: The errors emitted by the validator. Designed to allow for multiple error messages per validator
              type: array
              items:
                type: string

  # *** Definitions used for some common responses

  # SuccessResponse:
  #   type: object
  #   required:
  #     - ok
  #   properties:
  #     ok:
  #       type: boolean
  #     value:
  #       type: string

  ErrorResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
      error:
        $ref: '#/definitions/Error'

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string


# ********************* parameters *************************
parameters:

  queryOffset:
    name: offset
    in: query
    description: Number of records to skip in the result list
    required: false
    type: number
    format: integer
    default: 0

  queryLimit:
    name: limit
    in: query
    description: Limit the number of rows to return
    required: false
    type: number
    format: integer
    default: 100

  querySort:
    name: sort
    in: query
    description: Sorting order. Prefix with '-' for descending order
    required: false
    type: string
    format: string



# ************************ responses ****************************

responses:

  Standard400Response:
    description: The request cannot be process due to a client error (submitted data has errors)
    schema:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
        value:
          $ref: "#/definitions/Error"

  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
        value:
          $ref: "#/definitions/Error"

  # SuccessResponse:
  #   description: Request was successfully processed
  #   schema:
  #     type: object
  #     required:
  #       - ok
  #     properties:
  #       ok:
  #         type: boolean
  #       value:
  #         $ref: "#/definitions/SuccessResponse"
