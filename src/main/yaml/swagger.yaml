swagger: '2.0'
info:
  title: eBao Cloud API (Product & Proposal)
  description: Sales API for the product & proposal domain on eBao Cloud
  version: "0.0.9"
  # version 0.0.5 include insurer and package resources here
  # version 0.0.7 packageId to packageCode
  # version 0.0.8 changes due to sample implementations
  # version 0.0.9 Added support for submission of FirstPartyMedical proposal

# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json

# ---- Security Definitions -----------
securityDefinitions:
  APISecurity:
    type: apiKey
    in: header
    name: Token

paths:

  '/insurers':
    get:
      summary: Fetch a list of insurer documents
      description: |
        This endpoint returns a list of insurers.There are a number of parameters to help with filtering and sorting of the required insurer documents.
      operationId: "getInsurerList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/queryFilter'
      tags:
        - Insurer
      responses:
        200:
          description: Successful response to fetching a list of insurers
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/Insurer'
              totalDocs:
                type: integer
              offset:
                type: integer

        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/insurers/{insurerId}':
    get:
      summary: Fetch an insurer document
      description: This end point is used to get the insurer for the requested insurer id.
      operationId: "getInsurer"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - name: insurerId
          in: path
          required: true
          description: Unique id of the insurer
          type: string
      tags:
        - Insurer
      responses:
        200:
          description: Successful response to fetching an insurer document
          schema:
            $ref: '#/definitions/Insurer'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages':
    get:
      summary: Fetch a list of packages (basic information).
      description: This endpoint returns a list of packages with basic information about the package. There are a number of parameters to help with filtering and sorting of the required documents. When setting the filter parameter, the available keys are "insurer", "productCategory", and "liability".
      operationId: "getPackageList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
        - name : favourite
          in: query
          type: boolean
          allowEmptyValue: true
          required: false
          description: Specific filter to get the favourite packages for the user
        - name: Token
          in: header
          required: false
          type: string

      tags:
        - Package
      responses:
        200:
          description: Successful response to fetching a list of packages.
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/PackageSummary'
              totalDocs:
                type: integer
              offset:
                type: integer
        400:
          $ref: '#/responses/Standard404Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/detailed':
    get:
      summary: Fetch a list of detailed packages (full information).
      description: This endpoint returns a list of packages with complete information about the package. There are a number of parameters to help with filtering and sorting of the required prospects. When setting the filter parameter, the available keys are "insurer", "productCategory", and "liability". This endpoint differs from GET /packages in that it returns packages with full information instead of just basic information. A use case is when multiple packages are selected for further processing.
      operationId: "getDetailedPackageList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
        - name : favourite
          in: query
          type: boolean
          required: false
          allowEmptyValue: true
          description: Specific filter to get the favourite packages for the user. When favourites is set as true, other filters are no longer applicable
        - name: Token
          in: header
          required: false
          type: string


      tags:
        - Package
      responses:
        200:
          description: Successful response to fetching a list of packages (complete information).
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/Package'
              totalDocs:
                type: integer
              offset:
                type: integer
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/{packageCode}':
    get:
      summary: Fetch a package document document (complete information)
      description: Use this end point to fetch a complete package document
      tags:
        - Package
      operationId: "getPackage"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/packageCode'
      responses:
        200:
          description: Successful response when fething a package.
          schema:
            $ref: '#/definitions/Package'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/{packageCode}/products/{productId}':
    get:
      summary: Fetch a package product document
      description: Packages will contain main product and rider products. Use this end point when the client wants to fetch additional information about a package-product (main or rider product) document. The document contains mainly textual information to explain the features of the package product.
      tags:
        - Package
        - Product
      operationId: "getPackageProduct"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/packageCode'
        - $ref: '#/parameters/productId'

      responses:
        200:
          description: Successful response where the package product document is returned.
          schema:
            $ref: '#/definitions/PackageProduct'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/filters':
    get:
      summary: Fetch the list of pre-defined search fields and values for packages.
      description: To support the search function on mobile environments, it is easier to provide a list of pre-defined search values for the search fields. These can then be selected instead of using the keyboard to enter the search value. The predefined values are for insurers, product category, and benefit type fields.
      tags:
        - Package
      operationId: "getPackageFilterList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'

      responses:
        200:
          description: Successful response where the pre-defined search values are returned.
          schema:
            type: object
            properties:
              insurers:
                type: array
                items:
                  type: object
                  properties:
                      insurerId:
                        type: string
                      insurerName:
                        type: string
              productCategories:
                type: array
                items:
                  type: object
                  properties:
                    categoryId:
                      type: string
                    categoryName:
                      type: string
                    # displayOrder:
                    #   type: number
              liabilities:
                type: array
                items:
                  type: object
                  properties:
                    liabId:
                      type: string
                    # benefitName:
                    #   type: string
                    liabDesc:
                      type: string

        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/{packageCode}/favourite':
    post:
      summary: Set a package as favourite
      description: This end point is used to mark a package as a favourite package. It is linked to the currently authenticated user.
      tags:
        - Package
      operationId: "setPackageFavourite"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/packageCode'
        - name: Token
          in: header
          required: false
          type: string
      responses:
        200:
          description: Successful response when setting a favourite package
          schema:
            type: object
            properties:
              userId:
                type: string
              favouritePackages:
                type: array
                description: List of package codes after the update
                items:
                  type: string

        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

    delete:
      summary: Remove a package as favourite
      description: This end point is used to unmark a package as a favourite package. It is linked to the currently authenticated user.
      tags:
        - Package
      operationId: "removePackageFavourite"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/packageCode'
        - name: Token
          in: header
          required: false
          type: string

      responses:
        200:
          description: Successful response when unmarking a favourite package
          schema:
            type: object
            properties:
              userId:
                type: string
              favouritePackages:
                type: array
                description: List of package codes after the update
                items:
                  type: string

        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/packages/{packageCode}/quote':
    get:
      summary: Fetch the initial quote data for a given package
      description: After viewing the package information, the client application proceeds with the quote based on the package. This endpoint will fetch the initial data for a new quote based on the selected package. Based on the package id, the package main product and riders plus additional available riders are included in the initial data. Additionally, the product parameters for all the products (main and riders) also be included in the initial quote data.
      tags:
        - Package
      operationId: "initialQuoteData"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref: '#/parameters/packageCode'
      responses:
        200:
          description: Successful response to a request to fetch the initial data for a new quote. The productList is a list with all the products. The first item is always the main product.
          schema:
            $ref: '#/definitions/NewQuote'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/products':
    get:
      summary: Fetch a list of products
      description: Use this endpoint to get a list of available main products given insurer id and birth date of the insured. The insurer id and birth date can optionally be supplied to filter the list of available main products. The authenticated user will be used to determine the channel that the intermediary belongs to. The channel is then used to filter the list of available products as well. The company id and the insured's birth date is optional as some client applications allow the user to select the product before determining the client.
      tags:
        - Product
      operationId: "getProductList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - name: productType
          in: query
          required: false
          type: string
          description: Filter products based  on the product type i.e. Main or Rider. Allowable values are MAIN or RIDER
        - name: insurerIds
          in: query
          required: false
          description: Filter products that belong to the list of insurers e.g. insurerIds=001,002
          type: array
          collectionFormat: csv
          items:
            type: string

        - name: birthDate
          in: query
          required: false
          type: string
          format: date
          description: Filter products where the calculated age (using the birth date) is within the minimum and maximum age limit.
        - name: salesCategory
          in: query
          required: false
          type: string
          description: Filter products by sales category

      responses:
        200:
          description: Successful response to fetch a list of products
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/ProductSummary'
              totalDocs:
                type: integer
              offset:
                type: integer

  '/products/detailed':
    get:
      summary: Fetch a list of product (full information)
      description: Use this endpoint to get a list of products with their complete information. This end point is similar to GET /products with the exception that the complete product information is returned.
      tags:
        - Product
      operationId: "getDetailedProductList"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/querySort'
        - name: productType
          in: query
          required: false
          type: string
          description: Filter products based  on the product type i.e. Main or Rider. Allowable values are MAIN or RIDER
        - name: insurerIds
          in: query
          required: false
          description: Filter products that belong to the list of insurers e.g. insurerIds=001,002
          type: array
          collectionFormat: csv
          items:
            type: string

        - name: birthDate
          in: query
          required: false
          type: string
          format: date
          description: Filter products where the calculated age (using the birth date) is within the minimum and maximum age limit.
        - name: salesCategory
          in: query
          required: false
          type: string
          description: Filter products by sales category


      responses:
        200:
          description: Successful response to fetch a list of products with full information
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  $ref: '#/definitions/Product'
              totalDocs:
                type: integer
              offset:
                type: integer
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/products/{productId}':
    get:
      summary: Fetch a product document.
      description: This end point can be used to fetch the detailed product information. It will include all the product parameters, including the limits. Additionally, the available values for coverage terms, premium payment terms, payment methods are also be included in the product document.
      tags:
        - Product
      operationId: "getProduct"
      security:
        - APISecurity: []
      parameters:
        - $ref: '#/parameters/language'
        - $ref: '#/parameters/productId'
      responses:
        200:
          description: Successful response for fetching a product (will full details)
          schema:
            $ref: '#/definitions/Product'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/riders':
    post:
      summary: Fetch the list of attachable riders for the given main product and currently attached riders.
      description: This end point is typically used to generate a list of attachable riders that will be presented as a drop down list in the client application UI. Apart from the main product id, the list of riders that are already attached is also a factor in determining the remaining attachable riders. These can be mutually exclusive riders e.g. "Waiver Plus" rider can no longer be attached if the "Waiver Premium" rider is already attached.
      tags:
        - Product
      operationId: "getAttachableRiders"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Details of the proposed insurance including the life assureds, main product details and riders already attached
          schema:
            $ref : '#/definitions/BasicProposedInsurance'

      responses:
        200:
          description: Successful response that returns the list of riders together with their product parameters.
          schema:
            type: array
            items:
              $ref : '#/definitions/RidersResponse'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/illustration':
    post:
      summary: Generate the illustration (plan) data.
      description: This end point is used to generate all the data that is required for presentation the ilustration (plan) to the customer. It differs from /products/{productId}/calculators/illustration as it includes the static product information (writeups) about the products in the plan.
      tags:
        - Product
      operationId: "generateProductIllustration"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Details of the proposed insurance including the life assureds, main product details and riders already attached
          schema:
            $ref : '#/definitions/ProposedInsurance'

      responses:
        200:
          description: Successful response that returns the proposed insurance, the table of benefits, and static plan information about benefits, features, and highlights of the plan.
          schema:
            type: object
            properties:
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
              tableOfBenefits:
                $ref : '#/definitions/TableOfBenefits'
              planInfo:
                $ref : '#/definitions/PlanInfo'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/age':
    get:
      summary: Calculate the age given the product id and birth date
      description: Use this end point to calculate the age. The product id is used to determine the age method which will affect the calculation of the age. Pass in the birth date (YYYY-MM-DD) as a query parameter e.g. GET /products/5212/calculators/age?birthDate=1978-06-22
      tags:
        - Product
      operationId: "calculateAge"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: birthDate
          in: query
          required: true
          type: string
          description: The birth date in YYYY-MM-DD format
      responses:
        200:
          description: Successful response and calculated age is returned.
          schema:
            type: object
            properties:
              age:
                type: number
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/premium':
    post:
      summary: Compute the results of the product premium calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the premium for all the products (main and riders) in the proposed insurance. The proposed insurance details must include the proposed life assured.
      operationId: "calculateProductPremium"
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Proposed insurance details required to calculate the premium, i.e. insureds, main product, and riders input
          schema:
            $ref : '#/definitions/BasicProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the premium amount (firstYearPremium) for the main product and riders
          schema:
            $ref: '#/definitions/BasicProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/costOfInsurance':
    post:
      summary: Compute the results of the product's cost of insurance calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the monthly cost of insurance for all the products in the proposed insurance parameter. The proposed insurance details must include the proposed life assured. The monthly cost of insurance is applicable only to investment products.
      tags:
        - Product
      operationId: "calculateProductCostOnInsurance"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Proposed insurance details required to calculate the cost of insurance, i.e. insureds, main product, and riders
          schema:
            $ref : '#/definitions/BasicProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the monthly cost of insurance (monthlyCostOfInsurance) for the main product and riders
          schema:
            $ref: '#/definitions/BasicProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/illustration':
    post:
      summary: Compute the results of the product illustration calculator using the details of the proposed insurance.
      description: Use this end point to trigger the calculation of the fields required for the illustration. The illustrations field are configured when setting up the product in the eBaoTech product factory. The table of benefits is also available in the response.
      tags:
        - Product
      operationId: "calculateIllustrationFields"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: Proposed insurance details required to calculate the illustration fields, i.e. insureds, main product, and riders, topups, withdrawals, fund allocations
          schema:
            $ref: '#/definitions/ProposedInsurance'

      responses:
        200:
          description: Successful response that contains the request input with the addition of the result of the calculations (illustrationFields) for the main product and riders. Also includes the table of benefits.
          schema:
            type: object
            properties:
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
              tableOfBenefits:
                $ref : '#/definitions/TableOfBenefits'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/products/{productId}/calculators/adhoc':
    post:
      summary: Compute the results for the requested list of illustration fields using the product adhoc calculator and the details of the proposed insurance.
      description: Use this end point when the client applications needs fine grain control over which of the illustration fields to trigger the calculation for. The requested list of illustration fields is passed in via the request body parameter. The illustrations field are configured when setting up the product in the eBaoTech product factory.
      operationId: "calculateAdhocFields"
      tags:
        - Product
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The parameter that contains the list of illustration fields and the proposed insurance details i.e. insureds, main product, and riders, topups, withdrawals, and fund allocations
          schema:
            type: object
            properties:
              illustrationFields:
                type: array
                items:
                  type: string
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Successful response that contains the request input with the addition of the calculated values (illustrationFields) for the main product and riders
          schema:
            $ref: '#/definitions/ProposedInsurance'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateInsured':
    post:
      summary: Validate the eligibility of life assured to purchase the product.
      description: This end point is used in certain scenarios, where the product is selected and then followed by the selection of the life assured. Where the life assured is selected first, the available list of products will have been filter for their age and gender requirements. The validateInsured validator will check that the age and gender requirements for the product are met.
      tags:
        - Product
      operationId: "validateProductInsured"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: An object that holds the details of the insured person
          schema:
            $ref: '#/definitions/Insured'
            # type: object
            # properties:
            #   name:
            #     type: string
            #   birthDate:
            #     type: string
            #     format: date
            #   gender:
            #     type: string
            #     description: Male or Female
            #   smoking:
            #     type: string
            #   occupation:
            #     type: string
            #     description: The occupation is used to determine the risk class
            #   riskClass:
            #     type: string
            #     description: Can be provided instead of the occupation
      responses:
        200:
          description: Response when the validation has no errors. Returns the complete product document.
          schema:
            $ref: '#/definitions/Product'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateMain':
    post:
      summary: Trigger the validateMain validator to check the main product in the proposed insurance details.
      description: Use this end point to validate the main product details. Typically in the front end client application, the main product details are captured in its own page (section). This end point can be called to validate the input of the main product when the client application navigates away from the page (section).
      tags:
        - Product
      operationId: "validateMainProduct"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds and main product input
          schema:
            # $ref: '#/definitions/ProposedInsuranceInput'
            $ref: '#/definitions/BasicProposedInsurance'
      responses:
        200:
          description: Response when the validation of the main product has no errors
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateRiders':
    post:
      summary: Trigger the validateRiders validator to check the riders input in the proposed insurance details.
      description: Use this end point to validate all the riders attached to the main product for the proposed insurance details supplied in the request body. Checks typically include the minimum and maximum coverage amounts, the age limits of the insured, etc. Typically used when navigating away from the page (section) which captures the riders input.
      tags:
        - Product
      operationId: "validateProductRiders"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and riders information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the riders
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateTopups':
    post:
      summary: Trigger the validateTopups validator to check the top-up values in the proposed insurance details.
      description: Use this end point to validate all the topups in the proposed insurance details supplied in the request body. Input of topups are only required for investment policies.
      tags:
        - Product
      operationId: "validateProductTopups"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and topups information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the top-ups.
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateWithdrawals':
    post:
      summary: Trigger the validateWithdrawals validator to check the withdrawals in the proposed insurance details.
      description: Use this end point to validate all the withdrawals using the proposed insurance details supplied in the request body. Input of withdrawals are only required for investment policies. Validation include minimum withdrawal amounts and whether the year of the withdrawals are allowed (e.g. withdrawals may not be allowed in the initial 5 years)
      tags:
        - Product
      operationId: "validateProductWithdrawals"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and withdrawals information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the withdrawals
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
          $ref: '#/responses/Validator400Response'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/validateFunds':
    post:
      summary: Trigger the validateFunds validator to check the fund allocations in the proposed insurance details in the body parameter.
      description: Use this end point to validate all the fund allocations using the proposed insurance details supplied in the request body. Input of fund allocations are required for investment proposals. Validation include minimum allocation (e.g. min of 10%) and allowed quantums (e.g. allocations must be multiples of 5%)
      tags:
        - Product
      operationId: "validateProductFunds"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: The proposed insurance details, minimally with the insureds, main product, and fund allocation information
          schema:
            $ref: '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors in the fund allocations
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
            $ref: '#/responses/Validator400Response'
        401:
            $ref: '#/responses/Standard401Response'
        404:
            $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators/adhoc':
    post:
      summary: Generate the results for the requested list of validators using the adhoc validator and the details of the proposed insurance submitted in the body paramater.
      description: Use this end point to trigger specific validators when the client application requires fine grain control over the validation. The list of validators to trigger must be in the request details as part of the body parameter. An an example, this endpoint can be used to validate the topups and withdrawals, which may be on the same page of the client application e.g. validatorList= ["validateTopups", "validateWithdrawals"]
      tags:
        - Product
      operationId: "validateAdhocProductValidators"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'
        - name: bodyParam
          in: body
          required: true
          description: An object containing the validator list and the proposed insurance details, minimally with the insureds, and main product information
          schema:
            type: object
            properties:
              validatorList:
                type: array
                items:
                  type: string
              proposedInsurance:
                $ref : '#/definitions/ProposedInsurance'
      responses:
        200:
          description: Response when the validation has no errors for the requested validator list
          schema:
            $ref: '#/definitions/ValidatorSuccessResult'
        400:
            $ref: '#/responses/Validator400Response'
        401:
            $ref: '#/responses/Standard401Response'
        404:
            $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/templates/illustration':
    get:
      summary: Fetch the illustration template for the product
      description: This end point should be used at design time as it provides an html template on the illustration for the given product. It typically would contain static and dynamic elements. It is meant to provide a sample of how the illustration output should look like and also where the dynamic elements (fields) are on the template. The data for dynamic elements can be fullfilled by the /products/{productId}/illustration end point. The actual output of the illustration can be implemented in any format and it is the decision of the front end application.
      tags:
        - Product
      operationId: "getProductIllustrationTemplate"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response and the template is returned
          schema:
            type: object
            properties:
              template:
                type: string
                description: HTML string containing the template
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/calculators/illustration/fields':
    get:
      summary: Fetch the list of illustration calculator fields for the product
      description: This end point should be used at design time to obtain a list of the illustration fields that have been configured for the product. This list can be useful when the client wants to have fine-grain control over which of the illustration fields calculation should be triggered (POST /products/{productId}/calculators/adhoc)
      tags:
        - Product
      operationId: "getIllustrationCalculatorFields"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response that return a list of illustration fields (name)
          schema:
            type: array
            items:
              type: string
              # type: object
              # properties:
              #   fieldName:
              #     type: string
              #   description:
              #     type: string
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/products/{productId}/validators':
    get:
      summary: Fetch the list of available validators for the product
      description: This end point is expected to be used at design time. It can be used to get a listing of the available validators for the product. This is useful when the client application requires fine grain control over the triggering of the various validators. Triggering of the specific validators can be done using the /products/{productId}/validators/adhoc end point.
      tags:
        - Product
      operationId: "getProductValidators"
      security:
        - APISecurity: []
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/productId'

      responses:
        200:
          description: Successful response that return a list of validators that are available for the product
          schema:
            type: array
            items:
              type: string
              # fieldName:
                # type: string
              # type: object
              # properties:
              #   fieldName:
                  # type: string
                # description:
                #   type: string
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/submissions/firstPartyMedicalProposal':
    get:
      summary: Fetch a list of direct first party medical proposal submissions
      description: Use this end point to fetch all the direct first party medical proposal submissions. When filtering the required rows, the available keys are pk, submissionDate, submissionRefNo, submissionChannel,tenantCode, status, and decision
      parameters:
        - $ref : '#/parameters/language'
        - $ref : '#/parameters/queryOffset'
        - $ref : '#/parameters/queryLimit'
        - $ref : '#/parameters/queryKeys'
        - $ref : '#/parameters/querySort'
        - $ref : '#/parameters/queryFilter'
        - $ref:  '#/parameters/Token'
      tags:
        - Submission
      operationId: "fetchFirstPartyMedicalSubmissionList"
      responses:
        200:
          description: Successful response which returns a list of proposal submissions.
          schema:
            type: object
            properties:
              totalDocs:
                type: number
              offset:
                type: number
              docs:
                type: array
                items:
                  $ref: '#/definitions/SubmissionSummary'
        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

    post:
      summary: Create a new direct first party medical proposal submission document (containing proposal details)
      description: This end point is used for the submission of a proposal. This end point is useful when proposals are not persisted prior to submission.
      tags:
        - Submission
      parameters:
        - $ref: '#/parameters/language'
        - name: bodyParam
          in : body
          required: true
          description: The submission document containing the proposal
          schema:
            $ref: '#/definitions/FirstPartyMedicalSubmission'
        - $ref:  '#/parameters/Token'
        - $ref: '#/parameters/TenantCode'
      operationId: "createFirstPartyMedicalSubmission"
      responses:
        200:
          description: Successful response to create a new proposal submission. Returns the new submission document.
          schema:
            $ref: '#/definitions/FirstPartyMedicalSubmission'
        401:
          $ref: '#/responses/Standard401Response'
        # 404:
        #   $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'

  '/submissions/firstPartyMedical/{submissionId}':
    get:
      summary: Fetch a proposal submission document
      description: Use this end-point to fetch a proposal submissions. This will fetch the full document including the proposal data, and the submission status.
      parameters:
        - $ref : '#/parameters/language'
        - name : submissionId
          in: path
          required: true
          type: string
          description: Unique id for the submission
        - $ref:  '#/parameters/Token'
      tags:
        - Submission
      operationId: "fetchFirstPartyMedicalSubmission"
      responses:
        200:
          description: Successful response which returns the submission document
          schema:
            $ref: '#/definitions/FirstPartyMedicalSubmission'
        401:
          $ref: '#/responses/Standard401Response'
        404:
          $ref: '#/responses/Standard404Response'
        500:
          $ref: '#/responses/Standard500Response'


  '/proposals/template/codeTables':
    get:
      summary: Fetch a list of codeTables (with the valid codes and values) used in the proposal application.
      description: This end point should be used at design time to get the list of codeTables with the valid values that can be used for the fields with drop down values in the proposal form.
      tags:
        - Proposal
      parameters:
        - $ref : '#/parameters/language'

      operationId: "fetchCodeTableList"
      responses:
        200:
          description: Successful response which contains the names of the code tables
          schema:
            type: array
            items:
              type: object
              properties:
                codeTableId:
                  type: string
                codeTableDescription:
                  type: string
                codeTableData:
                  type: array
                  items:
                    type: object
                    properties:
                      code:
                        type: string
                      textValue:
                        type: string
                      textValue2:
                        type: string
                      numberValue:
                        type: number
                      dateValue:
                        type: string
                        format: date

        400:
          $ref: '#/responses/Standard400Response'
        401:
          $ref: '#/responses/Standard401Response'
        500:
          $ref: '#/responses/Standard500Response'

# ******************************  definitions  ***************************
definitions:

  Insurer:
    type: object
    properties:
      pk:
        type: string
        description: Unique id for the insurer
      doctype:
        type: string
        default: "Insurer"
      insurerName:
        type: string
        description: Name of the insurer
      shortName:
        type: string
        description: Insurer short Name
      insurerDescription:
        type: string
        description: Description about the insurer
      logo:
        type: string
        description: Reference to the image to use for the insurer logo (e.g. zurich.png)
      telephone:
        type: string
        description: Phone number for the insurer
      url:
        type: string
        description: Url for the insurer website
      underwritingRule:
        type: string
        description: Insurers write up on underwriting rules
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: string

  # summary information about a package product

  PackageProductSummary:
    type: object
    properties:
      pk:
        type: string
        description: Unique id to identify the product
      doctype:
        type: string
        default: "PackageProduct"
      version:
        type: string
      packageProductName:
        type: string
        description: Name of the product
      insType:
        type: string
        description: To indicate if main or rider 1=Main, 2=Rider
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: string

  PackageProduct:
    allOf:
      - $ref: '#/definitions/PackageProductSummary'
      - properties:
          liabilityList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: integer
                itemDescription:
                  type: string
                  description: Description about the liability
          exclusionList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: integer
                itemDescription:
                  type: string
                  description: Description about the liability
          underwritingRuleList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: integer
                itemDescription:
                  type: string
          caseInfoList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: number
                  description: For the ordering of the case studies
                itemDescription:
                  type: string

          diseaseList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: number
                  description: For the ordering of the case studies
                itemDescription:
                  type: string
          clauseList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: number
                  description: For the ordering of the case studies
                itemDescription:
                  type: string
          fundAndChargesList:
            type: array
            items:
              type: object
              properties:
                displayOrder:
                  type: number
                  description: For the ordering of the case studies
                itemDescription:
                  type: string

          liabilityDiseaseInfo:
            type: array
            items:
              type: object
              properties:
                liabId:
                  type: integer
                needDiseaseIndi:
                  type: string
                  description: Valid values are Y or N
                diseaseDescription:
                  type: string
          remark:
            type: string
            description: Additional remarks about this product


  PackageLiability:
    type: object
    properties:
      liabId:
        type: string
        description: Unique id for the liability
      liabType:
        type: string
        description: Type of liability (category)
      liabDesc:
        type: string
        description: The description for the liability
      displayOrder:
        type: number
        description: Controls the ordering when displaying the liability information.

  # PackageBenefit:
  #   type: object
  #   properties:
  #     benefitId:
  #       type: string
  #       description: Unique id of the benefit
  #     benefitName:
  #       type: string
  #       description: Name of the benefit
  #     benefitDesc:
  #       type: string
  #       description: Description about the benefit
  #     displayOrder:
  #       type: number
  #       description: Controls the ordering when displaying the benefit

  PackageCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  PackagePremiumPaymentTerm:
    type: object
    properties:
      termType:
        type: string
        description: Either duration or end age i.e. pay premium for 20 years (duration) or pay premium premium until age 55 (end age)
      termValue:
        type: number
        description: Number representing the duration or end age depending on termType

  PackageProductFeature:
    type: object
    properties:
      featureId:
        type: string
        description: Unique id for the feature
      featurePic:
        type: string
        description: Reference to the image to highlight the feature
      displayOrder:
        type: number
        description: Ordering information when displaying the feature

  PackageHighlight:
    type: object
    properties:
      highLightId:
        type: string
        description: Unique id for the hightlight
      description:
        type: string
        description: Description of the package hightligh
      displayOrder:
        type: number
        description: Ordering information

  PackageAttachableRider:
    type: object
    properties:
      productId:
        type: integer
        description: Either the main product or a rider (in the case of dependent riders) i.e. the primary product
      attachId:
        type: integer
        description: The attachable rider i.e. the secondary product.
      compulsory:
        type: string
        description: Flag to indicate if this relationship is mandatory. Can be used to represent mandatory riders that must be attached to the main product
      attachedProductName:
        type: string
        description: Name of the attachable rider

  PackageSummary:
    type: object
    properties:
      packageId:
        type: integer
        description: Unique id for the package
      packageName:
        type: string
        description: Name of the package
      examplePremium:
        type: number
        description: Typical premium
      favourite:
        type: boolean
        description: Flag to mark the package as a favourite of the user
      isNew:
        type: boolean
        description: New package or otherwise
      productCategory:
        type: string
        description: Product category e.g. Whole Life, Endowment, Health, Accident
      ageLimit:
        type: object
        properties:
          minAge:
            type: number
            description: Minimum age of life assured
          minAgeUnit:
            type: string
            description: The unit for the mininum age (e.g. years, days)
          maxAge:
            type: number
            description: Max age of the life assured
          maxAgeUnit:
            type: string
            description: The unit for the maximum age
      visitNumber:
        type: number
        description: Count of the number of times the user has viewed this package
      tagList:
        type: array
        items:
          type: object
          properties:
            tagId:
              type: string
              description: Unique id for the tag
            tagName:
              type: string
              description: Name for the tag
            tagPic:
              type: string
              description: The reference for the picture to load
      coveragePeriods:
        type: array
        items:
          $ref: "#/definitions/PackageCoveragePeriod"
      highlights:
        type: array
        items:
          $ref: '#/definitions/PackageHighlight'

      liabilities:
        type: array
        items:
          $ref: "#/definitions/PackageLiability"

      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: object
          additionalProperties:
            type: string

  Package:
    allOf:
      - $ref: '#/definitions/PackageSummary'
      - properties:
          amountLimit:
            type: object
            description: Sum assured Limit
            properties:
              minAmount:
                type: number
                description: Mininum amount
              maxAmount:
                type: number
                description: Maximum amount
              currency:
                type: string
                description: Currency of the limit
          insurer:
            $ref: '#/definitions/Insurer'
          premiumPaymentTerms:
            type: array
            items:
              $ref: '#/definitions/PackagePremiumPaymentTerm'
          features:
            type: array
            items:
              $ref: '#/definitions/PackageProductFeature'
          # mainProduct:
          #   $ref: "#/definitions/PackageProductSummary"
          productList:
            type: array
            items:
              $ref: '#/definitions/PackageProductSummary'
          attachableRiders:
            type: array
            items:
              $ref: '#/definitions/PackageAttachableRider'

          # age range already in the PackageSummary

          # ageRange:
          #   type: object
          #   properties:
          #     minAge:
          #       type: number
          #       description: Minimum age of life assured
          #     minAgeUnit:
          #       type: string
          #       description: The unit for the mininum age (e.g. years, months)
          #     maxAge:
          #       type: number
          #       description: Max age of the life assured
          #     maxAgeUnit:
          #       type: string
          #       description: The unit for the maximum age

          # Does not seem used  -- remove first


  # definition for object when asking for a new quote

  NewQuote:
    type: object
    properties:
      packageId:
        type: integer
      packageName:
        type: string
      insurer:
        $ref: '#/definitions/Insurer'
      productList:
        type: array
        items:
          $ref: '#/definitions/Product'
      #
      # not sure how to use this valueAdded & Insurance Spirit thing
      # Need to get some understanding on this
      # valueAddedList:
      #   type: array
      #   items:
      #     type: object
      #     properties:
      #       valueAddedId:
      #         type: string
      #       valueAddedName:
      #         type: string
      #       valueAddedDesc:
      #         type: string
      #       valueAddedCode:
      #         type: string
      #       valueAddedPic:
      #         type: string
      #       displayOrder:
      #         type: number
      # insuranceSpiritList:
      #   type: array
      #   items:
      #     type: object
      #     properties:
      #       spiritId:
      #         type: string
      #       spiritName:
      #         type: string
      #       defaultSpirit:
      #         type: string
      suggestedReason:
        type: string
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: object
          additionalProperties:
            type: string

  Fund:
    type: object
    properties:
      fundCode:
        type: string
        description: The code for the fund
      fundName:
        type: string
        description: Name of the fund for investment policies
      allocation:
        type: number
        format: percentage
        description: Use this allocation percentage if the allocation for the targetPremium, adhoc topup, and regular topup percentages are the same
      targetPremiumPercent:
        type: number
        format: percentage
        description: The  allocation percentage for target (basic) premium. Value should be between 0 and 100
      adhocPercent:
        type: number
        format: percentage
        description: The allocation percentage for ad-hoc topups. Value should be between 0 and 100
      regularTopupPercent:
        type: number
        format: percentage
        description: The  allocation percentage for regular topups. Value should be between 0 and 100

  Topup:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  Withdrawal:
    type: object
    properties:
      year:
        type: number
      amount:
        type: number

  RidersResponse:
    allOf:
      - $ref: '#/definitions/ProductSummary'
      - properties:
          saEqual:
            type: string
          attachCompulsory:
            type: string


  ProductSummary:
    type: object
    properties:
      pk:
        type: string
        description: Unique id for the productId
      doctype:
        type: string
        default: "Product"
      productCode:
        type: string
        description: Code for the product  i.e. internal_id
      productName:
        type: string
      insType:
        type: string
        description: Type of product 1=Main, 2=Rider
      unitFlag:
        type: string
        description: Premium formula calculation type
      salesCategory:
        type: string
      insurer:
        $ref: '#/definitions/Insurer'

      sumAssuredLimitList:
        type: array
        items:
          type: object
          properties:
            currencyId:
              type: string
            minAge:
              type: number
            maxAge:
              type: number
            minAmount:
              type: number
            maxAmount:
              type: number
      ageLimitList:
        type: array
        items:
          type: object
          properties:
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            coverageTermType:
              type: string
            coverageTermValue:
              type: number
            paymentTermType:
              type: string
            paymentTermValue:
              type: number
            gender:
              type: string
            benefitLevel:
              type: string
            minInsuredAgeUnit:
              type: string
            minInsuredAge:
              type: number
            maxInsuredAge:
              type: number
            minPolicyholderAge:
              type: number
            maxPolicyHolderAge:
              type: number
      premiumLimitList:
        type: array
        items:
          type: object
          properties:
            minAge:
              type: number
            maxAge:
              type: number
            premiumTermType:
              type: string
            premiumTermValue:
              type: number
            minInitialPremium:
              type: number
            maxInitialPremium:
              type: number
      benefitLevelList:
        type: array
        items:
          type: object
          properties:
            benefitLevel:
              type: string
            levelDesc:
              type: string

      liabilityList:
        type: array
        items:
          type: object
          properties:
            liabId:
              type: string
            liabType:
              type: string
            liabName:
              type: string
            liabDesc:
              type: string
            displayOrder:
              type: number
            ifDisplayInIllustration:
              type: string
      ageRange:
        type: object
        properties:
          minAge:
            type: number
          minAgeUnit:
            type: string
          maxAge:
            type: number
          maxAgeUnit:
            type: string
      pointToPh:
        type: string
        description: Flag to indicate if product applies to policyholder
      pointToSecInsured:
        type: string
        description: Flag to indicate if product applies to second insured
      smokingIndi:
        type: string
        description: Flag to indicate if smoking status is a risk attribute
      jobIndi:
        type: string
        description: Flag to indicate if occupation is a risk attribute
      socialInsureIndi:
        type: string
      isWaiver:
        type: string
        description: Flag to indicate if this is a waiver product
      isAnnuityProduct:
        type: string
        description: Flag to indicate if this is an annuity product
      isPackageProduct:
        type: string
        description: Flag to indicate if this is a package product
      # saEqual:
      #   type: string
      #   description: Rider SA can be equal to main SA
      # attachCompulsory:
      #   type: string
      displayPremiumIndi:
        type: string
        description: value should be "Y" or "N"
      # displayMonthlyCoi:
      #   type: string
      #   description: value should be "Y" or "N"
      pointToSpouse:
        type: string
        description: Flag to indicate if product applies to spouse
      inputFields:
        type: array
        items:
          $ref: '#/definitions/ProductInputFields'


  ProductCoveragePeriod:
    type: object
    properties:
      coverageType:
        type: string
        description: Coverage type is usually in duration (e.g. 10 years) or the end age (e.g. until age 65)
      coverageValue:
        type: number
        description: Depending on the coverageType, the meaning of this field is either the number of years to cover OR the coverage end age.

  ProductPremiumPaymentPeriod:
    type: object
    properties:
      termType:
        type: string
        description: Premium payment type can be duration (e.g. 10 years) or the end age (e.g. until age 65)
      termValue:
        type: number
        description: Depending on the premiumPaymentType, the meaning of this field is either the number of years to pay OR to pay premium until age.

  ProductCurrency:
    type: object
    properties:
      currencyId:
        type: string
      currencyName:
        type: string

  ProductFund:
    type: object
    properties:
      fundCode:
        type: string
      fundName:
        type: string

  ProductPaymentMode:
    type: object
    properties:
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      paymentModeDesc:
        type: string

  ProductPaymentMethod:
    type: object
    properties:
      paymentMode:
        type: string
      paymentMethod:
        type: string
      paymentMethodDesc:
        type: string

  ProductInputFields:
    type: object
    properties:
      fieldName:
        type: string
      dataType:
        type: string
        description: The data type of the input field i.e. String, Date or Number or Enum (for cases where the drop down list obtained from the response from the end point /products/{productId} e.g. coveragePeriods, currency)

  Product:
    allOf:
      - $ref: '#/definitions/ProductSummary'
      - properties:
          coveragePeriods:
            type: array
            items:
              $ref: '#/definitions/ProductCoveragePeriod'
          premiumPaymentPeriods:
            type: array
            items:
              $ref: '#/definitions/ProductPremiumPaymentPeriod'
          currencies:
            type: array
            items:
              $ref: '#/definitions/ProductCurrency'
          funds:
            type: array
            items:
              $ref: '#/definitions/ProductFund'
          paymentModes:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMode'
          paymentMethods:
            type: array
            items:
              $ref: '#/definitions/ProductPaymentMethod'

  Insured:
    type: object
    properties:
      insuredId:
        type: number
      name:
        type: string
        description: Name of the insured
      age:
        type: number
        description: Age of the insured. Required if birthdate is not provided
      birthDate:
        type: string
        format: date
        description: Required if age is not provided
      jobCateId:
        type: number
        description: Risk class - one of the common risk attributes
      occupation:
        type: string
        description: Typically provided to determine the risk class of this person.
      socialInsuranceIndi:
        type: string
      gender:
        type: string
        description: MALE or FEMALE
      smoking:
        type: string
        description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

  # Products fields that are expected from the clients when they submit their requests
  ProductInput:
    type: object
    properties:
      productId:
        type: integer
      productCode:
        type: string
      productName:
        type: string
      packageId:
        type: integer
      lifeAssuredNumber:
        type: integer
        description: index into the insured list i.e. identify person playing role of insured for this product
      sumAssured:
        type: number
      coverageTermType:
        type: string
        description: Valid values 0=NA, 1=Cover Whole Life, 2=Cover for certain years, 3=Cover up to certain age, 4=Cover for certain months
      coverageTermValue:
        type: number
      premiumPaymentTermType:
        type: string
      premiumPaymentTermValue:
        type: number
      targetPremium:
        type: number
      regularTopup:
        type: number
      commencementDate:
        type: string
        format: date
      currency:
        type: string
      benefitLevel:
        type: string
      # benefitPlan:
      #   type: string
      # coverageEndAge:
      #   type: number
      # premiumTermEndAge:
      #   type: number
      saUnit:
        type: number
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single
      firstYearPremium:
        type: number
      monthlyCostOfInsurance:
        type: number
      premiumAmount:
        type: number
        description: Premium amount taking into account the payment frequency (mode)

      illustrationFields:
        $ref: '#/definitions/IllustrationMap'
      extensionFields:
        type: object
        description: extensionFields is an object to hold local customized fields
        additionalProperties:
          type: string

  BasicProductInput:
    type: object
    properties:
      productId:
        type: integer
      productCode:
        type: string
      productName:
        type: string
      lifeAssuredNumber:
        type: integer
        description: index into the insured list i.e. identify person playing role of insured for this product
      sumAssured:
        type: number
      coverageTermType:
        type: string
        description: Valid values 0=NA, 1=Cover Whole Life, 2=Cover for certain years, 3=Cover up to certain age, 4=Cover for certain months
      coverageTermValue:
        type: number
      premiumPaymentTermType:
        type: string
      premiumPaymentTermValue:
        type: number
      targetPremium:
        type: number
      regularTopup:
        type: number
      currency:
        type: string
      benefitLevel:
        type: string
      saUnit:
        type: number
      paymentMode:
        type: string
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single

      firstYearPremium:
        type: number
      monthlyCostOfInsurance:
        type: number
      premiumAmount:
        type: number
        description: Premium amount taking into account the payment frequency (mode)
      illustrationFields:
        $ref: '#/definitions/IllustrationMap'

  # Fund:
  #   type: object
  #   properties:
  #     fundCode:
  #       type: string
  #       description: The code for the fund
  #     fundName:
  #       type: string
  #       description: Name of the fund for investment policies
  #     targetPremiumPercent:
  #       type: number
  #       description: The percentage allocation for target (basic) premium
  #     adhocPercent:
  #       type: number
  #       description: The percentage allocation for ad-hoc topups
  #     regularTopupPercent:
  #       type: number
  #       format: percentage
  #       description: The percentage allocation for regular topups

  # Topup:
  #   type: object
  #   properties:
  #     year:
  #       type: number
  #     amount:
  #       type: number

  # Withdrawal:
  #   type: object
  #   properties:
  #     year:
  #       type: number
  #     amount:
  #       type: number

  BasicProposedInsurance:
    properties:
      startDate:
        type: string
        format: date
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      productList:
        type: array
        description: First item in the array will be the main product
        items:
          $ref: '#/definitions/BasicProductInput'

  # ProposedInsuranceInput:
  #   properties:
  #     startDate:
  #       type: string
  #       format: date
  #     insuredList:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Insured'
  #     productList:
  #       type: array
  #       description: First item in the array will be the main product
  #       items:
  #         $ref: '#/definitions/ProductInput'
  #     fundList:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Fund'
  #     topupList:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Topup'
  #     withdrawalList:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Withdrawal'

  ProposedInsurance:
    properties:
      insuredList:
        type: array
        items:
          $ref: '#/definitions/Insured'
      startDate:
        type: string
        format: date
      # status:
      #   type: string
      #   description: valid values are "NEW","PENDING","SIGNED","GENERATED","COMPLETED"
      # lastModified:
      #   type: string
      #   format: date
      # version:
      #   type: number
      #   description: The revision number used for optimistic locking
      # userName:
      #   type: string
      #   description: The user that created this quotation
      # mainProduct:
      #   $ref: '#/definitions/ProductInput'
      # riderList:
      productList:
        type: array
        description: First item in the array will be the main product
        items:
          $ref: '#/definitions/ProductInput'
      fundList:
        type: array
        items:
          $ref: '#/definitions/Fund'
      topupList:
        type: array
        items:
          $ref: '#/definitions/Topup'
      withdrawalList:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'

  IllustrationField:
    additionalProperties:
      type: number

  IllustrationMap:
    type: object
    description: |
      These are a list of dynamic fields that are calculated by the product factory. The result is a nested object. The first level keys represent the year. Against each year is an object will all the illustrations fields and their value e.g. { 1 : {annualPremium: 12000, ....}, 2 : {annualPremium:12000,....}, ..., 99: {} }. Year 0 means it is not a multivalued field, i.e. a single valued field (only 1 value).
    properties:
      0:
        $ref : '#/definitions/IllustrationField'
      1:
        $ref : '#/definitions/IllustrationField'
      2:
        $ref : '#/definitions/IllustrationField'
      99:
        $ref : '#/definitions/IllustrationField'

      # type: object
      # additionalProperties:
      #   type: number

  TableOfBenefits:
    type: object
    properties:
      columnTitles:
        type: array
        items:
          type: object
          properties:
            columnNo:
              type: integer
            columnTitle:
              type: string
      tableData:
        type: array
        items:
          type: object
          properties:
            columnNo:
              type: integer
            value:
              type: number

  # PlanHighlight:
  #   allOf:
  #     - $ref: '#/definitions/PackageHighlight'

  # PlanFeature:
  #   allOf:
  #   - $ref: '#/definitions/PackageProductFeature'

  # PlanValueAdd:
  #   type: object
  #   properties:
  #     valueAddedId:
  #       type: string
  #     valueAddedName:
  #       type: string
  #     valueAddedDesc:
  #       type: string
  #     valueAddedCode:
  #       type: string
  #     valueAddedPic:
  #       type: string
  #     displayOrder:
  #       type: number

  PlanInfo:
    type: object
    properties:
      showValueAdded:
        type: string
      insuranceSpirit:
        type: integer
      valueAddedIdList:
        type: array
        items:
          type: integer
      insurer:
        $ref: '#/definitions/Insurer'
      planInsuranceSpiritList:
        type: array
        items:
          type: object
          properties:
            spiritId:
              type: integer
            spiritName:
              type: string
            displayOrder:
              type: integer
            spiritDescription:
              type: string
            spiritPic:
              type: string
      planLiabilityList:
        type: object
        properties:
          multiProduct:
            type: boolean
          liabCategoryList:
            type: array
            items:
              type: object
              properties:
                categoryId:
                  type: string
                categoryName:
                  type: string
                simpleLiabList:
                  type: array
                  items:
                    type: object
                    properties:
                      packageId:
                        type: integer
                      productid:
                        type: integer
                      liabId:
                        type: string
                      liabName:
                        type: string
                      liabDisplayName:
                        type: string
                      libDescQuote:
                        type: string
                      libCalcType:
                        type: string
                      libCalcMethod:
                        type: string
                      liabAmount:
                        type: number
                      needDiseaseIndi:
                        type: string
                      totalAmount:
                        type: number
                      libDesc:
                        type: string
                      liabList:
                        type: string
                      categoryName:
                        type: string
      planHighlightList:
        type: array
        items:
          # $ref: '#/definitions/PlanHighlight'
          $ref : '#/definitions/PackageHighlight'
      planFeatureList:
        type: array
        items:
          # $ref: '#/definitions/PlanFeature'
          $ref: '#/definitions/PackageProductFeature'
      planValueAddedList:
        type: array
        items:
          # $ref: '#/definitions/PlanValueAdd'
          type: object
          properties:
            valueAddedId:
              type: string
            valueAddedName:
              type: string
            valueAddedDesc:
              type: string
            valueAddedCode:
              type: string
            valueAddedPic:
              type: string
            displayOrder:
              type: number



  ValidatorSuccessResult:
    type: object
    properties:
      message:
        description: Simple message to indicate no validation errors e.g. ok
        type: string
        default: "ok"


  # Error:
  #   type: object
  #   properties:
  #     code:
  #       type: integer
  #       format: int32
  #     message:
  #       type: string
  #     fields:
  #       type: string

  # ----------- definitions for submissions & proposal

  FirstPartyMedicalProposal:
    type: object
    required:
      - proposalType
      - proposerName
      - policyholderSection
      - proposedInsuranceSection
    properties:
      proposalType:
        type: string
        description: e.g. FirstPartyTerm, FirstPartyMedical etc
      policyNumber:
        type: string
        description: Policy number assigned by the insurer to this proposal. Should be omitted when by the client.
      proposerName:
        type: string
        description: Should be the same as the policyholder full name
      submissionChannel:
        type: string
        description: Channel which the proposal is submitted, e.g. direct, banca, etc
      tenantCode:
        type: string
        description: Insurer i.e. receipient of this proposal submission
      policyholderSection:
        $ref: '#/definitions/BasicPolicyholderSection'
      proposedInsuranceSection:
        $ref: '#/definitions/FirstPartyMedicalProposedInsurance'
      premiumPaymentSection:
        $ref: '#/definitions/PaymentGatewayPaymentSection'
      promotionCode:
        type: string
        description: For marketing purposes, the campaign or promotion code.

  SubmissionSummary:
    type: object
    properties:
      pk:
        type: string
        readOnly: true
        description: Unique id for the submission
      doctype:
        type: string
        readOnly: true
        default: "Submission"
      submissionDate:
        type: string
        format: date
      submissionType:
        type: string
        description: submission type e.g. proposal
        default: "Proposal"
      submissionRefNo:
        type: string
        description: Unique id identifying the submission type e.g. the proposalId
      submissionChannel:
        type: string
        description: Channel of submission e.g. direct, banca, agency, broker
      tenantCode:
        type: string
        description: Insurer, i.e. receipient of the submission
      status:
        type: string
        readOnly: true
        description: Status of the submission. Valid values should be SUBMITTED, ACKNOWLEDGED, PROCESSING, PROCESSED,
      decision:
        type: string
        readOnly: true
        description: After the submission is processed, there should be a decision i.e. QUERY, CONDITIONAL, ACCEPTED, DECLINED
      userId:
        type: string
        readOnly: true
        description: The user that created this submission
      lastModified:
        type: string
        format: date
        readOnly: true
        description: The last time this submission document has been modified
      version:
        type: number
        readOnly: true
        description: The revision number used for optimistic locking
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: string

  FirstPartyMedicalSubmission:
    type: object
    required:
      - submissionDate
      - submissionType
      - submissionData
      - submissionChannel
      - tenantCode
    properties:
      pk:
        type: string
        readOnly: true
        description: Unique id for the submission. Assigned by backend
      doctype:
        type: string
        readOnly: true
        default: "Submission"
        description: Assigned by backend
      submissionDate:
        type: string
        format: date
      submissionType:
        type: string
        description: submission type e.g. FirstPartyMedicalProposal
        default: "FirstPartyMedicalProposal"
      submissionChannel:
        type: string
        description: Channel of submission e.g. direct, banca, agency, broker
      tenantCode:
        type: string
        description: Insurer, i.e. recipient of the submission
      submissionRefNo:
        type: string
        description: A reference number supplied by the client to uniquely identify the submission
      status:
        type: string
        readOnly: true
        default: "SUBMITTED"
        description: Status of the submission. Valid values should be SUBMITTED, ACKNOWLEDGED, PROCESSING, PROCESSED. Assigned by backend
      decision:
        type: string
        readOnly: true
        default: "ACCEPTED"
        description: After the submission is processed, there should be a decision i.e. QUERY, CONDITIONAL, ACCEPTED, DECLINED. In the simple case which is sold online (direct), only clean cases are accepted, so the decision should always be ACCEPTED
      userId:
        type: string
        readOnly: true
        description: The user that created this submission i.e. sender
      lastModified:
        type: string
        format: date
        readOnly: true
        description: The last time this submission document has been modified
      # version:
      #   type: number
      #   readOnly: true
      #   description: The revision number used for optimistic locking. In this situation where the submissions cannot be edited, this field is not required.
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: string
      submissionData:
        $ref: '#/definitions/FirstPartyMedicalProposal'
      messages:
        type: array
        readOnly: true
        description: messages can be used to provide more information on the status or decision on the submission
        items:
          type: object
          properties:
            messageDate:
              type: string
            message:
              type: string

  BasicPolicyholderSection:
    type: object
    required:
      - fullName
      - birthCountry
      - birthDate
      - idType
      - idNumber
      - nationality
      - gender
      - occupation
      - insuranceObjective
      - mailingAddress
      - contactInfo
    properties:
      fullName:
        type: string
      birthCountry:
        type: string
      birthDate:
        type: string
        format: date
      age:
        type: number
      idType:
        type: string
        description: The identification type; a enumerated list based on a code table e.g. "NRIC", "PASSPORT". "KTP", "BIRTHCERT" etc
      idNumber:
        type: string
        description: The identification number
      nationality:
        type: string
        description: Nationality of the policyholder. Should be selected from an enumerated list of nationalities.
      gender:
        type: string
        description: Gender of the policyholder. Male or Female.
      pdpaConsent:
        type: boolean
        description: Usually a checkbox to get consent to contact the policyholder for servicing and marketing purposes.
      occupation:
        type: string
        description: Select from a coded list of occupations
      employmentNature:
        type: string
      insuranceObjective:
        type: string
        description: A coded list of objectives e.g. protection, education, etc
      mailingAddress:
        type: object
        required:
          - addressLine1
          - country
          - postcode
        properties:
          addressLine1:
            type: string
          addressLine2:
            type: string
          country:
            type: string
          state:
            type: string
          postcode:
            type: string
      contactInfo:
        type: object
        properties:
          homeTelNo:
            type: string
            description: Home telephone number
          mobileNo:
            type: string
          email:
            type: string
      extensionFields:
        type: object
        description: Use this object to hold the aditional fields due to local customizations
        additionalProperties:
          type: string

  PaymentGatewayPaymentSection:
    type: object
    description: For direct insurance via internet the payment gateway can be used to pay for the iniitial payment and subsequent payment using recurring payments. All  the account details are handled by the payment gateway provider.
    required:
      - initialPaymentMethod
      - subsequentPaymentMethod
    properties:
      initialPaymentMethod:
        type: string
        default: PaymentGatewayRecurringPayment
      subsequentPaymentMethod:
        type: string
        default: PaymentGatewayRecurringPayment


  DirectMedicalProduct:
    type: object
    properties:
      productId:
        type: integer
      productCode:
        type: string
      productName:
        type: string
      packageCode:
        type: string
        description: The package code to reference the marketing plan for this product.
      insured:
        type: object
        properties:
          name:
            type: string
            description: Name of the insured
          birthDate:
            type: string
            description: Date of birth for the insured
            format: date
          age:
            type: number
            description: Age of the insured. Can be derived from the age method (company or product specific) and the birth date if provided.
          occupation:
            type: string
            description: Typically provided to determine the risk class of this person.
          occupationClass:
            type: string
            description: For some products, this is a risk factor. Can be derived from the occupation if provided.
          gender:
            type: string
            description: MALE or FEMALE
          smoking:
            type: string
            description: Generally SMOKER or NON-SMOKER and used as a factor to determine the risk premium

      benefitLevel:
        type: string
        description: For medical plans, to simplify the input, there are usually predefined plans e.g. platinum, gold, silver. These map to different benefits with their sum assured (amount of the benefit)
      coverageTermType:
        type: string
        default: "2"
        description: Valid values 1=Cover Whole Life, 2=Cover for certain years, 3=Cover up to certain age, 4=Cover for certain months. Normally, customers will be given a choice to cover for a certain years (i.e. 2) or cover up certain age (i.e. 3). At times, the product can only have 1 coverage term, e.g. 5 years, which is typical for medical products
      coverageTermValue:
        type: number
        default: 5
        description: If coverageTermType=2, then it means the number of years that coveraage if required, if coverageTermType=3, then value here means the age in which coverage is required.
      premiumPaymentTermType:
        type: string
        description: Similar meaning to coverageTermType
      premiumPaymentTermValue:
        type: number
        description: Similar meaning to coverageTermValue
      currency:
        type: string
        default: CNY
        description: When selling direct (online), there should be only one currency, and should be known to the client or omitted.
      paymentMode:
        type: string
        default: "4"
        description: The payment frequency 1=Yearly, 2=Half Yearly, 3=Quarterly, 4=Monthly, 5=Single. When selling direct (internet), to show that it is cheap, default is montly
      firstYearPremium:
        type: number
        description: Calculated by the eBaoCloud service, representing the 1st year annual premium
      premiumAmount:
        type: number
        description: Premium amount taking into account the payment mode, so if payment mode is monthly (default), then this represents the monthly premium amount. This is also calculated by the eBaoCloud API service

  FirstPartyMedicalProposedInsurance:
    type: object
    required:
      - startDate
      - directMedicalProduct
    properties:
      startDate:
        type: string
        format: date
        description: The proposed commencement date of the insurance
      directMedicalProduct:
        $ref: '#/definitions/DirectMedicalProduct'


# ********************* parameters *************************
parameters:

  queryOffset:
    name: offset
    in: query
    description: Number of records to skip in the result list
    required: false
    type: number
    format: integer
    default: 0

  queryLimit:
    name: limit
    in: query
    description: Limit the number of rows to return
    required: false
    type: number
    format: integer
    default: 100

  querySort:
    name: sort
    in: query
    description: Sorting order. Prefix with '-' for descending order
    required: false
    type: string
    format: string

  queryKeys:
    name: keys
    in: query
    description: Specify multiple rows to fetch ?keys=123,456
    required: false
    type: array
    collectionFormat: csv
    items:
      type: string

  queryFilter:
    name: filter
    in: query
    description: Filter criteria to apply to the search. The format used is filter=condition|condition. The format of the condition is {key}\*{operator}\*{value) e.g. filter=name\*startsWith\*A. The \* is used to delimit the components of the criteria. As an example, to find rows with name that starts with 'A', specify as filter=name\*startsWith\*A .  When there are multiple criterias in the condition, e.g. find rows where name startsWith A and age greater than 30, specify as filter=name\*startsWith\*A;age\*GT\*30 . The ; character is used to separate the criterias. For more complex filters, e.g. Find rows where name starts with 'A' OR name starts with B, then it can be specified as filter=name\*startsWith\*A|name\*startsWith\*B . Use the | to separate OR conditions.

    required: false
    type: array
    collectionFormat: pipes
    items:
      type: string


  language:
    name: lang
    in: header
    description: Language to be used in case the response has text data (e.g. error messages)
    type: string
    required: false

  productId:
    name: productId
    in: path
    type: integer
    required: true
    description: Unique id for the product

  # packageId:
  #   name: packageId
  #   in: path
  #   required: true
  #   description: Unique id for the package
  #   type: integer

  packageCode:
    name: packageCode
    in: path
    required: true
    description: Unique code for the package
    type: string

  Token:
    name: Token
    description: The security token, for the moment it is equal to the authenticated user id
    in: header
    required: false
    type: string

  TenantCode:
    name: tenantCode
    description: The insurer who will receive the document
    in: header
    required: false
    type: string

# ************************ responses ****************************

responses:

  Standard400Response:
    description: Response to indicate that the request cannot be processed due to a client error (submitted data has errors).
    schema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

  Standard401Response:
    description: Response when the client is not authorized for this operation.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "Authentication credentials were missing or incorrect"

  Standard404Response:
    description: Response when the document is not found.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "The item does not exist"

  Standard500Response:
    description: Response when there is an unexpected server error.
    schema:
      type: object
      properties:
        message:
          type: string
          description: "An unexpected error has occurred. Please try again later"

  Validator400Response:
    description: Response when validation fails
    schema:
      type: object
      properties:
        errorList:
          type: array
          items:
            type: object
            properties:
              validator:
                description: Name of the validators that emitted the error
                type: string
              errors:
                description: The errors emitted by the validator. Designed to allow for multiple error messages per validator
                type: array
                items:
                  type: string
